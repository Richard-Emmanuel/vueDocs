import { v as createVNode, g as Fragment, _ as __astro_tag_component__ } from './astro/server_BMW5zgxf.mjs';
import 'clsx';

const frontmatter = {
  "title": "Suspense",
  "description": "A guide to using the Suspense component in Vue.js."
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "outline-deep",
    "text": "outline: deep"
  }, {
    "depth": 1,
    "slug": "suspense",
    "text": "Suspense"
  }, {
    "depth": 2,
    "slug": "async-dependencies",
    "text": "Async Dependencies"
  }, {
    "depth": 3,
    "slug": "async-setup",
    "text": "async setup()"
  }, {
    "depth": 3,
    "slug": "async-components",
    "text": "Async Components"
  }, {
    "depth": 2,
    "slug": "loading-state",
    "text": "Loading State"
  }, {
    "depth": 2,
    "slug": "events",
    "text": "Events"
  }, {
    "depth": 2,
    "slug": "error-handling",
    "text": "Error Handling"
  }, {
    "depth": 2,
    "slug": "combining-with-other-components",
    "text": "Combining with Other Components"
  }, {
    "depth": 2,
    "slug": "nested-suspense",
    "text": "Nested Suspense"
  }];
}
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"outline-deep\">outline: deep</h2><a class=\"sl-anchor-link\" href=\"#outline-deep\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “outline: deep”</span></a></div>\n<div class=\"sl-heading-wrapper level-h1\"><h1 id=\"suspense\">Suspense</h1><a class=\"sl-anchor-link\" href=\"#suspense\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Suspense”</span></a></div>\n<div><p>Experimental Feature</p><p><code dir=\"auto\">&#x3C;Suspense></code> is an experimental feature. It is not guaranteed to reach stable status and the API may change before it does.</p></div>\n<p><code dir=\"auto\">&#x3C;Suspense></code> is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"async-dependencies\">Async Dependencies</h2><a class=\"sl-anchor-link\" href=\"#async-dependencies\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Async Dependencies”</span></a></div>\n<p>To explain the problem <code dir=\"auto\">&#x3C;Suspense></code> is trying to solve and how it interacts with these async dependencies, let’s imagine a component hierarchy like the following:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.v4551.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x3C;Suspense></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">└─ &#x3C;Dashboard></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">   </span></span><span style=\"--0:#d6deeb;--1:#403f53\">├─ &#x3C;Profile></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">   </span></span><span style=\"--0:#d6deeb;--1:#403f53\">│  └─ &#x3C;FriendStatus> (component with async setup())</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">   </span></span><span style=\"--0:#d6deeb;--1:#403f53\">└─ &#x3C;Content></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">      </span></span><span style=\"--0:#d6deeb;--1:#403f53\">├─ &#x3C;ActivityFeed> (async component)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">      </span></span><span style=\"--0:#d6deeb;--1:#403f53\">└─ &#x3C;Stats> (async component)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<Suspense>└─ <Dashboard>   ├─ <Profile>   │  └─ <FriendStatus> (component with async setup())   └─ <Content>      ├─ <ActivityFeed> (async component)      └─ <Stats> (async component)\"><div></div></button></div></figure></div>\n<p>In the component tree there are multiple nested components whose rendering depends on some async resource to be resolved first. Without <code dir=\"auto\">&#x3C;Suspense></code>, each of them will need to handle its own loading / error and loaded states. In the worst case scenario, we may see three loading spinners on the page, with content displayed at different times.</p>\n<p>The <code dir=\"auto\">&#x3C;Suspense></code> component gives us the ability to display top-level loading / error states while we wait on these nested async dependencies to be resolved.</p>\n<p>There are two types of async dependencies that <code dir=\"auto\">&#x3C;Suspense></code> can wait on:</p>\n<ol>\n<li>\n<p>Components with an async <code dir=\"auto\">setup()</code> hook. This includes components using <code dir=\"auto\">&#x3C;script setup></code> with top-level <code dir=\"auto\">await</code> expressions.</p>\n</li>\n<li>\n<p><a href=\"/guide/components/async\">Async Components</a>.</p>\n</li>\n</ol>\n<div class=\"sl-heading-wrapper level-h3\"><h3 id=\"async-setup\"><code dir=\"auto\">async setup()</code></h3><a class=\"sl-anchor-link\" href=\"#async-setup\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “async setup()”</span></a></div>\n<p>A Composition API component’s <code dir=\"auto\">setup()</code> hook can be async:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"js\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8844AE\">export</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8844AE\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#C792EA;--1:#8844AE\">async</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">setup</span><span style=\"--0:#D9F5DD;--1:#111111\">()</span><span style=\"--0:#D6DEEB;--1:#403F53\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3B61B0\">const</span><span style=\"--0:#C792EA;--1:#8844AE\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">res</span><span style=\"--0:#C792EA;--1:#8844AE\"> = await </span><span style=\"--0:#82AAFF;--1:#3B61B0\">fetch</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#096E72\">...</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3B61B0\">const</span><span style=\"--0:#C792EA;--1:#8844AE\"> </span><span style=\"--0:#82AAFF;--1:#3B61B0\">posts</span><span style=\"--0:#C792EA;--1:#8844AE\"> = await </span><span style=\"--0:#7FDBCA;--1:#096E72\">res</span><span style=\"--0:#C792EA;--1:#8844AE\">.</span><span style=\"--0:#82AAFF;--1:#3B61B0\">json</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8844AE\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--1:#403F53\">      </span></span><span style=\"--0:#D7DBE0;--1:#403F53\">posts</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"export default {  async setup() {    const res = await fetch(...)    const posts = await res.json()    return {      posts    }  }}\"><div></div></button></div></figure></div>\n<p>If using <code dir=\"auto\">&#x3C;script setup></code>, the presence of top-level <code dir=\"auto\">await</code> expressions automatically makes the component an async dependency:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"vue\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">script</span></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3B61B0\">setup</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8844AE\">const </span><span style=\"--0:#82AAFF;--1:#3B61B0\">res</span><span style=\"--0:#C792EA;--1:#8844AE\"> = await </span><span style=\"--0:#82AAFF;--1:#3B61B0\">fetch</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#096E72\">...</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8844AE\">const </span><span style=\"--0:#82AAFF;--1:#3B61B0\">posts</span><span style=\"--0:#C792EA;--1:#8844AE\"> = await </span><span style=\"--0:#7FDBCA;--1:#096E72\">res</span><span style=\"--0:#C792EA;--1:#8844AE\">.</span><span style=\"--0:#82AAFF;--1:#3B61B0\">json</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">script</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{{ posts }}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\">></span></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<script setup>const res = await fetch(...)const posts = await res.json()</script><template>  {{ posts }}</template>\"><div></div></button></div></figure></div>\n<div class=\"sl-heading-wrapper level-h3\"><h3 id=\"async-components\">Async Components</h3><a class=\"sl-anchor-link\" href=\"#async-components\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Async Components”</span></a></div>\n<p>Async components are <strong>“suspensible”</strong> by default. This means that if it has a <code dir=\"auto\">&#x3C;Suspense></code> in the parent chain, it will be treated as an async dependency of that <code dir=\"auto\">&#x3C;Suspense></code>. In this case, the loading state will be controlled by the <code dir=\"auto\">&#x3C;Suspense></code>, and the component’s own loading, error, delay and timeout options will be ignored.</p>\n<p>The async component can opt-out of <code dir=\"auto\">Suspense</code> control and let the component always control its own loading state by specifying <code dir=\"auto\">suspensible: false</code> in its options.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"loading-state\">Loading State</h2><a class=\"sl-anchor-link\" href=\"#loading-state\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Loading State”</span></a></div>\n<p>The <code dir=\"auto\">&#x3C;Suspense></code> component has two slots: <code dir=\"auto\">#default</code> and <code dir=\"auto\">#fallback</code>. Both slots only allow for <strong>one</strong> immediate child node. The node in the default slot is shown if possible. If not, the node in the fallback slot will be shown instead.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"vue-html\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- component with nested async dependencies --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Dashboard</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- loading state via #fallback slot --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\"> #</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">fallback</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Loading...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<Suspense>  <!-- component with nested async dependencies -->  <Dashboard />  <!-- loading state via #fallback slot -->  <template #fallback>    Loading...  </template></Suspense>\"><div></div></button></div></figure></div>\n<p>On initial render, <code dir=\"auto\">&#x3C;Suspense></code> will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter a <strong>pending</strong> state. During the pending state, the fallback content will be displayed. When all encountered async dependencies have been resolved, <code dir=\"auto\">&#x3C;Suspense></code> enters a <strong>resolved</strong> state and the resolved default slot content is displayed.</p>\n<p>If no async dependencies were encountered during the initial render, <code dir=\"auto\">&#x3C;Suspense></code> will directly go into a resolved state.</p>\n<p>Once in a resolved state, <code dir=\"auto\">&#x3C;Suspense></code> will only revert to a pending state if the root node of the <code dir=\"auto\">#default</code> slot is replaced. New async dependencies nested deeper in the tree will <strong>not</strong> cause the <code dir=\"auto\">&#x3C;Suspense></code> to revert to a pending state.</p>\n<p>When a revert happens, fallback content will not be immediately displayed. Instead, <code dir=\"auto\">&#x3C;Suspense></code> will display the previous <code dir=\"auto\">#default</code> content while waiting for the new content and its async dependencies to be resolved. This behavior can be configured with the <code dir=\"auto\">timeout</code> prop: <code dir=\"auto\">&#x3C;Suspense></code> will switch to fallback content if it takes longer than <code dir=\"auto\">timeout</code> to render the new default content. A <code dir=\"auto\">timeout</code> value of <code dir=\"auto\">0</code> will cause the fallback content to be displayed immediately when default content is replaced.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"events\">Events</h2><a class=\"sl-anchor-link\" href=\"#events\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Events”</span></a></div>\n<p>The <code dir=\"auto\">&#x3C;Suspense></code> component emits 3 events: <code dir=\"auto\">pending</code>, <code dir=\"auto\">resolve</code> and <code dir=\"auto\">fallback</code>. The <code dir=\"auto\">pending</code> event occurs when entering a pending state. The <code dir=\"auto\">resolve</code> event is emitted when new content has finished resolving in the <code dir=\"auto\">default</code> slot. The <code dir=\"auto\">fallback</code> event is fired when the contents of the <code dir=\"auto\">fallback</code> slot are shown.</p>\n<p>The events could be used, for example, to show a loading indicator in front of the old DOM while new components are loading.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"error-handling\">Error Handling</h2><a class=\"sl-anchor-link\" href=\"#error-handling\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Error Handling”</span></a></div>\n<p><code dir=\"auto\">&#x3C;Suspense></code> currently does not provide error handling via the component itself - however, you can use the <a href=\"/api/options-lifecycle#errorcaptured\"><code dir=\"auto\">errorCaptured</code></a> option or the <a href=\"/api/composition-api-lifecycle#onerrorcaptured\"><code dir=\"auto\">onErrorCaptured()</code></a> hook to capture and handle async errors in the parent component of <code dir=\"auto\">&#x3C;Suspense></code>.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"combining-with-other-components\">Combining with Other Components</h2><a class=\"sl-anchor-link\" href=\"#combining-with-other-components\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Combining with Other Components”</span></a></div>\n<p>It is common to want to use <code dir=\"auto\">&#x3C;Suspense></code> in combination with the <a href=\"./transition\"><code dir=\"auto\">&#x3C;Transition></code></a> and <a href=\"./keep-alive\"><code dir=\"auto\">&#x3C;KeepAlive></code></a> components. The nesting order of these components is important to get them all working correctly.</p>\n<p>In addition, these components are often used in conjunction with the <code dir=\"auto\">&#x3C;RouterView></code> component from <a href=\"https://router.vuejs.org/\">Vue Router</a>.</p>\n<p>The following example shows how to nest these components so that they all behave as expected. For simpler combinations you can remove the components that you don’t need:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"vue-html\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">RouterView</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> </span><span style=\"--0:#C5E478;--1:#3B61B0\">v-slot</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">{ </span><span style=\"--0:#D7DBE0;--1:#403F53\">Component</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> }</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\"> </span></span><span style=\"--0:#C5E478;--1:#3B61B0\">v-if</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">Component</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Transition</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> </span><span style=\"--0:#C5E478;--1:#3B61B0\">mode</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#984E4D\">out-in</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">KeepAlive</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- main content --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\"> :</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">is</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">Component</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">>&#x3C;/</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- loading state --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\"> #</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">fallback</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">            </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Loading...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">          </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">KeepAlive</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Transition</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">template</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">RouterView</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<RouterView v-slot=&#x22;{ Component }&#x22;>  <template v-if=&#x22;Component&#x22;>    <Transition mode=&#x22;out-in&#x22;>      <KeepAlive>        <Suspense>          <!-- main content -->          <component :is=&#x22;Component&#x22;></component>          <!-- loading state -->          <template #fallback>            Loading...          </template>        </Suspense>      </KeepAlive>    </Transition>  </template></RouterView>\"><div></div></button></div></figure></div>\n<p>Vue Router has built-in support for <a href=\"https://router.vuejs.org/guide/advanced/lazy-loading.html\">lazily loading components</a> using dynamic imports. These are distinct from async components and currently they will not trigger <code dir=\"auto\">&#x3C;Suspense></code>. However, they can still have async components as descendants and those can trigger <code dir=\"auto\">&#x3C;Suspense></code> in the usual way.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"nested-suspense\">Nested Suspense</h2><a class=\"sl-anchor-link\" href=\"#nested-suspense\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Nested Suspense”</span></a></div>\n<ul>\n<li>Only supported in 3.3+</li>\n</ul>\n<p>When we have multiple async components (common for nested or layout-based routes) like this:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"vue-html\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\"> :</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">is</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">DynamicAsyncOuter</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\"> :</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">is</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">DynamicAsyncInner</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<Suspense>  <component :is=&#x22;DynamicAsyncOuter&#x22;>    <component :is=&#x22;DynamicAsyncInner&#x22; />  </component></Suspense>\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">&#x3C;Suspense></code> creates a boundary that will resolve all the async components down the tree, as expected. However, when we change <code dir=\"auto\">DynamicAsyncOuter</code>, <code dir=\"auto\">&#x3C;Suspense></code> awaits it correctly, but when we change <code dir=\"auto\">DynamicAsyncInner</code>, the nested <code dir=\"auto\">DynamicAsyncInner</code> renders an empty node until it has been resolved (instead of the previous one or fallback slot).</p>\n<p>In order to solve that, we could have a nested suspense to handle the patch for the nested component, like:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"vue-html\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\"> :</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">is</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">DynamicAsyncOuter</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> </span><span style=\"--0:#C5E478;--1:#3B61B0\">suspensible</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#919F9F;--1:#5F636F\">&#x3C;!-- this --></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">      </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\"> :</span></span><span style=\"--0:#C5E478;--1:#3B61B0\">is</span><span style=\"--0:#7FDBCA;--1:#8844AE\">=</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D7DBE0;--1:#403F53\">DynamicAsyncInner</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#7FDBCA;--1:#8844AE\"> /></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--1:#8844AE\"><span style=\"--0:#7FDBCA\">&#x3C;/</span><span style=\"--0:#CAECE6\">component</span><span style=\"--0:#7FDBCA\">></span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#8844AE\">&#x3C;/</span><span style=\"--0:#C5E478;--1:#3B61B0\">Suspense</span><span style=\"--0:#7FDBCA;--1:#8844AE\">></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<Suspense>  <component :is=&#x22;DynamicAsyncOuter&#x22;>    <Suspense suspensible> <!-- this -->      <component :is=&#x22;DynamicAsyncInner&#x22; />    </Suspense>  </component></Suspense>\"><div></div></button></div></figure></div>\n<p>If you don’t set the <code dir=\"auto\">suspensible</code> prop, the inner <code dir=\"auto\">&#x3C;Suspense></code> will be treated like a sync component by the parent <code dir=\"auto\">&#x3C;Suspense></code>. That means that it has its own fallback slot and if both <code dir=\"auto\">Dynamic</code> components change at the same time, there might be empty nodes and multiple patching cycles while the child <code dir=\"auto\">&#x3C;Suspense></code> is loading its own dependency tree, which might not be desirable. When it’s set, all the async dependency handling is given to the parent <code dir=\"auto\">&#x3C;Suspense></code> (including the events emitted) and the inner <code dir=\"auto\">&#x3C;Suspense></code> serves solely as another boundary for the dependency resolution and patching.</p>\n<hr>\n<p><strong>Related</strong></p>\n<ul>\n<li><a href=\"/api/built-in-components#suspense\"><code dir=\"auto\">&#x3C;Suspense></code> API reference</a></li>\n</ul>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/built-in-components/suspense.mdx";
const file = "C:/Users/Admin/Desktop/Project/vue-docs/src/content/docs/built-in-components/suspense.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "C:/Users/Admin/Desktop/Project/vue-docs/src/content/docs/built-in-components/suspense.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, Content as default, file, frontmatter, getHeadings, url };
