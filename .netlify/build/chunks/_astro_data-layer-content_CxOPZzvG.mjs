const _astro_dataLayerContent = [["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.13","content-config-digest","9a95ec2e8398aaca","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[{\"name\":\"Night Owl No Italics\",\"type\":\"dark\",\"colors\":{\"focusBorder\":\"#122d42\",\"foreground\":\"#d6deeb\",\"disabledForeground\":\"#cccccc80\",\"descriptionForeground\":\"#d6deebb3\",\"errorForeground\":\"#ef5350\",\"icon.foreground\":\"#c5c5c5\",\"contrastActiveBorder\":null,\"contrastBorder\":\"#122d42\",\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#4f4f4f\",\"textLink.activeForeground\":\"#3794ff\",\"textLink.foreground\":\"#3794ff\",\"textPreformat.foreground\":\"#d7ba7d\",\"textSeparator.foreground\":\"#ffffff2e\",\"editor.background\":\"#23262f\",\"editor.foreground\":\"#d6deeb\",\"editorLineNumber.foreground\":\"#4b6479\",\"editorLineNumber.activeForeground\":\"#c5e4fd\",\"editorActiveLineNumber.foreground\":\"#c6c6c6\",\"editor.selectionBackground\":\"#1d3b53\",\"editor.inactiveSelectionBackground\":\"#7e57c25a\",\"editor.selectionHighlightBackground\":\"#5f7e9779\",\"editorError.foreground\":\"#ef5350\",\"editorWarning.foreground\":\"#b39554\",\"editorInfo.foreground\":\"#3794ff\",\"editorHint.foreground\":\"#eeeeeeb2\",\"problemsErrorIcon.foreground\":\"#ef5350\",\"problemsWarningIcon.foreground\":\"#b39554\",\"problemsInfoIcon.foreground\":\"#3794ff\",\"editor.findMatchBackground\":\"#5f7e9779\",\"editor.findMatchHighlightBackground\":\"#1085bb5d\",\"editor.findRangeHighlightBackground\":\"#3a3d4166\",\"editorLink.activeForeground\":\"#4e94ce\",\"editorLightBulb.foreground\":\"#ffcc00\",\"editorLightBulbAutoFix.foreground\":\"#75beff\",\"diffEditor.insertedTextBackground\":\"#99b76d23\",\"diffEditor.insertedTextBorder\":\"#c5e47833\",\"diffEditor.removedTextBackground\":\"#ef535033\",\"diffEditor.removedTextBorder\":\"#ef53504d\",\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#011627\",\"editorStickyScrollHover.background\":\"#2a2d2e\",\"editorInlayHint.background\":\"#5f7e97cc\",\"editorInlayHint.foreground\":\"#ffffff\",\"editorInlayHint.typeBackground\":\"#5f7e97cc\",\"editorInlayHint.typeForeground\":\"#ffffff\",\"editorInlayHint.parameterBackground\":\"#5f7e97cc\",\"editorInlayHint.parameterForeground\":\"#ffffff\",\"editorPane.background\":\"#011627\",\"editorGroup.emptyBackground\":\"#011627\",\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-black)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#011627\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#011627\",\"editorGroup.dropBackground\":\"#7e57c273\",\"editorGroup.dropIntoPromptForeground\":\"#d6deeb\",\"editorGroup.dropIntoPromptBackground\":\"#021320\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#011627\",\"sideBySideEditor.verticalBorder\":\"#011627\",\"scrollbar.shadow\":\"#010b14\",\"scrollbarSlider.background\":\"#ffffff17\",\"scrollbarSlider.hoverBackground\":\"#ffffff40\",\"scrollbarSlider.activeBackground\":\"#084d8180\",\"panel.background\":\"#011627\",\"panel.border\":\"#5f7e97\",\"panelTitle.activeBorder\":\"#5f7e97\",\"panelTitle.activeForeground\":\"#ffffffcc\",\"panelTitle.inactiveForeground\":\"#d6deeb80\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#011627\",\"widget.shadow\":\"#011627\",\"editorWidget.background\":\"#021320\",\"editorWidget.foreground\":\"#d6deeb\",\"editorWidget.border\":\"#5f7e97\",\"quickInput.background\":\"#021320\",\"quickInput.foreground\":\"#d6deeb\",\"quickInputTitle.background\":\"#ffffff1a\",\"pickerGroup.foreground\":\"#d1aaff\",\"pickerGroup.border\":\"#011627\",\"editor.hoverHighlightBackground\":\"#7e57c25a\",\"editorHoverWidget.background\":\"#011627\",\"editorHoverWidget.foreground\":\"#d6deeb\",\"editorHoverWidget.border\":\"#5f7e97\",\"editorHoverWidget.statusBarBackground\":\"#011a2f\",\"titleBar.activeBackground\":\"var(--sl-color-black)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#010e1a\",\"titleBar.inactiveForeground\":\"#eeefff99\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#5a5d5e50\",\"toolbar.activeBackground\":\"#63666750\",\"tab.activeBackground\":\"#0b2942\",\"tab.unfocusedActiveBackground\":\"#0b2942\",\"tab.inactiveBackground\":\"#01111d\",\"tab.unfocusedInactiveBackground\":\"#01111d\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#5f7e97\",\"tab.unfocusedActiveForeground\":\"#5f7e97\",\"tab.unfocusedInactiveForeground\":\"#5f7e97\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#272b3b\",\"tab.lastPinnedBorder\":\"#585858\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":\"#262a39\",\"tab.activeBorderTop\":\"var(--sl-color-accent-high)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#3399cc\",\"tab.inactiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedActiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedInactiveModifiedBorder\":\"#3399cc40\",\"badge.background\":\"#5f7e97\",\"badge.foreground\":\"#ffffff\",\"button.background\":\"#7e57c2cc\",\"button.foreground\":\"#ffffffcc\",\"button.border\":\"#122d42\",\"button.separator\":\"#ffffff52\",\"button.hoverBackground\":\"#7e57c2\",\"button.secondaryBackground\":\"#3a3d41\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#46494e\",\"dropdown.background\":\"#011627\",\"dropdown.foreground\":\"#ffffffcc\",\"dropdown.border\":\"#5f7e97\",\"list.activeSelectionBackground\":\"#234d708c\",\"list.activeSelectionForeground\":\"#ffffff\",\"tree.indentGuidesStroke\":\"#585858\",\"input.background\":\"#0b253a\",\"input.foreground\":\"#ffffffcc\",\"input.placeholderForeground\":\"#5f7e97\",\"inputOption.activeBorder\":\"#ffffffcc\",\"inputOption.hoverBackground\":\"#5a5d5e80\",\"inputOption.activeBackground\":\"#122d4266\",\"inputOption.activeForeground\":\"#ffffff\",\"inputValidation.infoBackground\":\"#00589ef2\",\"inputValidation.infoBorder\":\"#64b5f6\",\"inputValidation.warningBackground\":\"#675700f2\",\"inputValidation.warningBorder\":\"#ffca28\",\"inputValidation.errorBackground\":\"#ab0300f2\",\"inputValidation.errorBorder\":\"#ef5350\",\"keybindingLabel.background\":\"#8080802b\",\"keybindingLabel.foreground\":\"#cccccc\",\"keybindingLabel.border\":\"#33333399\",\"keybindingLabel.bottomBorder\":\"#44444499\",\"menu.foreground\":\"#ffffffcc\",\"menu.background\":\"#011627\",\"menu.selectionForeground\":\"#ffffff\",\"menu.selectionBackground\":\"#234d708c\",\"menu.separatorBackground\":\"#606060\",\"editor.snippetTabstopHighlightBackground\":\"#7c7c74c\",\"editor.snippetFinalTabstopHighlightBorder\":\"#525252\",\"terminal.ansiBlack\":\"#011627\",\"terminal.ansiRed\":\"#ef5350\",\"terminal.ansiGreen\":\"#22da6e\",\"terminal.ansiYellow\":\"#c5e478\",\"terminal.ansiBlue\":\"#82aaff\",\"terminal.ansiMagenta\":\"#c792ea\",\"terminal.ansiCyan\":\"#21c7a8\",\"terminal.ansiWhite\":\"#ffffff\",\"terminal.ansiBrightBlack\":\"#575656\",\"terminal.ansiBrightRed\":\"#ef5350\",\"terminal.ansiBrightGreen\":\"#22da6e\",\"terminal.ansiBrightYellow\":\"#ffeb95\",\"terminal.ansiBrightBlue\":\"#82aaff\",\"terminal.ansiBrightMagenta\":\"#c792ea\",\"terminal.ansiBrightCyan\":\"#7fdbca\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"selection.background\":\"#4373c2\",\"input.border\":\"#5f7e97\",\"punctuation.definition.generic.begin.html\":\"#ef5350f2\",\"progress.background\":\"#7e57c2\",\"breadcrumb.foreground\":\"#a599e9\",\"breadcrumb.focusForeground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#ffffff\",\"breadcrumbPicker.background\":\"#001122\",\"list.invalidItemForeground\":\"#975f94\",\"list.dropBackground\":\"#011627\",\"list.focusBackground\":\"#010d18\",\"list.focusForeground\":\"#ffffff\",\"list.highlightForeground\":\"#ffffff\",\"list.hoverBackground\":\"#011627\",\"list.hoverForeground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#0e293f\",\"list.inactiveSelectionForeground\":\"#5f7e97\",\"activityBar.background\":\"#011627\",\"activityBar.dropBackground\":\"#5f7e97\",\"activityBar.foreground\":\"#5f7e97\",\"activityBar.border\":\"#011627\",\"activityBarBadge.background\":\"#44596b\",\"activityBarBadge.foreground\":\"#ffffff\",\"sideBar.background\":\"#011627\",\"sideBar.foreground\":\"#89a4bb\",\"sideBar.border\":\"#011627\",\"sideBarTitle.foreground\":\"#5f7e97\",\"sideBarSectionHeader.background\":\"#011627\",\"sideBarSectionHeader.foreground\":\"#5f7e97\",\"editorCursor.foreground\":\"#80a4c2\",\"editor.wordHighlightBackground\":\"#f6bbe533\",\"editor.wordHighlightStrongBackground\":\"#e2a2f433\",\"editor.lineHighlightBackground\":\"#0003\",\"editor.rangeHighlightBackground\":\"#7e57c25a\",\"editorIndentGuide.background\":\"#5e81ce52\",\"editorIndentGuide.activeBackground\":\"#7e97ac\",\"editorRuler.foreground\":\"#5e81ce52\",\"editorCodeLens.foreground\":\"#5e82ceb4\",\"editorBracketMatch.background\":\"#5f7e974d\",\"editorOverviewRuler.currentContentForeground\":\"#7e57c2\",\"editorOverviewRuler.incomingContentForeground\":\"#7e57c2\",\"editorOverviewRuler.commonContentForeground\":\"#7e57c2\",\"editorGutter.background\":\"#011627\",\"editorGutter.modifiedBackground\":\"#e2b93d\",\"editorGutter.addedBackground\":\"#9ccc65\",\"editorGutter.deletedBackground\":\"#ef5350\",\"editorSuggestWidget.background\":\"#2c3043\",\"editorSuggestWidget.border\":\"#2b2f40\",\"editorSuggestWidget.foreground\":\"#d6deeb\",\"editorSuggestWidget.highlightForeground\":\"#ffffff\",\"editorSuggestWidget.selectedBackground\":\"#5f7e97\",\"debugExceptionWidget.background\":\"#011627\",\"debugExceptionWidget.border\":\"#5f7e97\",\"editorMarkerNavigation.background\":\"#0b2942\",\"editorMarkerNavigationError.background\":\"#ef5350\",\"editorMarkerNavigationWarning.background\":\"#ffca28\",\"peekView.border\":\"#5f7e97\",\"peekViewEditor.background\":\"#011627\",\"peekViewEditor.matchHighlightBackground\":\"#7e57c25a\",\"peekViewResult.background\":\"#011627\",\"peekViewResult.fileForeground\":\"#5f7e97\",\"peekViewResult.lineForeground\":\"#5f7e97\",\"peekViewResult.matchHighlightBackground\":\"#ffffffcc\",\"peekViewResult.selectionBackground\":\"#2e3250\",\"peekViewResult.selectionForeground\":\"#5f7e97\",\"peekViewTitle.background\":\"#011627\",\"peekViewTitleDescription.foreground\":\"#697098\",\"peekViewTitleLabel.foreground\":\"#5f7e97\",\"merge.currentHeaderBackground\":\"#5f7e97\",\"merge.incomingHeaderBackground\":\"#7e57c25a\",\"statusBar.background\":\"#011627\",\"statusBar.foreground\":\"#5f7e97\",\"statusBar.border\":\"#262a39\",\"statusBar.debuggingBackground\":\"#202431\",\"statusBar.debuggingBorder\":\"#1f2330\",\"statusBar.noFolderBackground\":\"#011627\",\"statusBar.noFolderBorder\":\"#25293a\",\"statusBarItem.activeBackground\":\"#202431\",\"statusBarItem.hoverBackground\":\"#202431\",\"statusBarItem.prominentBackground\":\"#202431\",\"statusBarItem.prominentHoverBackground\":\"#202431\",\"notifications.background\":\"#01111d\",\"notifications.border\":\"#262a39\",\"notificationCenter.border\":\"#262a39\",\"notificationToast.border\":\"#262a39\",\"notifications.foreground\":\"#ffffffcc\",\"notificationLink.foreground\":\"#80cbc4\",\"extensionButton.prominentForeground\":\"#ffffffcc\",\"extensionButton.prominentBackground\":\"#7e57c2cc\",\"extensionButton.prominentHoverBackground\":\"#7e57c2\",\"terminal.selectionBackground\":\"#1b90dd4d\",\"terminalCursor.background\":\"#234d70\",\"debugToolBar.background\":\"#011627\",\"welcomePage.buttonBackground\":\"#011627\",\"welcomePage.buttonHoverBackground\":\"#011627\",\"walkThrough.embeddedEditorBackground\":\"#011627\",\"gitDecoration.modifiedResourceForeground\":\"#a2bffc\",\"gitDecoration.deletedResourceForeground\":\"#ef535090\",\"gitDecoration.untrackedResourceForeground\":\"#c5e478ff\",\"gitDecoration.ignoredResourceForeground\":\"#395a75\",\"gitDecoration.conflictingResourceForeground\":\"#ffeb95cc\",\"source.elm\":\"#5f7e97\",\"string.quoted.single.js\":\"#ffffff\",\"meta.objectliteral.js\":\"#82aaff\"},\"fg\":\"#d6deeb\",\"bg\":\"#23262f\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#a2bffc\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#f27775fe\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#d6deeb\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#919f9f\",\"fontStyle\":\"\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#5ca7e4\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#caece6\",\"fontStyle\":\"\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"fontStyle\":\"\",\"foreground\":\"#c5e478\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"background\":\"#ff2c83\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#d3423e\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#919f9f\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#cdebf7\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#ffffff\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#80cbc4\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#57eaf1\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#fad430\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#faf39f\",\"fontStyle\":\"\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#82aaff\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#989da0\",\"background\":\"#F78C6C\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"background\":\"#8BD649\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#ec5f67\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#ef787f\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#31e1eb\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Unquoted String Zone\",\"scope\":[\"string.unquoted.preprocessor.message.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Region\",\"scope\":[\"punctuation.separator.hash.cs\",\"keyword.preprocessor.region.cs\",\"keyword.preprocessor.endregion.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"bold\"}},{\"name\":\"C# Other Variables\",\"scope\":[\"variable.other.object.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Enum\",\"scope\":[\"entity.name.type.enum.cs\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Dart String\",\"scope\":[\"string.interpolated.single.dart\",\"string.interpolated.double.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Dart Class\",\"scope\":[\"support.class.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#ff6d6d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#dddddd\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#e0dec6\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#6ae9f0\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#78ccf0\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#8b96ea\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#c789d6\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#ff869a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#d6deeb\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#8eace3\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#d7dbe0\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-6)\",\"terminalBackground\":\"var(--sl-color-gray-6)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-6)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#ffffff17\",\"markBorderColor\":\"#ffffff40\"}}},{\"name\":\"Night Owl Light\",\"type\":\"light\",\"colors\":{\"focusBorder\":\"#93a1a1\",\"foreground\":\"#403f53\",\"disabledForeground\":\"#61616180\",\"descriptionForeground\":\"#403f53\",\"errorForeground\":\"#403f53\",\"icon.foreground\":\"#424242\",\"contrastActiveBorder\":null,\"contrastBorder\":null,\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#dcdcdc66\",\"textLink.activeForeground\":\"#006ab1\",\"textLink.foreground\":\"#006ab1\",\"textPreformat.foreground\":\"#a31515\",\"textSeparator.foreground\":\"#0000002e\",\"editor.background\":\"#f6f7f9\",\"editor.foreground\":\"#403f53\",\"editorLineNumber.foreground\":\"#90a7b2\",\"editorLineNumber.activeForeground\":\"#403f53\",\"editorActiveLineNumber.foreground\":\"#0b216f\",\"editor.selectionBackground\":\"#e0e0e0\",\"editor.inactiveSelectionBackground\":\"#e0e0e080\",\"editor.selectionHighlightBackground\":\"#339cec33\",\"editorError.foreground\":\"#e64d49\",\"editorWarning.foreground\":\"#daaa01\",\"editorInfo.foreground\":\"#1a85ff\",\"editorHint.foreground\":\"#6c6c6c\",\"problemsErrorIcon.foreground\":\"#e64d49\",\"problemsWarningIcon.foreground\":\"#daaa01\",\"problemsInfoIcon.foreground\":\"#1a85ff\",\"editor.findMatchBackground\":\"#93a1a16c\",\"editor.findMatchHighlightBackground\":\"#93a1a16c\",\"editor.findRangeHighlightBackground\":\"#7497a633\",\"editorLink.activeForeground\":\"#0000ff\",\"editorLightBulb.foreground\":\"#ddb100\",\"editorLightBulbAutoFix.foreground\":\"#007acc\",\"diffEditor.insertedTextBackground\":\"#9ccc2c40\",\"diffEditor.insertedTextBorder\":null,\"diffEditor.removedTextBackground\":\"#ff000033\",\"diffEditor.removedTextBorder\":null,\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#fbfbfb\",\"editorStickyScrollHover.background\":\"#f0f0f0\",\"editorInlayHint.background\":\"#2aa29899\",\"editorInlayHint.foreground\":\"#f0f0f0\",\"editorInlayHint.typeBackground\":\"#2aa29899\",\"editorInlayHint.typeForeground\":\"#f0f0f0\",\"editorInlayHint.parameterBackground\":\"#2aa29899\",\"editorInlayHint.parameterForeground\":\"#f0f0f0\",\"editorPane.background\":\"#fbfbfb\",\"editorGroup.emptyBackground\":null,\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-gray-6)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#f0f0f0\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#f0f0f0\",\"editorGroup.dropBackground\":\"#2677cb2d\",\"editorGroup.dropIntoPromptForeground\":\"#403f53\",\"editorGroup.dropIntoPromptBackground\":\"#f0f0f0\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#f0f0f0\",\"sideBySideEditor.verticalBorder\":\"#f0f0f0\",\"scrollbar.shadow\":\"#cccccc\",\"scrollbarSlider.background\":\"#0000001a\",\"scrollbarSlider.hoverBackground\":\"#00000055\",\"scrollbarSlider.activeBackground\":\"#00000099\",\"panel.background\":\"#f0f0f0\",\"panel.border\":\"#d9d9d9\",\"panelTitle.activeBorder\":\"#424242\",\"panelTitle.activeForeground\":\"#424242\",\"panelTitle.inactiveForeground\":\"#424242bf\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#f6f6f6\",\"widget.shadow\":\"#d9d9d9\",\"editorWidget.background\":\"#f0f0f0\",\"editorWidget.foreground\":\"#403f53\",\"editorWidget.border\":\"#d9d9d9\",\"quickInput.background\":\"#f0f0f0\",\"quickInput.foreground\":\"#403f53\",\"quickInputTitle.background\":\"#0000000f\",\"pickerGroup.foreground\":\"#403f53\",\"pickerGroup.border\":\"#d9d9d9\",\"editor.hoverHighlightBackground\":\"#339cec33\",\"editorHoverWidget.background\":\"#f0f0f0\",\"editorHoverWidget.foreground\":\"#403f53\",\"editorHoverWidget.border\":\"#d9d9d9\",\"editorHoverWidget.statusBarBackground\":\"#e4e4e4\",\"titleBar.activeBackground\":\"var(--sl-color-gray-6)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#f0f0f099\",\"titleBar.inactiveForeground\":\"#33333399\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#b8b8b850\",\"toolbar.activeBackground\":\"#a6a6a650\",\"tab.activeBackground\":\"#f6f6f6\",\"tab.unfocusedActiveBackground\":\"#f6f6f6\",\"tab.inactiveBackground\":\"#f0f0f0\",\"tab.unfocusedInactiveBackground\":\"#f0f0f0\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#403f53\",\"tab.unfocusedActiveForeground\":\"#403f53b3\",\"tab.unfocusedInactiveForeground\":\"#403f5380\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#f0f0f0\",\"tab.lastPinnedBorder\":\"#a9a9a9\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":null,\"tab.activeBorderTop\":\"var(--sl-color-accent)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#2aa298\",\"tab.inactiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedActiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedInactiveModifiedBorder\":\"#93a1a1\",\"badge.background\":\"#2aa298\",\"badge.foreground\":\"#f0f0f0\",\"button.background\":\"#2aa298\",\"button.foreground\":\"#f0f0f0\",\"button.border\":null,\"button.separator\":\"#f0f0f066\",\"button.hoverBackground\":\"#22827a\",\"button.secondaryBackground\":\"#5f6a79\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#4c5561\",\"dropdown.background\":\"#f0f0f0\",\"dropdown.foreground\":\"#403f53\",\"dropdown.border\":\"#d9d9d9\",\"list.activeSelectionBackground\":\"#d3e8f8\",\"list.activeSelectionForeground\":\"#403f53\",\"tree.indentGuidesStroke\":\"#a9a9a9\",\"input.background\":\"#f0f0f0\",\"input.foreground\":\"#403f53\",\"input.placeholderForeground\":\"#93a1a1\",\"inputOption.activeBorder\":\"#2aa298\",\"inputOption.hoverBackground\":\"#b8b8b850\",\"inputOption.activeBackground\":\"#93a1a133\",\"inputOption.activeForeground\":\"#000000\",\"inputValidation.infoBackground\":\"#f0f0f0\",\"inputValidation.infoBorder\":\"#d0d0d0\",\"inputValidation.warningBackground\":\"#daaa01\",\"inputValidation.warningBorder\":\"#e0af02\",\"inputValidation.errorBackground\":\"#f76e6e\",\"inputValidation.errorBorder\":\"#de3d3b\",\"keybindingLabel.background\":\"#dddddd66\",\"keybindingLabel.foreground\":\"#555555\",\"keybindingLabel.border\":\"#cccccc66\",\"keybindingLabel.bottomBorder\":\"#bbbbbb66\",\"menu.foreground\":\"#403f53\",\"menu.background\":\"#f0f0f0\",\"menu.selectionForeground\":\"#403f53\",\"menu.selectionBackground\":\"#d3e8f8\",\"menu.separatorBackground\":\"#d4d4d4\",\"editor.snippetTabstopHighlightBackground\":\"#0a326433\",\"editor.snippetFinalTabstopHighlightBorder\":\"#0a326480\",\"terminal.ansiBlack\":\"#403f53\",\"terminal.ansiRed\":\"#de3d3b\",\"terminal.ansiGreen\":\"#08916a\",\"terminal.ansiYellow\":\"#e0af02\",\"terminal.ansiBlue\":\"#288ed7\",\"terminal.ansiMagenta\":\"#d6438a\",\"terminal.ansiCyan\":\"#2aa298\",\"terminal.ansiWhite\":\"#f0f0f0\",\"terminal.ansiBrightBlack\":\"#403f53\",\"terminal.ansiBrightRed\":\"#de3d3b\",\"terminal.ansiBrightGreen\":\"#08916a\",\"terminal.ansiBrightYellow\":\"#daaa01\",\"terminal.ansiBrightBlue\":\"#288ed7\",\"terminal.ansiBrightMagenta\":\"#d6438a\",\"terminal.ansiBrightCyan\":\"#2aa298\",\"terminal.ansiBrightWhite\":\"#f0f0f0\",\"selection.background\":\"#7a8181ad\",\"notifications.background\":\"#f0f0f0\",\"notifications.foreground\":\"#403f53\",\"notificationLink.foreground\":\"#994cc3\",\"notifications.border\":\"#cccccc\",\"notificationCenter.border\":\"#cccccc\",\"notificationToast.border\":\"#cccccc\",\"notificationCenterHeader.foreground\":\"#403f53\",\"notificationCenterHeader.background\":\"#f0f0f0\",\"input.border\":\"#d9d9d9\",\"progressBar.background\":\"#2aa298\",\"list.inactiveSelectionBackground\":\"#e0e7ea\",\"list.inactiveSelectionForeground\":\"#403f53\",\"list.focusBackground\":\"#d3e8f8\",\"list.hoverBackground\":\"#d3e8f8\",\"list.focusForeground\":\"#403f53\",\"list.hoverForeground\":\"#403f53\",\"list.highlightForeground\":\"#403f53\",\"list.errorForeground\":\"#e64d49\",\"list.warningForeground\":\"#daaa01\",\"activityBar.background\":\"#f0f0f0\",\"activityBar.foreground\":\"#403f53\",\"activityBar.dropBackground\":\"#d0d0d0\",\"activityBarBadge.background\":\"#403f53\",\"activityBarBadge.foreground\":\"#f0f0f0\",\"activityBar.border\":\"#f0f0f0\",\"sideBar.background\":\"#f0f0f0\",\"sideBar.foreground\":\"#403f53\",\"sideBarTitle.foreground\":\"#403f53\",\"sideBar.border\":\"#f0f0f0\",\"editorGroup.background\":\"#f6f6f6\",\"editorCursor.foreground\":\"#90a7b2\",\"editor.wordHighlightBackground\":\"#339cec33\",\"editor.wordHighlightStrongBackground\":\"#007dd659\",\"editor.lineHighlightBackground\":\"#f0f0f0\",\"editor.rangeHighlightBackground\":\"#7497a633\",\"editorWhitespace.foreground\":\"#d9d9d9\",\"editorIndentGuide.background\":\"#d9d9d9\",\"editorCodeLens.foreground\":\"#403f53\",\"editorBracketMatch.background\":\"#d3e8f8\",\"editorBracketMatch.border\":\"#2aa298\",\"editorError.border\":\"#fbfbfb\",\"editorWarning.border\":\"#daaa01\",\"editorGutter.addedBackground\":\"#49d0c5\",\"editorGutter.modifiedBackground\":\"#6fbef6\",\"editorGutter.deletedBackground\":\"#f76e6e\",\"editorRuler.foreground\":\"#d9d9d9\",\"editorOverviewRuler.errorForeground\":\"#e64d49\",\"editorOverviewRuler.warningForeground\":\"#daaa01\",\"editorSuggestWidget.background\":\"#f0f0f0\",\"editorSuggestWidget.foreground\":\"#403f53\",\"editorSuggestWidget.highlightForeground\":\"#403f53\",\"editorSuggestWidget.selectedBackground\":\"#d3e8f8\",\"editorSuggestWidget.border\":\"#d9d9d9\",\"debugExceptionWidget.background\":\"#f0f0f0\",\"debugExceptionWidget.border\":\"#d9d9d9\",\"editorMarkerNavigation.background\":\"#d0d0d0\",\"editorMarkerNavigationError.background\":\"#f76e6e\",\"editorMarkerNavigationWarning.background\":\"#daaa01\",\"debugToolBar.background\":\"#f0f0f0\",\"extensionButton.prominentBackground\":\"#2aa298\",\"extensionButton.prominentForeground\":\"#f0f0f0\",\"statusBar.background\":\"#f0f0f0\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f0f0f0\",\"statusBar.debuggingForeground\":\"#403f53\",\"statusBar.foreground\":\"#403f53\",\"statusBar.noFolderBackground\":\"#f0f0f0\",\"statusBar.noFolderForeground\":\"#403f53\",\"peekView.border\":\"#d9d9d9\",\"peekViewEditor.background\":\"#f6f6f6\",\"peekViewEditorGutter.background\":\"#f6f6f6\",\"peekViewEditor.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.background\":\"#f0f0f0\",\"peekViewResult.fileForeground\":\"#403f53\",\"peekViewResult.lineForeground\":\"#403f53\",\"peekViewResult.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.selectionBackground\":\"#e0e7ea\",\"peekViewResult.selectionForeground\":\"#403f53\",\"peekViewTitle.background\":\"#f0f0f0\",\"peekViewTitleLabel.foreground\":\"#403f53\",\"peekViewTitleDescription.foreground\":\"#403f53\",\"terminal.foreground\":\"#403f53\"},\"fg\":\"#403f53\",\"bg\":\"#f6f7f9\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#556484\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#ae3c3afd\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#403f53\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#5f636f\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#3a688f\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"foreground\":\"#bb2060\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#5d6376\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#58656a\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#646464\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#286d70\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby\",\"scope\":[\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.module.ruby\",\"keyword.control.class.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Control Conditional\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"foreground\":\"#486e26\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#a64348\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#186e73\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#984e4d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#3e697c\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#555ea2\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#111111\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#7c5686\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Symbols\",\"scope\":[\"constant.language.symbol.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#954f5a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#403f53\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\",\"variable.other.property.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#76578b\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-7)\",\"terminalBackground\":\"var(--sl-color-gray-7)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-7)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#0000001a\",\"markBorderColor\":\"#00000055\"}}}],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false},\"session\":{\"driver\":\"fs-lite\",\"options\":{\"base\":\"C:\\\\Users\\\\Admin\\\\Desktop\\\\Project\\\\vue-docs\\\\node_modules\\\\.astro\\\\sessions\"}},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,25,26,46,47,57,58,68,69,79,80,90,91,101,102,112,113,123,124,134,135,145,146,156,157,167,168,178,179,189,190,200,201,211,212,222,223,233,234,244,245,255,256,266,267,277,278,287,288,298,299,321,322,332,333,343,344,354,355,365,366,376,377,387,388,398,399,409,410,420,421,431,432,442,443,453,454,464,465],"best-practices/accessibility",{id:11,data:13,body:22,filePath:23,digest:24,deferredRender:16},{title:14,description:15,editUrl:16,head:17,template:18,sidebar:19,pagefind:16,draft:20},"Accessibility","A guide to accessibility in Vue.js.",true,[],"doc",{hidden:20,attrs:21},false,{},"Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone — be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment. For example, adding subtitles to a video would help both your deaf and hard-of-hearing users and your users who are in a loud environment and can't hear their phone. Similarly, making sure your text isn't too low contrast will help both your low-vision users and your users who are trying to use their phone in bright sunlight.\r\n\r\nReady to start but aren’t sure where?\r\n\r\nCheckout the [Planning and managing web accessibility guide](https://www.w3.org/WAI/planning-and-managing/) provided by [World Wide Web Consortium (W3C)](https://www.w3.org/)\r\n\r\n## Skip link\r\n\r\nYou should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages.\r\n\r\nTypically this is done on the top of `App.vue` as it will be the first focusable element on all your pages:\r\n\r\n```vue-html\r\n<span ref=\"backToTop\" tabindex=\"-1\" />\r\n<ul class=\"skip-links\">\r\n  <li>\r\n    <a href=\"#main\" ref=\"skipLink\" class=\"skip-link\">Skip to main content</a>\r\n  </li>\r\n</ul>\r\n```\r\n\r\nTo hide the link unless it is focused, you can add the following style:\r\n\r\n```css\r\n.skip-links {\r\n  list-style: none;\r\n}\r\n.skip-link {\r\n  white-space: nowrap;\r\n  margin: 1em auto;\r\n  top: 0;\r\n  position: fixed;\r\n  left: 50%;\r\n  margin-left: -72px;\r\n  opacity: 0;\r\n}\r\n.skip-link:focus {\r\n  opacity: 1;\r\n  background-color: white;\r\n  padding: 0.5em;\r\n  border: 1px solid black;\r\n}\r\n```\r\n\r\nOnce a user changes route, bring focus back to the very beginning of the page, right before the skip link. This can be achieved by calling focus on the `backToTop` template ref (assuming usage of `vue-router`):\r\n\r\n<div class=\"options-api\">\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  watch: {\r\n    $route() {\r\n      this.$refs.backToTop.focus();\r\n    },\r\n  },\r\n};\r\n</script>\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref, watch } from \"vue\";\r\nimport { useRoute } from \"vue-router\";\r\n\r\nconst route = useRoute();\r\nconst backToTop = ref();\r\n\r\nwatch(\r\n  () => route.path,\r\n  () => {\r\n    backToTop.value.focus();\r\n  }\r\n);\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\n[Read documentation on skip link to main content](https://www.w3.org/WAI/WCAG21/Techniques/general/G1.html)\r\n\r\n## Content Structure\r\n\r\nOne of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application.\r\n\r\n### Headings\r\n\r\nUsers can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:\r\n\r\n- Nest headings in their ranking order: `<h1>` - `<h6>`\r\n- Don’t skip headings within a section\r\n- Use actual heading tags instead of styling text to give the visual appearance of headings\r\n\r\n[Read more about headings](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-descriptive.html)\r\n\r\n```vue-html\r\n<main role=\"main\" aria-labelledby=\"main-title\">\r\n  <h1 id=\"main-title\">Main title</h1>\r\n  <section aria-labelledby=\"section-title-1\">\r\n    <h2 id=\"section-title-1\"> Section Title </h2>\r\n    <h3>Section Subtitle</h3>\r\n    <!-- Content -->\r\n  </section>\r\n  <section aria-labelledby=\"section-title-2\">\r\n    <h2 id=\"section-title-2\"> Section Title </h2>\r\n    <h3>Section Subtitle</h3>\r\n    <!-- Content -->\r\n    <h3>Section Subtitle</h3>\r\n    <!-- Content -->\r\n  </section>\r\n</main>\r\n```\r\n\r\n### Landmarks\r\n\r\n[Landmarks](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/landmark_role) provide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can use [ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles) to help you achieve this.\r\n\r\n| HTML    | ARIA Role            | Landmark Purpose                                                                                                 |\r\n| ------- | -------------------- | ---------------------------------------------------------------------------------------------------------------- |\r\n| header  | role=\"banner\"        | Prime heading: title of the page                                                                                 |\r\n| nav     | role=\"navigation\"    | Collection of links suitable for use when navigating the document or related documents                           |\r\n| main    | role=\"main\"          | The main or central content of the document.                                                                     |\r\n| footer  | role=\"contentinfo\"   | Information about the parent document: footnotes/copyrights/links to privacy statement                           |\r\n| aside   | role=\"complementary\" | Supports the main content, yet is separated and meaningful on its own content                                    |\r\n| search  | role=\"search\"        | This section contains the search functionality for the application                                               |\r\n| form    | role=\"form\"          | Collection of form-associated elements                                                                           |\r\n| section | role=\"region\"        | Content that is relevant and that users will likely want to navigate to. Label must be provided for this element |\r\n\r\n[Read more about landmarks](https://www.w3.org/TR/wai-aria-1.2/#landmark_roles)\r\n\r\n## Semantic Forms\r\n\r\nWhen creating a form, you can use the following elements: `<form>`, `<label>`, `<input>`, `<textarea>`, and `<button>`\r\n\r\nLabels are typically placed on top or to the left of the form fields:\r\n\r\n```vue-html\r\n<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\r\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\r\n    <label :for=\"item.id\">{{ item.label }}: </label>\r\n    <input\r\n      :type=\"item.type\"\r\n      :id=\"item.id\"\r\n      :name=\"item.id\"\r\n      v-model=\"item.value\"\r\n    />\r\n  </div>\r\n  <button type=\"submit\">Submit</button>\r\n</form>\r\n```\r\n\r\nNotice how you can include `autocomplete='on'` on the form element and it will apply to all inputs in your form. You can also set different [values for autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for each input.\r\n\r\n### Labels\r\n\r\nProvide labels to describe the purpose of all form control; linking `for` and `id`:\r\n\r\n```vue-html\r\n<label for=\"name\">Name: </label>\r\n<input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\" />\r\n```\r\n\r\nIf you inspect this element in your Chrome DevTools and open the Accessibility tab inside the Elements tab, you will see how the input gets its name from the label:\r\n\r\n![Chrome Developer Tools showing input accessible name from label](./images/AccessibleLabelChromeDevTools.png)\r\n\r\n:::warning Warning:\r\nThough you might have seen labels wrapping the input fields like this:\r\n\r\n```vue-html\r\n<label>\r\n  Name:\r\n  <input type=\"text\" name=\"name\" id=\"name\" v-model=\"name\" />\r\n</label>\r\n```\r\n\r\nExplicitly setting the labels with a matching id is better supported by assistive technology.\r\n:::\r\n\r\n#### `aria-label`\r\n\r\nYou can also give the input an accessible name with [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label).\r\n\r\n```vue-html\r\n<label for=\"name\">Name: </label>\r\n<input\r\n  type=\"text\"\r\n  name=\"name\"\r\n  id=\"name\"\r\n  v-model=\"name\"\r\n  :aria-label=\"nameLabel\"\r\n/>\r\n```\r\n\r\nFeel free to inspect this element in Chrome DevTools to see how the accessible name has changed:\r\n\r\n![Chrome Developer Tools showing input accessible name from aria-label](./images/AccessibleARIAlabelDevTools.png)\r\n\r\n#### `aria-labelledby`\r\n\r\nUsing [`aria-labelledby`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby) is similar to `aria-label` except it is used if the label text is visible on screen. It is paired to other elements by their `id` and you can link multiple `id`s:\r\n\r\n```vue-html\r\n<form\r\n  class=\"demo\"\r\n  action=\"/dataCollectionLocation\"\r\n  method=\"post\"\r\n  autocomplete=\"on\"\r\n>\r\n  <h1 id=\"billing\">Billing</h1>\r\n  <div class=\"form-item\">\r\n    <label for=\"name\">Name: </label>\r\n    <input\r\n      type=\"text\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      v-model=\"name\"\r\n      aria-labelledby=\"billing name\"\r\n    />\r\n  </div>\r\n  <button type=\"submit\">Submit</button>\r\n</form>\r\n```\r\n\r\n![Chrome Developer Tools showing input accessible name from aria-labelledby](./images/AccessibleARIAlabelledbyDevTools.png)\r\n\r\n#### `aria-describedby`\r\n\r\n[aria-describedby](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby) is used the same way as `aria-labelledby` except provides a description with additional information that the user might need. This can be used to describe the criteria for any input:\r\n\r\n```vue-html\r\n<form\r\n  class=\"demo\"\r\n  action=\"/dataCollectionLocation\"\r\n  method=\"post\"\r\n  autocomplete=\"on\"\r\n>\r\n  <h1 id=\"billing\">Billing</h1>\r\n  <div class=\"form-item\">\r\n    <label for=\"name\">Full Name: </label>\r\n    <input\r\n      type=\"text\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      v-model=\"name\"\r\n      aria-labelledby=\"billing name\"\r\n      aria-describedby=\"nameDescription\"\r\n    />\r\n    <p id=\"nameDescription\">Please provide first and last name.</p>\r\n  </div>\r\n  <button type=\"submit\">Submit</button>\r\n</form>\r\n```\r\n\r\nYou can see the description by inspecting Chrome DevTools:\r\n\r\n![Chrome Developer Tools showing input accessible name from aria-labelledby and description with aria-describedby](./images/AccessibleARIAdescribedby.png)\r\n\r\n### Placeholders\r\n\r\nAvoid using placeholders as they can confuse many users.\r\n\r\nOne of the issues with placeholders is that they don't meet the [color contrast criteria](https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html) by default; fixing the color contrast makes the placeholder look like pre-populated data in the input fields. Looking at the following example, you can see that the Last Name placeholder which meets the color contrast criteria looks like pre-populated data:\r\n\r\n![Accessible placeholder](./images/AccessiblePlaceholder.png)\r\n\r\n```vue-html\r\n<form\r\n  class=\"demo\"\r\n  action=\"/dataCollectionLocation\"\r\n  method=\"post\"\r\n  autocomplete=\"on\"\r\n>\r\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\r\n    <label :for=\"item.id\">{{ item.label }}: </label>\r\n    <input\r\n      type=\"text\"\r\n      :id=\"item.id\"\r\n      :name=\"item.id\"\r\n      v-model=\"item.value\"\r\n      :placeholder=\"item.placeholder\"\r\n    />\r\n  </div>\r\n  <button type=\"submit\">Submit</button>\r\n</form>\r\n```\r\n\r\n```css\r\n/* https://www.w3schools.com/howto/howto_css_placeholder.asp */\r\n\r\n#lastName::placeholder {\r\n  /* Chrome, Firefox, Opera, Safari 10.1+ */\r\n  color: black;\r\n  opacity: 1; /* Firefox */\r\n}\r\n\r\n#lastName:-ms-input-placeholder {\r\n  /* Internet Explorer 10-11 */\r\n  color: black;\r\n}\r\n\r\n#lastName::-ms-input-placeholder {\r\n  /* Microsoft Edge */\r\n  color: black;\r\n}\r\n```\r\n\r\nIt is best to provide all the information the user needs to fill out forms outside any inputs.\r\n\r\n### Instructions\r\n\r\nWhen adding instructions for your input fields, make sure to link it correctly to the input.\r\nYou can provide additional instructions and bind multiple ids inside an [`aria-labelledby`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby). This allows for more flexible design.\r\n\r\n```vue-html\r\n<fieldset>\r\n  <legend>Using aria-labelledby</legend>\r\n  <label id=\"date-label\" for=\"date\">Current Date: </label>\r\n  <input\r\n    type=\"date\"\r\n    name=\"date\"\r\n    id=\"date\"\r\n    aria-labelledby=\"date-label date-instructions\"\r\n  />\r\n  <p id=\"date-instructions\">MM/DD/YYYY</p>\r\n</fieldset>\r\n```\r\n\r\nAlternatively, you can attach the instructions to the input with [`aria-describedby`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\r\n\r\n```vue-html\r\n<fieldset>\r\n  <legend>Using aria-describedby</legend>\r\n  <label id=\"dob\" for=\"dob\">Date of Birth: </label>\r\n  <input type=\"date\" name=\"dob\" id=\"dob\" aria-describedby=\"dob-instructions\" />\r\n  <p id=\"dob-instructions\">MM/DD/YYYY</p>\r\n</fieldset>\r\n```\r\n\r\n### Hiding Content\r\n\r\nUsually it is not recommended to visually hide labels, even if the input has an accessible name. However, if the functionality of the input can be understood with surrounding content, then we can hide the visual label.\r\n\r\nLet's look at this search field:\r\n\r\n```vue-html\r\n<form role=\"search\">\r\n  <label for=\"search\" class=\"hidden-visually\">Search: </label>\r\n  <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\r\n  <button type=\"submit\">Search</button>\r\n</form>\r\n```\r\n\r\nWe can do this because the search button will help visual users identify the purpose of the input field.\r\n\r\nWe can use CSS to visually hide elements but keep them available for assistive technology:\r\n\r\n```css\r\n.hidden-visually {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: 1px;\r\n  width: 1px;\r\n  clip: rect(0 0 0 0);\r\n  clip-path: inset(100%);\r\n}\r\n```\r\n\r\n#### `aria-hidden=\"true\"`\r\n\r\nAdding `aria-hidden=\"true\"` will hide the element from assistive technology but leave it visually available for other users. Do not use it on focusable elements, purely on decorative, duplicated or offscreen content.\r\n\r\n```vue-html\r\n<p>This is not hidden from screen readers.</p>\r\n<p aria-hidden=\"true\">This is hidden from screen readers.</p>\r\n```\r\n\r\n### Buttons\r\n\r\nWhen using buttons inside a form, you must set the type to prevent submitting the form.\r\nYou can also use an input to create buttons:\r\n\r\n```vue-html\r\n<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\r\n  <!-- Buttons -->\r\n  <button type=\"button\">Cancel</button>\r\n  <button type=\"submit\">Submit</button>\r\n\r\n  <!-- Input buttons -->\r\n  <input type=\"button\" value=\"Cancel\" />\r\n  <input type=\"submit\" value=\"Submit\" />\r\n</form>\r\n```\r\n\r\n### Functional Images\r\n\r\nYou can use this technique to create functional images.\r\n\r\n- Input fields\r\n\r\n  - These images will act as a submit type button on forms\r\n\r\n  ```vue-html\r\n  <form role=\"search\">\r\n    <label for=\"search\" class=\"hidden-visually\">Search: </label>\r\n    <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\r\n    <input\r\n      type=\"image\"\r\n      class=\"btnImg\"\r\n      src=\"https://img.icons8.com/search\"\r\n      alt=\"Search\"\r\n    />\r\n  </form>\r\n  ```\r\n\r\n- Icons\r\n\r\n```vue-html\r\n<form role=\"search\">\r\n  <label for=\"searchIcon\" class=\"hidden-visually\">Search: </label>\r\n  <input type=\"text\" name=\"searchIcon\" id=\"searchIcon\" v-model=\"searchIcon\" />\r\n  <button type=\"submit\">\r\n    <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\r\n    <span class=\"hidden-visually\">Search</span>\r\n  </button>\r\n</form>\r\n```\r\n\r\n## Standards\r\n\r\nThe World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) develops web accessibility standards for the different components:\r\n\r\n- [User Agent Accessibility Guidelines (UAAG)](https://www.w3.org/WAI/standards-guidelines/uaag/)\r\n  - web browsers and media players, including some aspects of assistive technologies\r\n- [Authoring Tool Accessibility Guidelines (ATAG)](https://www.w3.org/WAI/standards-guidelines/atag/)\r\n  - authoring tools\r\n- [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/WAI/standards-guidelines/wcag/)\r\n  - web content - used by developers, authoring tools, and accessibility evaluation tools\r\n\r\n### Web Content Accessibility Guidelines (WCAG)\r\n\r\n[WCAG 2.1](https://www.w3.org/TR/WCAG21/) extends on [WCAG 2.0](https://www.w3.org/TR/WCAG20/) and allows implementation of new technologies by addressing changes to the web. The W3C encourages use of the most current version of WCAG when developing or updating Web accessibility policies.\r\n\r\n#### WCAG 2.1 Four Main Guiding Principles (abbreviated as POUR):\r\n\r\n- [Perceivable](https://www.w3.org/TR/WCAG21/#perceivable)\r\n  - Users must be able to perceive the information being presented\r\n- [Operable](https://www.w3.org/TR/WCAG21/#operable)\r\n  - Interface forms, controls, and navigation are operable\r\n- [Understandable](https://www.w3.org/TR/WCAG21/#understandable)\r\n  - Information and the operation of user interface must be understandable to all users\r\n- [Robust](https://www.w3.org/TR/WCAG21/#robust)\r\n  - Users must be able to access the content as technologies advance\r\n\r\n#### Web Accessibility Initiative – Accessible Rich Internet Applications (WAI-ARIA)\r\n\r\nW3C's WAI-ARIA provides guidance on how to build dynamic content and advanced user interface controls.\r\n\r\n- [Accessible Rich Internet Applications (WAI-ARIA) 1.2](https://www.w3.org/TR/wai-aria-1.2/)\r\n- [WAI-ARIA Authoring Practices 1.2](https://www.w3.org/TR/wai-aria-practices-1.2/)\r\n\r\n## Resources\r\n\r\n### Documentation\r\n\r\n- [WCAG 2.0](https://www.w3.org/TR/WCAG20/)\r\n- [WCAG 2.1](https://www.w3.org/TR/WCAG21/)\r\n- [Accessible Rich Internet Applications (WAI-ARIA) 1.2](https://www.w3.org/TR/wai-aria-1.2/)\r\n- [WAI-ARIA Authoring Practices 1.2](https://www.w3.org/TR/wai-aria-practices-1.2/)\r\n\r\n### Assistive Technologies\r\n\r\n- Screen Readers\r\n  - [NVDA](https://www.nvaccess.org/download/)\r\n  - [VoiceOver](https://www.apple.com/accessibility/mac/vision/)\r\n  - [JAWS](https://www.freedomscientific.com/products/software/jaws/?utm_term=jaws%20screen%20reader&utm_source=adwords&utm_campaign=All+Products&utm_medium=ppc&hsa_tgt=kwd-394361346638&hsa_cam=200218713&hsa_ad=296201131673&hsa_kw=jaws%20screen%20reader&hsa_grp=52663682111&hsa_net=adwords&hsa_mt=e&hsa_src=g&hsa_acc=1684996396&hsa_ver=3&gclid=Cj0KCQjwnv71BRCOARIsAIkxW9HXKQ6kKNQD0q8a_1TXSJXnIuUyb65KJeTWmtS6BH96-5he9dsNq6oaAh6UEALw_wcB)\r\n  - [ChromeVox](https://chrome.google.com/webstore/detail/chromevox-classic-extensi/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en)\r\n- Zooming Tools\r\n  - [MAGic](https://www.freedomscientific.com/products/software/magic/)\r\n  - [ZoomText](https://www.freedomscientific.com/products/software/zoomtext/)\r\n  - [Magnifier](https://support.microsoft.com/en-us/help/11542/windows-use-magnifier-to-make-things-easier-to-see)\r\n\r\n### Testing\r\n\r\n- Automated Tools\r\n  - [Lighthouse](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk)\r\n  - [WAVE](https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh)\r\n  - [ARC Toolkit](https://chrome.google.com/webstore/detail/arc-toolkit/chdkkkccnlfncngelccgbgfmjebmkmce?hl=en-US)\r\n- Color Tools\r\n  - [WebAim Color Contrast](https://webaim.org/resources/contrastchecker/)\r\n  - [WebAim Link Color Contrast](https://webaim.org/resources/linkcontrastchecker)\r\n- Other Helpful Tools\r\n  - [HeadingMap](https://chrome.google.com/webstore/detail/headingsmap/flbjommegcjonpdmenkdiocclhjacmbi?hl=en…)\r\n  - [Color Oracle](https://colororacle.org)\r\n  - [NerdeFocus](https://chrome.google.com/webstore/detail/nerdefocus/lpfiljldhgjecfepfljnbjnbjfhennpd?hl=en-US…)\r\n  - [Visual Aria](https://chrome.google.com/webstore/detail/visual-aria/lhbmajchkkmakajkjenkchhnhbadmhmk?hl=en-US)\r\n  - [Silktide Website Accessibility Simulator](https://chrome.google.com/webstore/detail/silktide-website-accessib/okcpiimdfkpkjcbihbmhppldhiebhhaf?hl=en-US)\r\n\r\n### Users\r\n\r\nThe World Health Organization estimates that 15% of the world's population has some form of disability, 2-4% of them severely so. That is an estimated 1 billion people worldwide; making people with disabilities the largest minority group in the world.\r\n\r\nThere are a huge range of disabilities, which can be divided roughly into four categories:\r\n\r\n- _[Visual](https://webaim.org/articles/visual/)_ - These users can benefit from the use of screen readers, screen magnification, controlling screen contrast, or braille display.\r\n- _[Auditory](https://webaim.org/articles/auditory/)_ - These users can benefit from captioning, transcripts or sign language video.\r\n- _[Motor](https://webaim.org/articles/motor/)_ - These users can benefit from a range of [assistive technologies for motor impairments](https://webaim.org/articles/motor/assistive): voice recognition software, eye tracking, single-switch access, head wand, sip and puff switch, oversized trackball mouse, adaptive keyboard or other assistive technologies.\r\n- _[Cognitive](https://webaim.org/articles/cognitive/)_ - These users can benefit from supplemental media, structural organization of content, clear and simple writing.\r\n\r\nCheck out the following links from WebAim to understand from users:\r\n\r\n- [Web Accessibility Perspectives: Explore the Impact and Benefits for Everyone](https://www.w3.org/WAI/perspective-videos/)\r\n- [Stories of Web Users](https://www.w3.org/WAI/people-use-web/user-stories/)","src/content/docs/best-practices/accessibility.mdx","616fcce2a94ea9ed","index",{id:25,data:27,body:43,filePath:44,digest:45,deferredRender:16},{title:28,description:29,editUrl:16,head:30,template:31,hero:32,sidebar:41,pagefind:16,draft:20},"Welcome to Starlight","Get started building your docs site with Starlight.",[],"splash",{actions:33},[34],{text:35,link:36,variant:37,icon:38},"Get Started","/getting-started/introduction/","primary",{type:39,name:40},"icon","right-arrow",{hidden:20,attrs:42},{},"import Home from \"/src/components/Home.tsx\";\n\n<Home />","src/content/docs/index.mdx","d1f7b3fc5d47991d","built-in-components/keep-alive",{id:46,data:48,body:54,filePath:55,digest:56,deferredRender:16},{title:49,description:50,editUrl:16,head:51,template:18,sidebar:52,pagefind:16,draft:20},"KeepAlive","A guide to using the KeepAlive component in Vue.js.",[],{hidden:20,attrs:53},{},"import SwitchComponent from \"./keep-alive-demos/SwitchComponent.jsx\";\r\n\r\n<SwitchComponent />\r\n\r\n# KeepAlive\r\n\r\n`<KeepAlive>` is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components.\r\n\r\n## Basic Usage\r\n\r\nIn the Component Basics chapter, we introduced the syntax for [Dynamic Components](/guide/essentials/component-basics#dynamic-components), using the `<component>` special element:\r\n\r\n```vue-html\r\n<component :is=\"activeComponent\" />\r\n```\r\n\r\nBy default, an active component instance will be unmounted when switching away from it. This will cause any changed state it holds to be lost. When this component is displayed again, a new instance will be created with only the initial state.\r\n\r\nIn the example below, we have two stateful components - A contains a counter, while B contains a message synced with an input via `v-model`. Try updating the state of one of them, switch away, and then switch back to it:\r\n\r\n<SwitchComponent />\r\n\r\nYou'll notice that when switched back, the previous changed state would have been reset.\r\n\r\nCreating fresh component instance on switch is normally useful behavior, but in this case, we'd really like the two component instances to be preserved even when they are inactive. To solve this problem, we can wrap our dynamic component with the `<KeepAlive>` built-in component:\r\n\r\n```vue-html\r\n<!-- Inactive components will be cached! -->\r\n<KeepAlive>\r\n  <component :is=\"activeComponent\" />\r\n</KeepAlive>\r\n```\r\n\r\nNow, the state will be persisted across component switches:\r\n\r\n<SwitchComponent useKeepAlive={true} />\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqtUsFOwzAM/RWrl4IGC+cqq2h3RFw495K12YhIk6hJi1DVf8dJSllBaAJxi+2XZz8/j0lhzHboeZIl1NadMA4sd73JKyVaozsHI9hnJqV+feJHmODY6RZS/JEuiL1uTTEXtiREnnINKFeAcgZUqtbKOqj7ruPKwe6s2VVguq4UJXEynAkDx1sjmeMYAdBGDFBLZu2uShre6ioJeaxIduAyp0KZ3oF7MxwRHWsEQmC4bXXDJWbmxpjLBiZ7DwptMUFyKCiJNP/BWUbO8gvnA+emkGKIgkKqRrRWfh+Z8MIWwpySpfbxn6wJKMGV4IuSs0UlN1HVJae7bxYvBuk+2IOIq7sLnph8P9u5DJv5VfpWWLaGqTzwZTCOM/M0IaMvBMihd04ruK+lqF/8Ajxms8EFbCiJxR8khsP6ncQosLWnWV6a/kUf2nqu75Fby04chA0iPftaYryhz6NBRLjdtajpHZTWPio=)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqtU8tugzAQ/JUVl7RKWveMXFTIseofcHHAiawasPxArRD/3rVNSEhbpVUrIWB3x7PM7jAkuVL3veNJmlBTaaFsVraiUZ22sO0alcNedw2s7kmIPHS1ABQLQDEBAMqWvwVQzffMSQuDz1aI6VreWpPCEBtsJppx4wE1s+zmNoIBNLdOt8cIjzut8XAKq3A0NAIY/QNveFEyi8DA8kZJZjlGALQWPVSSGfNYJjVvujIJeaxItuMyo6JVzoJ9VxwRmtUCIdDfNV3NJWam5j7HpPOY8BEYkwxySiLLP1AWkbK4oHzmXOVS9FFOSM3jhFR4WTNfRslcO54nSwJKcCD4RsnZmJJNFPXJEl8t88quOuc39fCrHalsGyWcnJL62apYNoq12UQ8DLEFjCMy+kKA7Jy1XQtPlRTVqx+Jx6zXOJI1JbH4jejg3T+KbswBzXnFlz9Tjes/V/3CjWEHDsL/OYNvdCE8Wu3kLUQEhy+ljh+brFFu)\r\n\r\n</div>\r\n\r\n:::tip\r\nWhen used in [in-DOM templates](/guide/essentials/component-basics#in-dom-template-parsing-caveats), it should be referenced as `<keep-alive>`.\r\n:::\r\n\r\n## Include / Exclude\r\n\r\nBy default, `<KeepAlive>` will cache any component instance inside. We can customize this behavior via the `include` and `exclude` props. Both props can be a comma-delimited string, a `RegExp`, or an array containing either types:\r\n\r\n```vue-html\r\n<!-- comma-delimited string -->\r\n<KeepAlive include=\"a,b\">\r\n  <component :is=\"view\" />\r\n</KeepAlive>\r\n\r\n<!-- regex (use `v-bind`) -->\r\n<KeepAlive :include=\"/a|b/\">\r\n  <component :is=\"view\" />\r\n</KeepAlive>\r\n\r\n<!-- Array (use `v-bind`) -->\r\n<KeepAlive :include=\"['a', 'b']\">\r\n  <component :is=\"view\" />\r\n</KeepAlive>\r\n```\r\n\r\nThe match is checked against the component's [`name`](/api/options-misc#name) option, so components that need to be conditionally cached by `KeepAlive` must explicitly declare a `name` option.\r\n\r\n:::tip\r\nSince version 3.2.34, a single-file component using `<script setup>` will automatically infer its `name` option based on the filename, removing the need to manually declare the name.\r\n:::\r\n\r\n## Max Cached Instances\r\n\r\nWe can limit the maximum number of component instances that can be cached via the `max` prop. When `max` is specified, `<KeepAlive>` behaves like an [LRU cache](<https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)>): if the number of cached instances is about to exceed the specified max count, the least recently accessed cached instance will be destroyed to make room for the new one.\r\n\r\n```vue-html\r\n<KeepAlive :max=\"10\">\r\n  <component :is=\"activeComponent\" />\r\n</KeepAlive>\r\n```\r\n\r\n## Lifecycle of Cached Instance\r\n\r\nWhen a component instance is removed from the DOM but is part of a component tree cached by `<KeepAlive>`, it goes into a **deactivated** state instead of being unmounted. When a component instance is inserted into the DOM as part of a cached tree, it is **activated**.\r\n\r\n<div class=\"composition-api\">\r\n\r\nA kept-alive component can register lifecycle hooks for these two states using [`onActivated()`](/api/composition-api-lifecycle#onactivated) and [`onDeactivated()`](/api/composition-api-lifecycle#ondeactivated):\r\n\r\n```vue\r\n<script setup>\r\nimport { onActivated, onDeactivated } from \"vue\";\r\n\r\nonActivated(() => {\r\n  // called on initial mount\r\n  // and every time it is re-inserted from the cache\r\n});\r\n\r\nonDeactivated(() => {\r\n  // called when removed from the DOM into the cache\r\n  // and also when unmounted\r\n});\r\n</script>\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\nA kept-alive component can register lifecycle hooks for these two states using [`activated`](/api/options-lifecycle#activated) and [`deactivated`](/api/options-lifecycle#deactivated) hooks:\r\n\r\n```js\r\nexport default {\r\n  activated() {\r\n    // called on initial mount\r\n    // and every time it is re-inserted from the cache\r\n  },\r\n  deactivated() {\r\n    // called when removed from the DOM into the cache\r\n    // and also when unmounted\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nNote that:\r\n\r\n- <span class=\"composition-api\">`onActivated`</span>\r\n  <span class=\"options-api\">`activated`</span> is also called on mount, and <span class=\"composition-api\">`onDeactivated`</span>\r\n\r\n<span class=\"options-api\">`deactivated`</span> on unmount.\r\n\r\n- Both hooks work for not only the root component cached by `<KeepAlive>`, but also the descendant components in the cached tree.\r\n\r\n---\r\n\r\n**Related**\r\n\r\n- [`<KeepAlive>` API reference](/api/built-in-components#keepalive)","src/content/docs/built-in-components/keep-alive.mdx","602f7472b3f944f1","built-in-components/suspense",{id:57,data:59,body:65,filePath:66,digest:67,deferredRender:16},{title:60,description:61,editUrl:16,head:62,template:18,sidebar:63,pagefind:16,draft:20},"Suspense","A guide to using the Suspense component in Vue.js.",[],{hidden:20,attrs:64},{},"## outline: deep\r\n\r\n# Suspense\r\n\r\n:::warning[Experimental Feature]\r\n`<Suspense>` is an experimental feature. It is not guaranteed to reach stable status and the API may change before it does.\r\n:::\r\n\r\n`<Suspense>` is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved.\r\n\r\n## Async Dependencies\r\n\r\nTo explain the problem `<Suspense>` is trying to solve and how it interacts with these async dependencies, let's imagine a component hierarchy like the following:\r\n\r\n```\r\n<Suspense>\r\n└─ <Dashboard>\r\n   ├─ <Profile>\r\n   │  └─ <FriendStatus> (component with async setup())\r\n   └─ <Content>\r\n      ├─ <ActivityFeed> (async component)\r\n      └─ <Stats> (async component)\r\n```\r\n\r\nIn the component tree there are multiple nested components whose rendering depends on some async resource to be resolved first. Without `<Suspense>`, each of them will need to handle its own loading / error and loaded states. In the worst case scenario, we may see three loading spinners on the page, with content displayed at different times.\r\n\r\nThe `<Suspense>` component gives us the ability to display top-level loading / error states while we wait on these nested async dependencies to be resolved.\r\n\r\nThere are two types of async dependencies that `<Suspense>` can wait on:\r\n\r\n1. Components with an async `setup()` hook. This includes components using `<script setup>` with top-level `await` expressions.\r\n\r\n2. [Async Components](/guide/components/async).\r\n\r\n### `async setup()`\r\n\r\nA Composition API component's `setup()` hook can be async:\r\n\r\n```js\r\nexport default {\r\n  async setup() {\r\n    const res = await fetch(...)\r\n    const posts = await res.json()\r\n    return {\r\n      posts\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf using `<script setup>`, the presence of top-level `await` expressions automatically makes the component an async dependency:\r\n\r\n```vue\r\n<script setup>\r\nconst res = await fetch(...)\r\nconst posts = await res.json()\r\n</script>\r\n\r\n<template>\r\n  {{ posts }}\r\n</template>\r\n```\r\n\r\n### Async Components\r\n\r\nAsync components are **\"suspensible\"** by default. This means that if it has a `<Suspense>` in the parent chain, it will be treated as an async dependency of that `<Suspense>`. In this case, the loading state will be controlled by the `<Suspense>`, and the component's own loading, error, delay and timeout options will be ignored.\r\n\r\nThe async component can opt-out of `Suspense` control and let the component always control its own loading state by specifying `suspensible: false` in its options.\r\n\r\n## Loading State\r\n\r\nThe `<Suspense>` component has two slots: `#default` and `#fallback`. Both slots only allow for **one** immediate child node. The node in the default slot is shown if possible. If not, the node in the fallback slot will be shown instead.\r\n\r\n```vue-html\r\n<Suspense>\r\n  <!-- component with nested async dependencies -->\r\n  <Dashboard />\r\n\r\n  <!-- loading state via #fallback slot -->\r\n  <template #fallback>\r\n    Loading...\r\n  </template>\r\n</Suspense>\r\n```\r\n\r\nOn initial render, `<Suspense>` will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter a **pending** state. During the pending state, the fallback content will be displayed. When all encountered async dependencies have been resolved, `<Suspense>` enters a **resolved** state and the resolved default slot content is displayed.\r\n\r\nIf no async dependencies were encountered during the initial render, `<Suspense>` will directly go into a resolved state.\r\n\r\nOnce in a resolved state, `<Suspense>` will only revert to a pending state if the root node of the `#default` slot is replaced. New async dependencies nested deeper in the tree will **not** cause the `<Suspense>` to revert to a pending state.\r\n\r\nWhen a revert happens, fallback content will not be immediately displayed. Instead, `<Suspense>` will display the previous `#default` content while waiting for the new content and its async dependencies to be resolved. This behavior can be configured with the `timeout` prop: `<Suspense>` will switch to fallback content if it takes longer than `timeout` to render the new default content. A `timeout` value of `0` will cause the fallback content to be displayed immediately when default content is replaced.\r\n\r\n## Events\r\n\r\nThe `<Suspense>` component emits 3 events: `pending`, `resolve` and `fallback`. The `pending` event occurs when entering a pending state. The `resolve` event is emitted when new content has finished resolving in the `default` slot. The `fallback` event is fired when the contents of the `fallback` slot are shown.\r\n\r\nThe events could be used, for example, to show a loading indicator in front of the old DOM while new components are loading.\r\n\r\n## Error Handling\r\n\r\n`<Suspense>` currently does not provide error handling via the component itself - however, you can use the [`errorCaptured`](/api/options-lifecycle#errorcaptured) option or the [`onErrorCaptured()`](/api/composition-api-lifecycle#onerrorcaptured) hook to capture and handle async errors in the parent component of `<Suspense>`.\r\n\r\n## Combining with Other Components\r\n\r\nIt is common to want to use `<Suspense>` in combination with the [`<Transition>`](./transition) and [`<KeepAlive>`](./keep-alive) components. The nesting order of these components is important to get them all working correctly.\r\n\r\nIn addition, these components are often used in conjunction with the `<RouterView>` component from [Vue Router](https://router.vuejs.org/).\r\n\r\nThe following example shows how to nest these components so that they all behave as expected. For simpler combinations you can remove the components that you don't need:\r\n\r\n```vue-html\r\n<RouterView v-slot=\"{ Component }\">\r\n  <template v-if=\"Component\">\r\n    <Transition mode=\"out-in\">\r\n      <KeepAlive>\r\n        <Suspense>\r\n          <!-- main content -->\r\n          <component :is=\"Component\"></component>\r\n\r\n          <!-- loading state -->\r\n          <template #fallback>\r\n            Loading...\r\n          </template>\r\n        </Suspense>\r\n      </KeepAlive>\r\n    </Transition>\r\n  </template>\r\n</RouterView>\r\n```\r\n\r\nVue Router has built-in support for [lazily loading components](https://router.vuejs.org/guide/advanced/lazy-loading.html) using dynamic imports. These are distinct from async components and currently they will not trigger `<Suspense>`. However, they can still have async components as descendants and those can trigger `<Suspense>` in the usual way.\r\n\r\n## Nested Suspense\r\n\r\n- Only supported in 3.3+\r\n\r\nWhen we have multiple async components (common for nested or layout-based routes) like this:\r\n\r\n```vue-html\r\n<Suspense>\r\n  <component :is=\"DynamicAsyncOuter\">\r\n    <component :is=\"DynamicAsyncInner\" />\r\n  </component>\r\n</Suspense>\r\n```\r\n\r\n`<Suspense>` creates a boundary that will resolve all the async components down the tree, as expected. However, when we change `DynamicAsyncOuter`, `<Suspense>` awaits it correctly, but when we change `DynamicAsyncInner`, the nested `DynamicAsyncInner` renders an empty node until it has been resolved (instead of the previous one or fallback slot).\r\n\r\nIn order to solve that, we could have a nested suspense to handle the patch for the nested component, like:\r\n\r\n```vue-html\r\n<Suspense>\r\n  <component :is=\"DynamicAsyncOuter\">\r\n    <Suspense suspensible> <!-- this -->\r\n      <component :is=\"DynamicAsyncInner\" />\r\n    </Suspense>\r\n  </component>\r\n</Suspense>\r\n```\r\n\r\nIf you don't set the `suspensible` prop, the inner `<Suspense>` will be treated like a sync component by the parent `<Suspense>`. That means that it has its own fallback slot and if both `Dynamic` components change at the same time, there might be empty nodes and multiple patching cycles while the child `<Suspense>` is loading its own dependency tree, which might not be desirable. When it's set, all the async dependency handling is given to the parent `<Suspense>` (including the events emitted) and the inner `<Suspense>` serves solely as another boundary for the dependency resolution and patching.\r\n\r\n---\r\n\r\n**Related**\r\n\r\n- [`<Suspense>` API reference](/api/built-in-components#suspense)","src/content/docs/built-in-components/suspense.mdx","b93d21bb94b4e774","built-in-components/teleport",{id:68,data:70,body:76,filePath:77,digest:78,deferredRender:16},{title:71,description:72,editUrl:16,head:73,template:18,sidebar:74,pagefind:16,draft:20},"Teleport","A guide to using the Teleport component.",[],{hidden:20,attrs:75},{},"import { useState } from \"react\";\r\nimport ModalDemo from \"./teleport-demos/ModalDemo.jsx\";\r\n\r\n# Teleport\r\n\r\nThe `Teleport` component is used to move elements to a different location in the DOM.\r\n\r\n## Basic Usage\r\n\r\nHere's a simple example of using Teleport to render a modal:\r\n\r\n```js\r\nimport { useState } from \"react\";\r\nimport Teleport from \"./components/Teleport\";\r\n\r\nfunction ModalDemo() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setIsOpen(true)}>Open Modal</button>\r\n\r\n      <Teleport to=\"body\">\r\n        {isOpen && (\r\n          <div className=\"modal-demo\">\r\n            <p style={{ marginBottom: \"20px\" }}>Hello from the modal!</p>\r\n            <button onClick={() => setIsOpen(false)}>Close</button>\r\n          </div>\r\n        )}\r\n      </Teleport>\r\n\r\n      <style jsx>{`\r\n        .modal-demo {\r\n          position: fixed;\r\n          z-index: 999;\r\n          top: 20%;\r\n          left: 50%;\r\n          width: 300px;\r\n          margin-left: -150px;\r\n          background-color: var(--vt-c-bg);\r\n          padding: 30px;\r\n          border-radius: 8px;\r\n          box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## Live Demo\r\n\r\n<div className=\"demo\">\r\n  <ModalDemo />\r\n</div>\r\n\r\n## Why Use Teleport?\r\n\r\nTeleport is useful when you need to:\r\n\r\n1. Render content outside the normal DOM hierarchy\r\n2. Create modals, tooltips, or popovers that need to break out of container elements\r\n3. Handle z-index stacking context issues\r\n4. Avoid CSS inheritance problems\r\n\r\n## Multiple Teleports\r\n\r\nYou can use multiple teleports to the same target:\r\n\r\n```js\r\n<div>\r\n  <Teleport to=\"body\">\r\n    <div>First Teleport</div>\r\n  </Teleport>\r\n  <Teleport to=\"body\">\r\n    <div>Second Teleport</div>\r\n  </Teleport>\r\n</div>\r\n```\r\n\r\n## Best Practices\r\n\r\n1. Always clean up teleported content when components unmount\r\n2. Consider accessibility when using teleports\r\n3. Use teleports for modals, tooltips, and other overlay content\r\n4. Remember that teleports don't affect the React component tree","src/content/docs/built-in-components/teleport.mdx","ce692e3b71fcffc9","best-practices/product-deployment",{id:79,data:81,body:87,filePath:88,digest:89,deferredRender:16},{title:82,description:83,editUrl:16,head:84,template:18,sidebar:85,pagefind:16,draft:20},"Product Deployment","A guide to product deployment in Vue.js.",[],{hidden:20,attrs:86},{},"## Development vs. Production\r\n\r\nDuring development, Vue provides a number of features to improve the development experience:\r\n\r\n- Warning for common errors and pitfalls\r\n- Props / events validation\r\n- [Reactivity debugging hooks](/guide/extras/reactivity-in-depth#reactivity-debugging)\r\n- Devtools integration\r\n\r\nHowever, these features become useless in production. Some of the warning checks can also incur a small amount of performance overhead. When deploying to production, we should drop all the unused, development-only code branches for smaller payload size and better performance.\r\n\r\n## Without Build Tools\r\n\r\nIf you are using Vue without a build tool by loading it from a CDN or self-hosted script, make sure to use the production build (dist files that end in `.prod.js`) when deploying to production. Production builds are pre-minified with all development-only code branches removed.\r\n\r\n- If using global build (accessing via the `Vue` global): use `vue.global.prod.js`.\r\n- If using ESM build (accessing via native ESM imports): use `vue.esm-browser.prod.js`.\r\n\r\nConsult the [dist file guide](https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use) for more details.\r\n\r\n## With Build Tools\r\n\r\nProjects scaffolded via `create-vue` (based on Vite) or Vue CLI (based on webpack) are pre-configured for production builds.\r\n\r\nIf using a custom setup, make sure that:\r\n\r\n1. `vue` resolves to `vue.runtime.esm-bundler.js`.\r\n2. The [compile time feature flags](/api/compile-time-flags) are properly configured.\r\n3. <code>process.env.NODE_ENV</code> is replaced with `\"production\"` during build.\r\n\r\nAdditional references:\r\n\r\n- [Vite production build guide](https://vitejs.dev/guide/build.html)\r\n- [Vite deployment guide](https://vitejs.dev/guide/static-deploy.html)\r\n- [Vue CLI deployment guide](https://cli.vuejs.org/guide/deployment.html)\r\n\r\n## Tracking Runtime Errors\r\n\r\nThe [app-level error handler](/api/application#app-config-errorhandler) can be used to report errors to tracking services:\r\n\r\n```js\r\nimport { createApp } from 'vue'\r\n\r\nconst app = createApp(...)\r\n\r\napp.config.errorHandler = (err, instance, info) => {\r\n  // report error to tracking services\r\n}\r\n```\r\n\r\nServices such as [Sentry](https://docs.sentry.io/platforms/javascript/guides/vue/) and [Bugsnag](https://docs.bugsnag.com/platforms/javascript/vue/) also provide official integrations for Vue.","src/content/docs/best-practices/product-deployment.mdx","b2d9d9f9d17aff35","best-practices/security",{id:90,data:92,body:98,filePath:99,digest:100,deferredRender:16},{title:93,description:94,editUrl:16,head:95,template:18,sidebar:96,pagefind:16,draft:20},"Security","A guide to security in Vue.js.",[],{hidden:20,attrs:97},{},"## Reporting Vulnerabilities\r\n\r\nWhen a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please email [security@vuejs.org](mailto:security@vuejs.org).\r\n\r\nWhile the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible.\r\n\r\n## Rule No.1: Never Use Non-trusted Templates\r\n\r\nThe most fundamental security rule when using Vue is **never use non-trusted content as your component template**. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:\r\n\r\n```js\r\nVue.createApp({\r\n  template: `<div>` + userProvidedString + `</div>`, // NEVER DO THIS\r\n}).mount(\"#app\");\r\n```\r\n\r\nVue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you.\r\n\r\n## What Vue Does to Protect You\r\n\r\n### HTML content\r\n\r\nWhether using templates or render functions, content is automatically escaped. That means in this template:\r\n\r\n```vue-html\r\n<h1>{{ userProvidedString }}</h1>\r\n```\r\n\r\nif `userProvidedString` contained:\r\n\r\n```js\r\n'<script>alert(\"hi\")</script>';\r\n```\r\n\r\nthen it would be escaped to the following HTML:\r\n\r\n```vue-html\r\n&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;\r\n```\r\n\r\nthus preventing the script injection. This escaping is done using native browser APIs, like `textContent`, so a vulnerability can only exist if the browser itself is vulnerable.\r\n\r\n### Attribute bindings\r\n\r\nSimilarly, dynamic attribute bindings are also automatically escaped. That means in this template:\r\n\r\n```vue-html\r\n<h1 :title=\"userProvidedString\">\r\n  hello\r\n</h1>\r\n```\r\n\r\nif `userProvidedString` contained:\r\n\r\n```js\r\n'\" onclick=\"alert(\\'hi\\')';\r\n```\r\n\r\nthen it would be escaped to the following HTML:\r\n\r\n```vue-html\r\n&quot; onclick=&quot;alert('hi')\r\n```\r\n\r\nthus preventing the close of the `title` attribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, like `setAttribute`, so a vulnerability can only exist if the browser itself is vulnerable.\r\n\r\n## Potential Dangers\r\n\r\nIn any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though.\r\n\r\nFor example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables.\r\n\r\n### HTML Injection\r\n\r\nAs you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However, **in cases where you know the HTML is safe**, you can explicitly render HTML content:\r\n\r\n- Using a template:\r\n\r\n  ```vue-html\r\n  <div v-html=\"userProvidedHtml\"></div>\r\n  ```\r\n\r\n- Using a render function:\r\n\r\n  ```js\r\n  h(\"div\", {\r\n    innerHTML: this.userProvidedHtml,\r\n  });\r\n  ```\r\n\r\n- Using a render function with JSX:\r\n\r\n  ```jsx\r\n  <div innerHTML={this.userProvidedHtml}></div>\r\n  ```\r\n\r\n:::warning\r\nUser-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers.\r\n:::\r\n\r\n### URL Injection\r\n\r\nIn a URL like this:\r\n\r\n```vue-html\r\n<a :href=\"userProvidedUrl\">\r\n  click me\r\n</a>\r\n```\r\n\r\nThere's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution using `javascript:`. There are libraries such as [sanitize-url](https://www.npmjs.com/package/@braintree/sanitize-url) to help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue. **User-provided URLs should always be sanitized by your backend before even being saved to a database.** Then the problem is avoided for _every_ client connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations.\r\n\r\n### Style Injection\r\n\r\nLooking at this example:\r\n\r\n```vue-html\r\n<a\r\n  :href=\"sanitizedUrl\"\r\n  :style=\"userProvidedStyles\"\r\n>\r\n  click me\r\n</a>\r\n```\r\n\r\nLet's assume that `sanitizedUrl` has been sanitized, so that it's definitely a real URL and not JavaScript. With the `userProvidedStyles`, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then if `https://user-controlled-website.com/` is built to resemble the login page of your application, they might have just captured a user's real login information.\r\n\r\nYou may be able to imagine how allowing user-provided content for a `<style>` element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:\r\n\r\n```vue-html\r\n<style>{{ userProvidedStyles }}</style>\r\n```\r\n\r\nTo keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using its [object syntax](/guide/essentials/class-and-style#binding-to-objects-1) and only allowing users to provide values for specific properties it's safe for them to control, like this:\r\n\r\n```vue-html\r\n<a\r\n  :href=\"sanitizedUrl\"\r\n  :style=\"{\r\n    color: userProvidedColor,\r\n    background: userProvidedBackground\r\n  }\"\r\n>\r\n  click me\r\n</a>\r\n```\r\n\r\n### JavaScript Injection\r\n\r\nWe strongly discourage ever rendering a `<script>` element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime.\r\n\r\nEvery HTML element has attributes with values accepting strings of JavaScript, such as `onclick`, `onfocus`, and `onmouseenter`. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided.\r\n\r\n:::warning\r\nUser-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it.\r\n:::\r\n\r\nSometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:\r\n\r\n1. The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.\r\n\r\n2. The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as \\#1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is to **never mount Vue on nodes that may contain server-rendered and user-provided content**.\r\n\r\n## Best Practices\r\n\r\nThe general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework.\r\n\r\nBeyond the recommendations made above for [Potential Dangers](#potential-dangers), we also recommend familiarizing yourself with these resources:\r\n\r\n- [HTML5 Security Cheat Sheet](https://html5sec.org/)\r\n- [OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\r\n\r\nThen use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM.\r\n\r\n## Backend Coordination\r\n\r\nHTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions.\r\n\r\n## Server-Side Rendering (SSR)\r\n\r\nThere are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughout [our SSR documentation](/guide/scaling-up/ssr) to avoid vulnerabilities.","src/content/docs/best-practices/security.mdx","e96c22d891f08bd5","best-practices/performance",{id:101,data:103,body:109,filePath:110,digest:111,deferredRender:16},{title:104,description:105,editUrl:16,head:106,template:18,sidebar:107,pagefind:16,draft:20},"Performance","A guide to performance optimization in Vue.js.",[],{hidden:20,attrs:108},{},"## Overview\r\n\r\nVue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application.\r\n\r\nFirst, let's discuss the two major aspects of web performance:\r\n\r\n- **Page Load Performance**: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics like [Largest Contentful Paint (LCP)](https://web.dev/lcp/) and [Interaction to Next Paint](https://web.dev/articles/inp).\r\n\r\n- **Update Performance**: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA).\r\n\r\nWhile it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:\r\n\r\n- Consult [Ways of Using Vue](/guide/extras/ways-of-using-vue) to see how you can leverage Vue in different ways.\r\n\r\n- Jason Miller discusses the types of web applications and their respective ideal implementation / delivery in [Application Holotypes](https://jasonformat.com/application-holotypes/).\r\n\r\n## Profiling Options\r\n\r\nTo improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:\r\n\r\nFor profiling load performance of production deployments:\r\n\r\n- [PageSpeed Insights](https://pagespeed.web.dev/)\r\n- [WebPageTest](https://www.webpagetest.org/)\r\n\r\nFor profiling performance during local development:\r\n\r\n- [Chrome DevTools Performance Panel](https://developer.chrome.com/docs/devtools/evaluate-performance/)\r\n  - [`app.config.performance`](/api/application#app-config-performance) enables Vue-specific performance markers in Chrome DevTools' performance timeline.\r\n- [Vue DevTools Extension](/guide/scaling-up/tooling#browser-devtools) also provides a performance profiling feature.\r\n\r\n## Page Load Optimizations\r\n\r\nThere are many framework-agnostic aspects for optimizing page load performance - check out [this web.dev guide](https://web.dev/fast/) for a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue.\r\n\r\n### Choosing the Right Architecture\r\n\r\nIf your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated with [Server-Side Rendering (SSR)](/guide/extras/ways-of-using-vue#fullstack-ssr) or [Static Site Generation (SSG)](/guide/extras/ways-of-using-vue#jamstack-ssg). Check out the [SSR Guide](/guide/scaling-up/ssr) to learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client.\r\n\r\nIf your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG.\r\n\r\n### Bundle Size and Tree-shaking\r\n\r\nOne of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:\r\n\r\n- Use a build step if possible.\r\n\r\n  - Many of Vue's APIs are [\"tree-shakable\"](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) if bundled via a modern build tool. For example, if you don't use the built-in `<Transition>` component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.\r\n\r\n  - When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves **14kb** min+gzipped JavaScript and avoids the runtime compilation cost.\r\n\r\n- Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.\r\n\r\n  - If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer `lodash-es` over `lodash`.\r\n\r\n  - Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools like [bundlejs.com](https://bundlejs.com/) can be used for quick checks, but measuring with your actual build setup will always be the most accurate.\r\n\r\n- If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider using [petite-vue](https://github.com/vuejs/petite-vue) (only **6kb**) instead.\r\n\r\n### Code Splitting\r\n\r\nCode splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance.\r\n\r\nBundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:\r\n\r\n```js\r\n// lazy.js and its dependencies will be split into a separate chunk\r\n// and only loaded when `loadLazy()` is called.\r\nfunction loadLazy() {\r\n  return import(\"./lazy.js\");\r\n}\r\n```\r\n\r\nLazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue's [Async Component](/guide/components/async) feature to create split chunks for component trees:\r\n\r\n```js\r\nimport { defineAsyncComponent } from \"vue\";\r\n\r\n// a separate chunk is created for Foo.vue and its dependencies.\r\n// it is only fetched on demand when the async component is\r\n// rendered on the page.\r\nconst Foo = defineAsyncComponent(() => import(\"./Foo.vue\"));\r\n```\r\n\r\nFor applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate from `defineAsyncComponent`. See [Lazy Loading Routes](https://router.vuejs.org/guide/advanced/lazy-loading.html) for more details.\r\n\r\n## Update Optimizations\r\n\r\n### Props Stability\r\n\r\nIn Vue, a child component only updates when at least one of its received props has changed. Consider the following example:\r\n\r\n```vue-html\r\n<ListItem\r\n  v-for=\"item in list\"\r\n  :id=\"item.id\"\r\n  :active-id=\"activeId\" />\r\n```\r\n\r\nInside the `<ListItem>` component, it uses its `id` and `activeId` props to determine whether it is the currently active item. While this works, the problem is that whenever `activeId` changes, **every** `<ListItem>` in the list has to update!\r\n\r\nIdeally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make `<ListItem>` directly accept an `active` prop instead:\r\n\r\n```vue-html\r\n<ListItem\r\n  v-for=\"item in list\"\r\n  :id=\"item.id\"\r\n  :active=\"item.id === activeId\" />\r\n```\r\n\r\nNow, for most components the `active` prop will remain the same when `activeId` changes, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible.\r\n\r\n### `v-once`\r\n\r\n`v-once` is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult its [API reference](/api/built-in-directives#v-once) for more details.\r\n\r\n### `v-memo`\r\n\r\n`v-memo` is a built-in directive that can be used to conditionally skip the update of large sub-trees or `v-for` lists. Consult its [API reference](/api/built-in-directives#v-memo) for more details.\r\n\r\n### Computed Stability\r\n\r\nIn Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the following `isEven` computed only triggers effects if the returned value has changed from `true` to `false`, or vice-versa:\r\n\r\n```js\r\nconst count = ref(0);\r\nconst isEven = computed(() => count.value % 2 === 0);\r\n\r\nwatchEffect(() => console.log(isEven.value)); // true\r\n\r\n// will not trigger new logs because the computed value stays `true`\r\ncount.value = 2;\r\ncount.value = 4;\r\n```\r\n\r\nThis reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:\r\n\r\n```js\r\nconst computedObj = computed(() => {\r\n  return {\r\n    isEven: count.value % 2 === 0,\r\n  };\r\n});\r\n```\r\n\r\nBecause a new object is created each time, the new value is technically always different from the old value. Even if the `isEven` property remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it.\r\n\r\nInstead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:\r\n\r\n```js\r\nconst computedObj = computed((oldValue) => {\r\n  const newValue = {\r\n    isEven: count.value % 2 === 0,\r\n  };\r\n  if (oldValue && oldValue.isEven === newValue.isEven) {\r\n    return oldValue;\r\n  }\r\n  return newValue;\r\n});\r\n```\r\n\r\n[Try it in the playground](https://play.vuejs.org/#eNqVVMtu2zAQ/JUFgSZK4UpuczMkow/40AJ9IC3aQ9mDIlG2EokUyKVt1PC/d0lKtoEminMQQC1nZ4c7S+7Yu66L11awGUtNoesOwQi03ZzLuu2URtiBFtUECtV2FkU5gU2OxWpRVaJA2EOlVQuXxHDJJZeFkgYJayVC5hKj6dUxLnzSjZXmV40rZfFrh3Vb/82xVrLH//5DCQNNKPkweNiNVFP+zBsrIJvDjksgGrRahjVAbRZrIWdBVLz2yBfwBrIsg6mD7LncPyryfIVnywupUmz68HOEEqqCI+XFBQzrOKR79MDdx66GCn1jhpQDZx8f0oZ+nBgdRVcH/aMuBt1xZ80qGvGvh/X6nlXwnGpPl6qsLLxTtitzFFTNl0oSN/79AKOCHHQuS5pw4XorbXsr9ImHZN7nHFdx1SilI78MeOJ7Ca+nbvgd+GgomQOv6CNjSQqXaRJuHd03+kHRdg3JoT+A3a7XsfcmpbcWkQS/LZq6uM84C8o5m4fFuOg0CemeOXXX2w2E6ylsgj2gTgeYio/f1l5UEqj+Z3yC7lGuNDlpApswNNTrql7Gd0ZJeqW8TZw5t+tGaMdDXnA2G4acs7xp1OaTj6G2YjLEi5Uo7h+I35mti3H2TQsj9Jp6etjDXC8Fhu3F9y9iS+vDZqtK2xB6ZPNGGNVYpzHA3ltZkuwTnFf70b+1tVz+MIstCmmGQzmh/p56PGf00H4YOfpR7nV8PTxubP8P2GAP9Q==)\r\n\r\nNote that you should always perform the full computation before comparing and returning the old value, so that the same dependencies can be collected on every run.\r\n\r\n## General Optimizations\r\n\r\n> The following tips affect both page load and update performance.\r\n\r\n### Virtualize Large Lists\r\n\r\nOne of the most common performance issues in all frontend applications is rendering large lists. No matter how performant a framework is, rendering a list with thousands of items **will** be slow due to the sheer number of DOM nodes that the browser needs to handle.\r\n\r\nHowever, we don't necessarily have to render all these nodes upfront. In most cases, the user's screen size can display only a small subset of our large list. We can greatly improve the performance with **list virtualization**, the technique of only rendering the items that are currently in or close to the viewport in a large list.\r\n\r\nImplementing list virtualization isn't easy, luckily there are existing community libraries that you can directly use:\r\n\r\n- [vue-virtual-scroller](https://github.com/Akryum/vue-virtual-scroller)\r\n- [vue-virtual-scroll-grid](https://github.com/rocwang/vue-virtual-scroll-grid)\r\n- [vueuc/VVirtualList](https://github.com/07akioni/vueuc)\r\n\r\n### Reduce Reactivity Overhead for Large Immutable Structures\r\n\r\nVue's reactivity system is deep by default. While this makes state management intuitive, it does create a certain level of overhead when the data size is large, because every property access triggers proxy traps that perform dependency tracking. This typically becomes noticeable when dealing with large arrays of deeply nested objects, where a single render needs to access 100,000+ properties, so it should only affect very specific use cases.\r\n\r\nVue does provide an escape hatch to opt-out of deep reactivity by using [`shallowRef()`](/api/reactivity-advanced#shallowref) and [`shallowReactive()`](/api/reactivity-advanced#shallowreactive). Shallow APIs create state that is reactive only at the root level, and exposes all nested objects untouched. This keeps nested property access fast, with the trade-off being that we must now treat all nested objects as immutable, and updates can only be triggered by replacing the root state:\r\n\r\n```js\r\nconst shallowArray = shallowRef([\r\n  /* big list of deep objects */\r\n]);\r\n\r\n// this won't trigger updates...\r\nshallowArray.value.push(newObject);\r\n// this does:\r\nshallowArray.value = [...shallowArray.value, newObject];\r\n\r\n// this won't trigger updates...\r\nshallowArray.value[0].foo = 1;\r\n// this does:\r\nshallowArray.value = [\r\n  {\r\n    ...shallowArray.value[0],\r\n    foo: 1,\r\n  },\r\n  ...shallowArray.value.slice(1),\r\n];\r\n```\r\n\r\n### Avoid Unnecessary Component Abstractions\r\n\r\nSometimes we may create [renderless components](/guide/components/slots#renderless-components) or higher-order components (i.e. components that render other components with extra props) for better abstraction or code organization. While there is nothing wrong with this, do keep in mind that component instances are much more expensive than plain DOM nodes, and creating too many of them due to abstraction patterns will incur performance costs.\r\n\r\nNote that reducing only a few instances won't have noticeable effect, so don't sweat it if the component is rendered only a few times in the app. The best scenario to consider this optimization is again in large lists. Imagine a list of 100 items where each item component contains many child components. Removing one unnecessary component abstraction here could result in a reduction of hundreds of component instances.","src/content/docs/best-practices/performance.mdx","b7f12e7c13e38797","built-in-components/transition-group",{id:112,data:114,body:120,filePath:121,digest:122,deferredRender:16},{title:115,description:116,editUrl:16,head:117,template:18,sidebar:118,pagefind:16,draft:20},"TransitionGroup","A guide to using the TransitionGroup component in Vue.js.",[],{hidden:20,attrs:119},{},"import ListBasic from \"./transition-demos/ListBasic.jsx\";\r\nimport ListMove from \"./transition-demos/ListMove.jsx\";\r\nimport ListStagger from \"./transition-demos/ListStagger.jsx\";\r\n\r\n# TransitionGroup\r\n\r\n`<TransitionGroup>` is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.\r\n\r\n## Differences from `<Transition>`\r\n\r\n`<TransitionGroup>` supports the same props, CSS transition classes, and JavaScript hook listeners as `<Transition>`, with the following differences:\r\n\r\n- By default, it doesn't render a wrapper element. But you can specify an element to be rendered with the `tag` prop.\r\n\r\n- [Transition modes](./transition#transition-modes) are not available, because we are no longer alternating between mutually exclusive elements.\r\n\r\n- Elements inside are **always required** to have a unique `key` attribute.\r\n\r\n- CSS transition classes will be applied to individual elements in the list, **not** to the group / container itself.\r\n\r\n:::tip\r\nWhen used in [in-DOM templates](/guide/essentials/component-basics#in-dom-template-parsing-caveats), it should be referenced as `<transition-group>`.\r\n:::\r\n\r\n## Enter / Leave Transitions\r\n\r\nHere is an example of applying enter / leave transitions to a `v-for` list using `<TransitionGroup>`:\r\n\r\n```vue-html\r\n<TransitionGroup name=\"list\" tag=\"ul\">\r\n  <li v-for=\"item in items\" :key=\"item\">\r\n    {{ item }}\r\n  </li>\r\n</TransitionGroup>\r\n```\r\n\r\n```css\r\n.list-enter-active,\r\n.list-leave-active {\r\n  transition: all 0.5s ease;\r\n}\r\n.list-enter-from,\r\n.list-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n```\r\n\r\n<ListBasic />\r\n\r\n## Move Transitions\r\n\r\nThe above demo has some obvious flaws: when an item is inserted or removed, its surrounding items instantly \"jump\" into place instead of moving smoothly. We can fix this by adding a few additional CSS rules:\r\n\r\n```css\r\n.list-move, /* apply transition to moving elements */\r\n.list-enter-active,\r\n.list-leave-active {\r\n  transition: all 0.5s ease;\r\n}\r\n\r\n.list-enter-from,\r\n.list-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n\r\n/* ensure leaving items are taken out of layout flow so that moving\r\n   animations can be calculated correctly. */\r\n.list-leave-active {\r\n  position: absolute;\r\n}\r\n```\r\n\r\nNow it looks much better - even animating smoothly when the whole list is shuffled:\r\n\r\n<ListMove />\r\n\r\n[Full Example](/examples/#list-transition)\r\n\r\n### Custom TransitionGroup classes\r\n\r\nYou can also specify custom transition classes for the moving element by passing the `moveClass` prop to `<TransitionGroup>`, just like [custom transition classes on `<Transition>`](/guide/built-ins/transition.html#custom-transition-classes).\r\n\r\n## Staggering List Transitions\r\n\r\nBy communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list. First, we render the index of an item as a data attribute on the DOM element:\r\n\r\n```vue-html\r\n<TransitionGroup\r\n  tag=\"ul\"\r\n  :css=\"false\"\r\n  @before-enter=\"onBeforeEnter\"\r\n  @enter=\"onEnter\"\r\n  @leave=\"onLeave\"\r\n>\r\n  <li\r\n    v-for=\"(item, index) in computedList\"\r\n    :key=\"item.msg\"\r\n    :data-index=\"index\"\r\n  >\r\n    {{ item.msg }}\r\n  </li>\r\n</TransitionGroup>\r\n```\r\n\r\nThen, in JavaScript hooks, we animate the element with a delay based on the data attribute. This example is using the [GSAP library](https://gsap.com/) to perform the animation:\r\n\r\n```js\r\nfunction onEnter(el, done) {\r\n  gsap.to(el, {\r\n    opacity: 1,\r\n    height: \"1.6em\",\r\n    delay: el.dataset.index * 0.15,\r\n    onComplete: done,\r\n  });\r\n}\r\n```\r\n\r\n<ListStagger />\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Full Example in the Playground](https://play.vuejs.org/#eNqlVMuu0zAQ/ZVRNklRm7QLWETtBW4FSFCxYkdYmGSSmjp28KNQVfl3xk7SFyvEponPGc+cOTPNOXrbdenRYZRHa1Nq3lkwaF33VEjedkpbOIPGeg6lajtnsYIeaq1aiOlSfAlqDOtG3L8SUchSSWNBcPrZwNdCAqVqTZND/KxdibBDjKGf3xIfWXngCNs9k4/Udu/KA3xWWnPz1zW0sOOP6CcnG3jv9ImIQn67SvrpUJ9IE/WVxPHsSkw97gbN0zFJZrB5grNPrskcLUNXac2FRZ0k3GIbIvxLSsVTq3bqF+otM5jMUi5L4So0SSicHplwOKOyfShdO1lariQo+Yy10vhO+qwoZkNFFKmxJ4Gp6ljJrRe+vMP3yJu910swNXqXcco1h0pJHDP6CZHEAAcAYMydwypYCDAkJRdX6Sts4xGtUDAKotIVs9Scpd4q/A0vYJmuXo5BSm7JOIEW81DVo77VR207ZEf8F23LB23T+X9VrbNh82nn6UAz7ASzSCeANZe0AnBctIqqbIoojLCIIBvoL5pJw31DH7Ry3VDKsoYinSii4ZyXxhBQM2Fwwt58D7NeoB8QkXfDvwRd2XtceOsCHkwc8KCINAk+vADJppQUFjZ0DsGVGT3uFn1KSjoPeKLoaYtvCO/rIlz3vH9O5FiU/nXny/pDT6YGKZngg0/Zg1GErrMbp6N5NHxJFi3N/4dRkj5IYf5ULxCmiPJpI4rIr4kHimhvbWfyLHOyOzQpNZZ57jXNy4nRGFLTR/0fWBqe7w==)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Full Example in the Playground](https://play.vuejs.org/#eNqtVE2P0zAQ/SujXNqgNmkPcIjaBbYCJKg4cSMcTDJNTB07+KNsVfW/M3aabNpyQltViT1vPPP8Zian6H3bJgeHURatTKF5ax9yyZtWaQuVYS3stGpg4peTXOayUNJYEJwea/ieS4ATNKbKYPKoXYGwRZzAeTYGPrNizxE2NZO30KZ2xR6+Kq25uTuGFrb81vrFyQo+On0kIJc/PCV8CmxL3DEnLJy8e8ksm8bdGkCjdVr2O4DfDvWRgtGN/JYC0SOkKVTTOotl1jv3hi3d+DngENILkey4sKinU26xiWH9AH6REN/Eqq36g3rDDE7jhMtCuBLN1NbcJIFEHN9RaNDWqjQDAyUfcac0fpA+CYoRCRSJsUeBiWpZwe2RSrK4w2rkVe2rdYG6LD5uH3EGpZI4iuurTdwDNBjpRJclg+UlhP914UnMZfIGm8kIKVEwciYivhoGLQlQ4hO8gkWyfD1yVHJDKgu0mAUmPXLuxRkYb5Ed8H8YL/7BeGx7Oa6hkLmk/yodBoo21BKtYBZpB7DikroKDvNGUeZ1HoVmyCNIO/ibZtJwy5X8pJVru9CWVeTpRB51+6wwhgw7Jgz2tnc/Q6/M0ZeWwKvmGZye0Wu78PIGexC6swdGxEnw/q6HOYUkt9DwMwhKxfS6GpY+KPHc45G8+6EYAV7reTjucf/uwUtSmvvTME1wDuISlVTwTqf0RiiyrtKR0tEs6r5l84b645dRkr5zoT8oXwBMHg2Tlke+jbwhj2prW5OlqZPtvkroYqnH3lK9nLgI46scnf8Cn22kBA==)\r\n\r\n</div>\r\n\r\n---\r\n\r\n**Related**\r\n\r\n- [`<TransitionGroup>` API reference](/api/built-in-components#transitiongroup)","src/content/docs/built-in-components/transition-group.mdx","7c376ce7645362a0","built-in-components/transition",{id:123,data:125,body:131,filePath:132,digest:133,deferredRender:16},{title:126,description:127,editUrl:16,head:128,template:18,sidebar:129,pagefind:16,draft:20},"Transition","A guide to using the Transition component in Vue.js.",[],{hidden:20,attrs:130},{},"import Basic from \"./transition-demos/Basic.jsx\";\r\nimport SlideFade from \"./transition-demos/SlideFade.jsx\";\r\nimport CssAnimation from \"./transition-demos/CssAnimation.jsx\";\r\nimport NestedTransitions from \"./transition-demos/NestedTransitions.jsx\";\r\nimport JsHooks from \"./transition-demos/JsHooks.jsx\";\r\nimport BetweenElements from \"./transition-demos/BetweenElements.jsx\";\r\nimport BetweenComponents from \"./transition-demos/BetweenComponents.jsx\";\r\nimport Teleport from \"../../../components/Teleport.jsx\";\r\n\r\n# Transition\r\n\r\nVue offers two built-in components that can help work with transitions and animations in response to changing state:\r\n\r\n- `<Transition>` for applying animations when an element or component is entering and leaving the DOM. This is covered on this page.\r\n\r\n- `<TransitionGroup>` for applying animations when an element or component is inserted into, removed from, or moved within a `v-for` list. This is covered in [the next chapter](/guide/built-ins/transition-group).\r\n\r\nAside from these two components, we can also apply animations in Vue using other techniques such as toggling CSS classes or state-driven animations via style bindings. These additional techniques are covered in the [Animation Techniques](/guide/extras/animation) chapter.\r\n\r\n## The `<Transition>` Component\r\n\r\n`<Transition>` is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:\r\n\r\n- Conditional rendering via `v-if`\r\n- Conditional display via `v-show`\r\n- Dynamic components toggling via the `<component>` special element\r\n- Changing the special `key` attribute\r\n\r\nThis is an example of the most basic usage:\r\n\r\n```vue-html\r\n<button @click=\"show = !show\">Toggle</button>\r\n<Transition>\r\n  <p v-if=\"show\">hello</p>\r\n</Transition>\r\n```\r\n\r\n```css\r\n/* we will explain what these classes do next! */\r\n.v-enter-active,\r\n.v-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.v-enter-from,\r\n.v-leave-to {\r\n  opacity: 0;\r\n}\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNpVkMFuAiEQhl9lyqlNuouXXrZo2nfwuBeKs0qKQGBAjfHdZZfVrAmB+f/M/2WGK/v1vs0JWcdEVEF72vQWz94Fgh0OMhmCa28BdpLk+0etAQJSCvahAOLBnTqgkLA6t/EpVzmCP7lFEB69kYRFAYi/ROQs/Cij1f+6ZyMG1vA2vj3bbN1+b1Dw2lYj2yBt1KRnXRwPudHDnC6pAxrjBPe1n78EBF8MUGSkixnLNjdoCUMjFemMn5NjUGacnboqPVkdOC+Vpgus2q8IKCN+T+suWENwxyWJXKXMyQ5WNVJ+aBqD3e6VSYoi)\r\n\r\n</div>\r\n\r\n:::tip\r\n`<Transition>` only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.\r\n:::\r\n\r\nWhen an element in a `<Transition>` component is inserted or removed, this is what happens:\r\n\r\n1. Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number of [CSS transition classes](#transition-classes) will be added / removed at appropriate timings.\r\n\r\n2. If there are listeners for [JavaScript hooks](#javascript-hooks), these hooks will be called at appropriate timings.\r\n\r\n3. If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame.\r\n\r\n## CSS-Based Transitions\r\n\r\n### Transition Classes\r\n\r\nThere are six classes applied for enter / leave transitions.\r\n\r\n![Transition Diagram](./images/transition-classes.png)\r\n\r\n{\r\n\"https://www.figma.com/file/rlOv0ZKJFFNA9hYmzdZv3S/Transition-Classes?type=design&node-id=0%3A1&mode=design&t=2a5r7vX4qk6Zx8gE-1\"\r\n}\r\n\r\n1. `v-enter-from`: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.\r\n\r\n2. `v-enter-active`: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.\r\n\r\n3. `v-enter-to`: Ending state for enter. Added one frame after the element is inserted (at the same time `v-enter-from` is removed), removed when the transition/animation finishes.\r\n\r\n4. `v-leave-from`: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.\r\n\r\n5. `v-leave-active`: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.\r\n\r\n6. `v-leave-to`: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time `v-leave-from` is removed), removed when the transition/animation finishes.\r\n\r\n`v-enter-active` and `v-leave-active` give us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections.\r\n\r\n### Named Transitions\r\n\r\nA transition can be named via the `name` prop:\r\n\r\n```vue-html\r\n<Transition name=\"fade\">\r\n  ...\r\n</Transition>\r\n```\r\n\r\nFor a named transition, its transition classes will be prefixed with its name instead of `v`. For example, the applied class for the above transition will be `fade-enter-active` instead of `v-enter-active`. The CSS for the fade transition should look like this:\r\n\r\n```css\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n```\r\n\r\n### CSS Transitions\r\n\r\n`<Transition>` is most commonly used in combination with [native CSS transitions](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions), as seen in the basic example above. The `transition` CSS property is a shorthand that allows us to specify multiple aspects of a transition, including properties that should be animated, duration of the transition, and [easing curves](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function).\r\n\r\nHere is a more advanced example that transitions multiple properties, with different durations and easing curves for enter and leave:\r\n\r\n```vue-html\r\n<Transition name=\"slide-fade\">\r\n  <p v-if=\"show\">hello</p>\r\n</Transition>\r\n```\r\n\r\n```css\r\n/*\r\n  Enter and leave animations can use different\r\n  durations and timing functions.\r\n*/\r\n.slide-fade-enter-active {\r\n  transition: all 0.3s ease-out;\r\n}\r\n\r\n.slide-fade-leave-active {\r\n  transition: all 0.8s cubic-bezier(1, 0.5, 0.8, 1);\r\n}\r\n\r\n.slide-fade-enter-from,\r\n.slide-fade-leave-to {\r\n  transform: translateX(20px);\r\n  opacity: 0;\r\n}\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFkc9uwjAMxl/F6wXQKIVNk1AX0HbZC4zDDr2E4EK0NIkStxtDvPviFQ0OSFzyx/m+n+34kL16P+lazMpMRBW0J4hIrV9WVjfeBYIDBKzhCHVwDQySdFDZyipnY5Lu3BcsWDCk0OKosqLoKcmfLoSNN5KQbyTWLZGz8KKMVp+LKju573ivsuXKbbcG4d3oDcI9vMkNiqL3JD+AWAVpoyadGFY2yATW5nVSJj9rkspDl+v6hE/hHRrjRMEdpdfiDEkBUVxWaEWkveHj5AzO0RKGXCrSHcKBIfSPKEEaA9PJYwSUEXPX0nNlj8y6RBiUHd5AzCOodq1VvsYfjWE4G6fgEy/zMcxG17B9ZTyX8bV85C5y1S40ZX/kdj+GD1P/zVQA56XStC9h2idJI/z7huz4CxoVvE4=)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFkc1uwjAMgF/F6wk0SmHTJNQFtF32AuOwQy+hdSFamkSJ08EQ776EbMAkJKTIf7I/O/Y+ezVm3HvMyoy52gpDi0rh1mhL0GDLvSTYVwqg4cQHw2QDWCRv1Z8H4Db6qwSyHlPkEFUQ4bHixA0OYWckJ4wesZUn0gpeainqz3mVRQzM4S7qKlss9XotEd6laBDu4Y03yIpUE+oB2NJy5QSJwFC8w0iIuXkbMkN9moUZ6HPR/uJDeINSalaYxCjOkBBgxeWEijnayWiOz+AcFaHNeU2ix7QCOiFK4FLCZPzoALnDXHt6Pq7hP0Ii7/EGYuag9itR5yv8FmgH01EIPkUxG8F0eA2bJmut7kbX+pG+6NVq28WTBTN+92PwMDHbSAXQhteCdiVMUpNwwuMassMP8kfAJQ==)\r\n\r\n</div>\r\n\r\n### CSS Animations\r\n\r\n[Native CSS animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations) are applied in the same way as CSS transitions, with the difference being that `*-enter-from` is not removed immediately after the element is inserted, but on an `animationend` event.\r\n\r\nFor most CSS animations, we can simply declare them under the `*-enter-active` and `*-leave-active` classes. Here's an example:\r\n\r\n```vue-html\r\n<Transition name=\"bounce\">\r\n  <p v-if=\"show\" style=\"text-align: center;\">\r\n    Hello here is some bouncy text!\r\n  </p>\r\n</Transition>\r\n```\r\n\r\n```css\r\n.bounce-enter-active {\r\n  animation: bounce-in 0.5s;\r\n}\r\n.bounce-leave-active {\r\n  animation: bounce-in 0.5s reverse;\r\n}\r\n@keyframes bounce-in {\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n  50% {\r\n    transform: scale(1.25);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n}\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNksGOgjAQhl9lJNmoBwRNvCAa97YP4JFLbQZsLG3TDqzG+O47BaOezCYkpfB9/0wHbsm3c4u+w6RIyiC9cgQBqXO7yqjWWU9wA4813KH2toUpo9PKVEZaExg92V/YRmBGvsN5ZcpsTGGfN4St04Iw7qg8dkTWwF5qJc/bKnnYk7hWye5gm0ZjmY0YKwDlwQsTFCnWjGiRpaPtjETG43smHPSpqh9pVQKBrjpyrfCNMilZV8Aqd5cNEF4oFVo1pgCJhtBvnjEAP6i1hRN6BBUg2BZhKHUdvMmjWhYHE9dXY/ygzN4PasqhB75djM2mQ7FUSFI9wi0GCJ6uiHYxVsFUGcgX67CpzP0lahQ9/k/kj9CjDzgG7M94rT1PLLxhQ0D+Na4AFI9QW98WEKTQOMvnLAOwDrD+wC0Xq/Ubusw/sU+QL/45hskk9z8Bddbn)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNUs2OwiAQfpWxySZ66I8mXioa97YP4LEXrNNKpEBg2tUY330pqOvJmBBgyPczP1yTb2OyocekTJirrTC0qRSejbYEB2x4LwmulQI4cOLTWbwDWKTeqkcE4I76twSyPcaX23j4zS+WP3V9QNgZyQnHiNi+J9IKtrUU9WldJaMMrGEynlWy2em2lcjyCPMUALazXDlBwtMU79CT9rpXNXp4tGYGhlQ0d7UqAUcXOeI6bluhUtKmhEVhzisgPFPKpWhVCTUqQrt6ygD8oJQajmgRhAOnO4RgdQm8yd0tNzGv/D8x/8Dy10IVCzn4axaTTYNZymsSA8YuciU6PrLL6IKpUFBkS7cKXXwQJfIBPyP6IQ1oHUaB7QkvjfUdcy+wIFB8PeZIYwmNtl0JruYSp8XMk+/TXL7BzbPF8gU6L95hn8D4OUJnktsfM1vavg==)\r\n\r\n</div>\r\n\r\n### Custom Transition Classes\r\n\r\nYou can also specify custom transition classes by passing the following props to `<Transition>`:\r\n\r\n- `enter-from-class`\r\n- `enter-active-class`\r\n- `enter-to-class`\r\n- `leave-from-class`\r\n- `leave-active-class`\r\n- `leave-to-class`\r\n\r\nThese will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as [Animate.css](https://daneden.github.io/animate.css/):\r\n\r\n```vue-html\r\n<!-- assuming Animate.css is included on the page -->\r\n<Transition\r\n  name=\"custom-classes\"\r\n  enter-active-class=\"animate__animated animate__tada\"\r\n  leave-active-class=\"animate__animated animate__bounceOutRight\"\r\n>\r\n  <p v-if=\"show\">hello</p>\r\n</Transition>\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNUctuwjAQ/BXXF9oDsZB6ogbRL6hUcbSEjLMhpn7JXtNWiH/vhqS0R3zxPmbWM+szf02pOVXgSy6LyTYhK4A1rVWwPsWM7MwydOzCuhw9mxF0poIKJoZC0D5+stUAeMRc4UkFKcYpxKcEwSenEYYM5b4ixsA2xlnzsVJ8Yj8Mt+LrbTwcHEgxwojCmNxmHYpFG2kaoxO0B2KaWjD6uXG6FCiKj00ICHmuDdoTjD2CavJBCna7KWjZrYK61b9cB5pI93P3sQYDbxXf7aHHccpVMolO7DS33WSQjPXgXJRi2Cl1xZ8nKkjxf0dBFvx2Q7iZtq94j5jKUgjThmNpjIu17ZzO0JjohT7qL+HsvohJWWNKEc/NolncKt6Goar4y/V7rg/wyw9zrLOy)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNUcFuwjAM/RUvp+1Ao0k7sYDYF0yaOFZCJjU0LE2ixGFMiH9f2gDbcVKU2M9+tl98Fm8hNMdMYi5U0tEEXraOTsFHho52mC3DuXUAHTI+PlUbIBLn6G4eQOr91xw4ZqrIZXzKVY6S97rFYRqCRabRY7XNzN7BSlujPxetGMvAAh7GtxXLtd/vLSlZ0woFQK0jumTY+FJt7ORwoMLUObEfZtpiSpRaUYPkmOIMNZsj1VhJRWeGMsFmczU6uCOMHd64lrCQ/s/d+uw0vWf+MPuea5Vp5DJ0gOPM7K4Ci7CerPVKhipJ/moqgJJ//8ipxN92NFdmmLbSip45pLmUunOH1Gjrc7ezGKnRfpB4wJO0ZpvkdbJGpyRfmufm+Y4Mxo1oK16n9UwNxOUHwaK3iQ==)\r\n\r\n</div>\r\n\r\n### Using Transitions and Animations Together\r\n\r\nVue needs to attach event listeners in order to know when a transition has ended. It can either be `transitionend` or `animationend`, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type.\r\n\r\nHowever, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about by passing the `type` prop, with a value of either `animation` or `transition`:\r\n\r\n```vue-html\r\n<Transition type=\"animation\">...</Transition>\r\n```\r\n\r\n### Nested Transitions and Explicit Transition Durations\r\n\r\nAlthough the transition classes are only applied to the direct child element in `<Transition>`, we can transition nested elements using nested CSS selectors:\r\n\r\n```vue-html\r\n<Transition name=\"nested\">\r\n  <div v-if=\"show\" class=\"outer\">\r\n    <div class=\"inner\">\r\n      Hello\r\n    </div>\r\n  </div>\r\n</Transition>\r\n```\r\n\r\n```css\r\n/* rules that target nested elements */\r\n.nested-enter-active .inner,\r\n.nested-leave-active .inner {\r\n  transition: all 0.3s ease-in-out;\r\n}\r\n\r\n.nested-enter-from .inner,\r\n.nested-leave-to .inner {\r\n  transform: translateX(30px);\r\n  opacity: 0;\r\n}\r\n\r\n/* ... other necessary CSS omitted */\r\n```\r\n\r\nWe can even add a transition delay to the nested element on enter, which creates a staggered enter animation sequence:\r\n\r\n```css\r\n/* delay enter of nested element for staggered effect */\r\n.nested-enter-active .inner {\r\n  transition-delay: 0.25s;\r\n}\r\n```\r\n\r\nHowever, this creates a small issue. By default, the `<Transition>` component attempts to automatically figure out when the transition has finished by listening to the **first** `transitionend` or `animationend` event on the root transition element. With a nested transition, the desired behavior should be waiting until the transitions of all inner elements have finished.\r\n\r\nIn such cases you can specify an explicit transition duration (in milliseconds) using the `duration` prop on the `<Transition>` component. The total duration should match the delay plus transition duration of the inner element:\r\n\r\n```vue-html\r\n<Transition :duration=\"550\">...</Transition>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqVVd9v0zAQ/leO8LAfrE3HNKSFbgKmSYMHQNAHkPLiOtfEm2NHttN2mvq/c7bTNi1jgFop9t13d9995ziPyfumGc5bTLJkbLkRjQOLrm2uciXqRhsHj2BwBiuYGV3DAUEPcpUrrpUlaKUXcOkBh860eJSrcRqzUDxtHNaNZA5pBzCets5pBe+4FPz+Mk+66Bf+mSdXE12WEsdphMWQiWHKCicoLCtaw/yKIs/PR3kCitVIG4XWYUEJfATFFGIO84GYdRUIyCWzlra6dWg2wA66dgqlts7c+d8tSqk34JTQ6xqb9TjdUiTDOO21TFvrHqRfDkPpExiGKvBITjdl/L40ulVFBi8R8a3P17CiEKrM4GzULIOlFmpQoSgrl8HpKFpX3kFZu2y0BNhJxznvwaJCA1TEYcC4E3MkKp1VIptjZ43E3KajDJiUMBqeWUBmcUBUqJGYOT2GAiV7gJAA9Iy4GyoBKLH2z+N0W3q/CMC2yCCkyajM63Mbc+9z9mfvZD+b071MM23qLC69+j8PvX5HQUDdMC6cL7BOTtQXCJwpas/qHhWIBdYtWGgtDWNttWTmThu701pf1W6+v1Hd8Xbz+k+VQxmv8i7Fv1HZn+g/iv2nRkjzbd6npf/Rkz49DifQ3dLZBBYOJzC4rqgCwsUbmLYlCAUVU4XsCd1NrCeRHcYXb1IJC/RX2hEYCwJTvHYVMZoavbBI09FmU+LiFSzIh0AIXy1mqZiFKaKCmVhiEVJ7GftHZTganUZ56EYLL3FykjhL195MlMM7qxXdmEGDPOG6boRE86UJVPMki+p4H01WLz4Fm78hSdBo5xXy+yfsd3bpbXny1SA1M8c82fgcMyW66L75/hmXtN44a120ktDPOL+h1bL1HCPsA42DaPdwge3HcO/TOCb2ZumQJtA15Yl65Crg84S+BdfPtL6lezY8C3GkZ7L6Bc1zNR0=)\r\n\r\nIf necessary, you can also specify separate values for enter and leave durations using an object:\r\n\r\n```vue-html\r\n<Transition :duration=\"{ enter: 500, leave: 800 }\">...</Transition>\r\n```\r\n\r\n### Performance Considerations\r\n\r\nYou may notice that the animations shown above are mostly using properties like `transform` and `opacity`. These properties are efficient to animate because:\r\n\r\n1. They do not affect the document layout during the animation, so they do not trigger expensive CSS layout calculation on every animation frame.\r\n\r\n2. Most modern browsers can leverage GPU hardware acceleration when animating `transform`.\r\n\r\nIn comparison, properties like `height` or `margin` will trigger CSS layout, so they are much more expensive to animate, and should be used with caution.\r\n\r\n## JavaScript Hooks\r\n\r\nYou can hook into the transition process with JavaScript by listening to events on the `<Transition>` component:\r\n\r\n```vue-html\r\n<Transition\r\n  @before-enter=\"onBeforeEnter\"\r\n  @enter=\"onEnter\"\r\n  @after-enter=\"onAfterEnter\"\r\n  @enter-cancelled=\"onEnterCancelled\"\r\n  @before-leave=\"onBeforeLeave\"\r\n  @leave=\"onLeave\"\r\n  @after-leave=\"onAfterLeave\"\r\n  @leave-cancelled=\"onLeaveCancelled\"\r\n>\r\n  <!-- ... -->\r\n</Transition>\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\n// called before the element is inserted into the DOM.\r\n// use this to set the \"enter-from\" state of the element\r\nfunction onBeforeEnter(el) {}\r\n\r\n// called one frame after the element is inserted.\r\n// use this to start the entering animation.\r\nfunction onEnter(el, done) {\r\n  // call the done callback to indicate transition end\r\n  // optional if used in combination with CSS\r\n  done();\r\n}\r\n\r\n// called when the enter transition has finished.\r\nfunction onAfterEnter(el) {}\r\n\r\n// called when the enter transition is cancelled before completion.\r\nfunction onEnterCancelled(el) {}\r\n\r\n// called before the leave hook.\r\n// Most of the time, you should just use the leave hook\r\nfunction onBeforeLeave(el) {}\r\n\r\n// called when the leave transition starts.\r\n// use this to start the leaving animation.\r\nfunction onLeave(el, done) {\r\n  // call the done callback to indicate transition end\r\n  // optional if used in combination with CSS\r\n  done();\r\n}\r\n\r\n// called when the leave transition has finished and the\r\n// element has been removed from the DOM.\r\nfunction onAfterLeave(el) {}\r\n\r\n// only available with v-show transitions\r\nfunction onLeaveCancelled(el) {}\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  // ...\r\n  methods: {\r\n    // called before the element is inserted into the DOM.\r\n    // use this to set the \"enter-from\" state of the element\r\n    onBeforeEnter(el) {},\r\n\r\n    // called one frame after the element is inserted.\r\n    // use this to start the animation.\r\n    onEnter(el, done) {\r\n      // call the done callback to indicate transition end\r\n      // optional if used in combination with CSS\r\n      done();\r\n    },\r\n\r\n    // called when the enter transition has finished.\r\n    onAfterEnter(el) {},\r\n\r\n    // called when the enter transition is cancelled before completion.\r\n    onEnterCancelled(el) {},\r\n\r\n    // called before the leave hook.\r\n    // Most of the time, you should just use the leave hook.\r\n    onBeforeLeave(el) {},\r\n\r\n    // called when the leave transition starts.\r\n    // use this to start the leaving animation.\r\n    onLeave(el, done) {\r\n      // call the done callback to indicate transition end\r\n      // optional if used in combination with CSS\r\n      done();\r\n    },\r\n\r\n    // called when the leave transition has finished and the\r\n    // element has been removed from the DOM.\r\n    onAfterLeave(el) {},\r\n\r\n    // only available with v-show transitions\r\n    onLeaveCancelled(el) {},\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThese hooks can be used in combination with CSS transitions / animations or on their own.\r\n\r\nWhen using JavaScript-only transitions, it is usually a good idea to add the `:css=\"false\"` prop. This explicitly tells Vue to skip auto CSS transition detection. Aside from being slightly more performant, this also prevents CSS rules from accidentally interfering with the transition:\r\n\r\n```vue-html\r\n<Transition\r\n  ...\r\n  :css=\"false\"\r\n>\r\n  ...\r\n</Transition>\r\n```\r\n\r\nWith `:css=\"false\"`, we are also fully responsible for controlling when the transition ends. In this case, the `done` callbacks are required for the `@enter` and `@leave` hooks. Otherwise, the hooks will be called synchronously and the transition will finish immediately.\r\n\r\nHere's a demo using the [GSAP library](https://gsap.com/) to perform the animations. You can, of course, use any other animation library you want, for example [Anime.js](https://animejs.com/) or [Motion One](https://motion.dev/):\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNVMtu2zAQ/JUti8I2YD3i1GigKmnaorcCveTQArpQFCWzlkiCpBwHhv+9Sz1qKYckJ3FnlzvD2YVO5KvW4aHlJCGpZUZoB5a7Vt9lUjRaGQcnMLyEM5RGNbDA0sX/VGWpHnB/xEQmmZIWe+zUI9z6m0tnWr7ymbKVzAklQclvvFSG/5COmyWvV3DKJHTdQiRHZN0jAJbRmv9OIA432/UE+jODlKZMuKcErnx8RrazP8woR7I1FEryKaVTU8aiNdRfwWZTQtQwi1HAGF/YB4BTyxNY8JpaJ1go5K/WLTfhdg1Xq8V4SX5Xja65w0ovaCJ8Jvsnpwc+l525F2XH4ac3Cj8mcB3HbxE9qnvFMRzJ0K3APuhIjPefmTTyvWBAGvWbiDuIgeNYRh3HCCDNW+fQmHtWC7a/zciwaO/8NyN3D6qqap5GfVnXAC89GCqt8Bp77vu827+A+53AJrOFzMhQdMnO8dqPpMO74Yx4wqxFtKS1HbBOMdIX4gAMffVp71+Qq2NG4BCIcngBKk8jLOvfGF30IpBGEwcwtO6p9sdwbNXPIadsXxnVyiKB9x83+c3N9WePN9RUQgZO6QQ2sT524KMo3M5Pf4h3XFQ7NwFyZQpuAkML0doEtvEHhPvRDPRkTfq/QNDgRvy1SuIvpFOSDQmbkWTckf7hHsjIzjltkyhqpd5XIVNN5HNfGlW09eAcMp3J+R+pEn7L)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNVFFvmzAQ/is3pimNlABNF61iaddt2tukvfRhk/xiwIAXsJF9pKmq/PedDTSwh7ZSFLjvzvd9/nz4KfjatuGhE0ES7GxmZIu3TMmm1QahtLyFwugGFu51wRQAU+Lok7koeFcjPDk058gvlv07gBHYGTVGALbSDwmg6USPnNzjtHL/jcBK5zZxxQwZavVNFNqIHwqF8RUAWs2jn4IffCfqQz+mik5lKLWi3GT1hagHRU58aAUSshpV2YzX4ncCcbjZDp099GcG6ZZnEh8TuPR8S0/oTJhQjmQryLUSU0rUU8a8M9wtoWZTQtIwi0nAGJ/ZB0BwKxJYiJpblFko1a8OLzbhdgWXy8WzP99109YCqdIJmgifyfYuzmUzfFF2HH56o/BjAldx/BbRo7pXHKMjGbrl1IcciWn9fyaNfC8YsIueR5wCFFTGUVAEsEs7pOmDu6yW2f6GBW5o4QbeuScLbu91WdZiF/VlvgEtujdcWek09tx3qZ+/tXAzQU1mA8mCoeicneO1OxKP9yM+4ElmLaEFr+2AecVEn8sDZOSrSzv/1qk+sgAOa1kMOyDlu4jK+j1GZ70E7KKJAxRafKzdazi26s8h5dm+NLpTeQLvP27S6+urz/7T5aaUao26TWATt0cPPsgcK3f6Q1wJWVY4AVJtcmHWhueyo89+G38guD+agT5YBf39s25oIv5arehu8krYkLAs8BeG86DfuANYUCG2NomiTrX7Msx0E7ncl0bnXT04566M4PQPykWaWw==)\r\n\r\n</div>\r\n\r\n## Reusable Transitions\r\n\r\nTransitions can be reused through Vue's component system. To create a reusable transition, we can create a component that wraps the `<Transition>` component and passes down the slot content:\r\n\r\n```vue\r\n<!-- MyTransition.vue -->\r\n<script>\r\n// JavaScript hooks logic...\r\n</script>\r\n\r\n<template>\r\n  <!-- wrap the built-in Transition component -->\r\n  <Transition name=\"my-transition\" @enter=\"onEnter\" @leave=\"onLeave\">\r\n    <slot></slot>\r\n    <!-- pass down slot content -->\r\n  </Transition>\r\n</template>\r\n\r\n<style>\r\n/*\r\n  Necessary CSS...\r\n  Note: avoid using <style scoped> here since it\r\n  does not apply to slot content.\r\n*/\r\n</style>\r\n```\r\n\r\nNow `MyTransition` can be imported and used just like the built-in version:\r\n\r\n```vue-html\r\n<MyTransition>\r\n  <div v-if=\"show\">Hello</div>\r\n</MyTransition>\r\n```\r\n\r\n## Transition on Appear\r\n\r\nIf you also want to apply a transition on the initial render of a node, you can add the `appear` prop:\r\n\r\n```vue-html\r\n<Transition appear>\r\n  ...\r\n</Transition>\r\n```\r\n\r\n## Transition Between Elements\r\n\r\nIn addition to toggling an element with `v-if` / `v-show`, we can also transition between two elements using `v-if` / `v-else` / `v-else-if`, as long as we make sure that there is only one element being shown at any given moment:\r\n\r\n```vue-html\r\n<Transition>\r\n  <button v-if=\"docState === 'saved'\">Edit</button>\r\n  <button v-else-if=\"docState === 'edited'\">Save</button>\r\n  <button v-else-if=\"docState === 'editing'\">Cancel</button>\r\n</Transition>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqdk8tu2zAQRX9loI0SoLLcFN2ostEi6BekmwLa0NTYJkKRBDkSYhj+9wxJO3ZegBGu+Lhz7syQ3Bd/nJtNIxZN0QbplSMISKNbdkYNznqCPXhcwwHW3g5QsrTsTGekNYGgt/KBBCEsouimDGLCvrztTFtnGGN4QTg4zbK4ojY4YSDQTuOiKwbhN8pUXm221MDd3D11xfJeK/kIZEHupEagrbfjZssxzAgNs5nALIC2VxNILUJg1IpMxWmRUAY9U6IZ2/3zwgRFyhowYoieQaseq9ElDaTRrkYiVkyVWrPiXNdiAcequuIkPo3fMub5Sg4l9oqSevmXZ22dwR8YoQ74kdsL4Go7ZTbR74HT/KJfJlxleGrG8l4YifqNYVuf251vqOYr4llbXz4C06b75+ns1a3BPsb0KrBy14Aymnerlbby8Vc8cTajG35uzFITpu0t5ufzHQdeH6LBsezEO0eJVbB6pBiVVLPTU6jQEPpKyMj8dnmgkQs+HmQcvVTIQK1hPrv7GQAFt9eO9Bk6fZ8Ub52Qiri8eUo+4dbWD02exh79v/nBP+H2PStnwz/jelJ1geKvk/peHJ4BoRZYow==)\r\n\r\n## Transition Modes\r\n\r\nIn the previous example, the entering and leaving elements are animated at the same time, and we had to make them `position: absolute` to avoid the layout issue when both elements are present in the DOM.\r\n\r\nHowever, in some cases this isn't an option, or simply isn't the desired behavior. We may want the leaving element to be animated out first, and for the entering element to only be inserted **after** the leaving animation has finished. Orchestrating such animations manually would be very complicated - luckily, we can enable this behavior by passing `<Transition>` a `mode` prop:\r\n\r\n```vue-html\r\n<Transition mode=\"out-in\">\r\n  ...\r\n</Transition>\r\n```\r\n\r\nHere's the previous demo with `mode=\"out-in\"`:\r\n\r\n`<Transition>` also supports `mode=\"in-out\"`, although it's much less frequently used.\r\n\r\n## Transition Between Components\r\n\r\n`<Transition>` can also be used around [dynamic components](/guide/essentials/component-basics#dynamic-components):\r\n\r\n```vue-html\r\n<Transition name=\"fade\" mode=\"out-in\">\r\n  <component :is=\"activeComponent\"></component>\r\n</Transition>\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqtksFugzAMhl/F4tJNKtDLLoxWKnuDacdcUnC3SCGJiMmEqr77EkgLbXfYYZyI8/v77dinZG9M5npMiqS0dScMgUXqzY4p0RrdEZzAfnEp9fc7HuEMx063sPIZq6viTbdmHy+yfDwF5K2guhFUUcBUnkNvcelBGrjTooHaC7VCRXBAoT6hQTRyAH2w2DlsmKq1sgS8JuEwUCfxdgF7Gqt5ZqrMp+58X/5A2BrJCcOJSskPKP0v+K8UyvQENBjcsqTjjdAsAZe2ukHpI3dm/q5wXPZBPFqxZAf7gCrzGfufDlVwqB4cPjqurCChFSjeBvGRN+iTA9afdE+pUD43FjG/bSHsb667Mr9qJot89vCBMl8+oiotDTL8ZsE39UnYpRN0fQlK5A5jEE6BSVdiAdrwWtAAm+zFAnKLr0ydA3pJDDt0x/PrMrJifgGbKdFPfCwpWU+TuWz5omzfVCNcfJJ5geL8pqtFn5E07u7fSHFOj6TzDyUDNEM=)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqtks9ugzAMxl/F4tJNamGXXVhWqewVduSSgStFCkkUDFpV9d0XJyn9t8MOkxBg5/Pvi+Mci51z5TxhURdi7LxytG2NGpz1BB92cDvYezvAqqxixNLVjaC5ETRZ0Br8jpIe93LSBMfWAHRBYQ0aGms4Jvw6Q05rFvSS5NNzEgN4pMmbcwQgO1Izsj5CalhFRLDj1RN/wis8olpaCQHh4LQk5IiEll+owy+XCGXcREAHh+9t4WWvbFvAvBlsjzpk7gx5TeqJtdG4LbawY5KoLtR/NGjYoHkw+PTSjIqUNWDkwOK97DHUMjVEdqKNMqE272E5dajV+JvpVlSLJllUF4+QENX1ERox0kHzb8m+m1CEfpOgYYgpqVHOmJNpgLQQa7BOdooO8FK+joByxLc4tlsiX6s7HtnEyvU1vKTCMO+4pWKdBnO+0FfbDk31as5HsvR+Hl9auuozk+J1/hspz+mRdPoBYtonzg==)\r\n\r\n</div>\r\n\r\n## Dynamic Transitions\r\n\r\n`<Transition>` props like `name` can also be dynamic! It allows us to dynamically apply different transitions based on state change:\r\n\r\n```vue-html\r\n<Transition :name=\"transitionName\">\r\n  <!-- ... -->\r\n</Transition>\r\n```\r\n\r\nThis can be useful when you've defined CSS transitions / animations using Vue's transition class conventions and want to switch between them.\r\n\r\nYou can also apply different behavior in JavaScript transition hooks based on the current state of your component. Finally, the ultimate way of creating dynamic transitions is through [reusable transition components](#reusable-transitions) that accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination.\r\n\r\n## Transitions with the Key Attribute\r\n\r\nSometimes you need to force the re-render of a DOM element in order for a transition to occur.\r\n\r\nTake this counter component for example:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref } from \"vue\";\r\nconst count = ref(0);\r\n\r\nsetInterval(() => count.value++, 1000);\r\n</script>\r\n\r\n<template>\r\n  <Transition>\r\n    <span :key=\"count\">{{ count }}</span>\r\n  </Transition>\r\n</template>\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 1,\r\n      interval: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.interval = setInterval(() => {\r\n      this.count++;\r\n    }, 1000);\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval);\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <Transition>\r\n    <span :key=\"count\">{{ count }}</span>\r\n  </Transition>\r\n</template>\r\n```\r\n\r\n</div>\r\n\r\nIf we had excluded the `key` attribute, only the text node would be updated and thus no transition would occur. However, with the `key` attribute in place, Vue knows to create a new `span` element whenever `count` changes and thus the `Transition` component has 2 different elements to transition between.\r\n\r\n<div class=\"composition-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp9UsFu2zAM/RVCl6Zo4nhYd/GcAtvQQ3fYhq1HXTSFydTKkiDJbjLD/z5KMrKgLXoTHx/5+CiO7JNz1dAja1gbpFcuQsDYuxtuVOesjzCCxx1MsPO2gwuiXnzkhhtpTYggbW8ibBJlUV/mBJXfmYh+EHqxuITNDYzcQGFWBPZ4dUXEaQnv6jrXtOuiTJoUROycFhEpAmi3agCpRQgbzp68cA49ZyV174UJKiprckxIcMJA84hHImc9oo7jPOQ0kQ4RSvH6WXW7JiV6teszfQpDPGqEIK3DLSGpQbazsyaugvqLDVx77JIhbqp5wsxwtrRvPFI7NWDhEGtYYVrQSsgELzOiUQw4I2Vh8TRgA9YJqeIR6upDABQh9TpTAPE7WN3HlxLp084Foi3N54YN1KWEVpOMkkO2ZJHsmp3aVw/BGjqMXJE22jml0X93STRw1pReKSe0tk9fMxZ9nzwVXP5B+fgK/hAOCePsh8dAt4KcnXJR+D3S16X07a9veKD3KdnZba+J/UbyJ+Zl0IyF9rk3Wxr7jJenvcvnrcz+PtweItKuZ1Np0MScMp8zOvkvb1j/P+776jrX0UbZ9A+fYSTP)\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp9U8tu2zAQ/JUFTwkSyw6aXlQ7QB85pIe2aHPUhZHWDhOKJMiVYtfwv3dJSpbbBgEMWJydndkdUXvx0bmi71CUYhlqrxzdVAa3znqCBtey0wT7ygA0kuTZeX4G8EidN+MJoLadoRKuLkdAGULfS12C6bSGDB/i3yFx2tiAzaRIjyoUYxesICDdDaczZq1uJrNETY4XFx8G5Uu4WiwW55PBA66txy8YyNvdZFNrlP4o/Jdpbq4M/5bzYxZ8IGydloR8Alg2qmcVGcKqEi9eOoe+EqnExXsvTVCkrBkQxoKTBspn3HFDmprp+32ODA4H9mLCKDD/R2E5Zz9+Ws5PpuBjoJ1GCLV12DASJdKGa2toFtRvLOHaY8vx8DrFMGdiOJvlS48sp3rMHGb1M4xRzGQdYU6REY6rxwHJGdJxwBKsk7WiHSyK9wFQhqh14gDyIVjd0f8Wa2/bUwOyWXwQLGGRWzicuChvKC4F8bpmrTbFU7CGL2zqiJm2Tmn03100DZUox5ddCam1ffmaMPJd3Cnj9SPWz6/gT2EbsUr88Bj4VmAljjWSfoP88mL59tc33PLzsdjaptPMfqP4E1MYPGOmfepMw2Of8NK0d238+JTZ3IfbLSFnPSwVB53udyX4q/38xurTuO+K6/Fqi8MffqhR/A==)\r\n\r\n</div>\r\n\r\n---\r\n\r\n**Related**\r\n\r\n- [`<Transition>` API reference](/api/built-in-components#transition)","src/content/docs/built-in-components/transition.mdx","d58f6fdd5a2e0c75","components-in-depth/component-v-model",{id:134,data:136,body:142,filePath:143,digest:144,deferredRender:16},{title:137,description:138,editUrl:16,head:139,template:18,sidebar:140,pagefind:16,draft:20},"Component v-model","A guide to using v-model with components in Vue.js.",[],{hidden:20,attrs:141},{},"# Component v-model\r\n\r\n## Basic Usage\r\n\r\n`v-model` can be used on a component to implement a two-way binding.\r\n\r\n<div class=\"composition-api\">\r\n\r\nStarting in Vue 3.4, the recommended approach to achieve this is using the [`defineModel()`](/api/sfc-script-setup#definemodel) macro:\r\n\r\n```vue\r\n<!-- Child.vue -->\r\n<script setup>\r\nconst model = defineModel();\r\n\r\nfunction update() {\r\n  model.value++;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>Parent bound v-model is: {{ model }}</div>\r\n  <button @click=\"update\">Increment</button>\r\n</template>\r\n```\r\n\r\nThe parent can then bind a value with `v-model`:\r\n\r\n```vue-html\r\n<!-- Parent.vue -->\r\n<Child v-model=\"countModel\" />\r\n```\r\n\r\nThe value returned by `defineModel()` is a ref. It can be accessed and mutated like any other ref, except that it acts as a two-way binding between a parent value and a local one:\r\n\r\n- Its `.value` is synced with the value bound by the parent `v-model`;\r\n- When it is mutated by the child, it causes the parent bound value to be updated as well.\r\n\r\nThis means you can also bind this ref to a native input element with `v-model`, making it straightforward to wrap native input elements while providing the same `v-model` usage:\r\n\r\n```vue\r\n<script setup>\r\nconst model = defineModel();\r\n</script>\r\n\r\n<template>\r\n  <input v-model=\"model\" />\r\n</template>\r\n```\r\n\r\n[Try it in the playground](https://play.vuejs.org/#eNqFUtFKwzAU/ZWYl06YLbK30Q10DFSYigq+5KW0t11mmoQknZPSf/cm3eqEsT0l555zuefmpKV3WsfbBuiUpjY3XDtiwTV6ziSvtTKOLNZcFKQ0qiZRnATkG6JB0BIDJen2kp5iMlfSOlLbisw8P4oeQAhFPpURxVV0zWSa9PNwEgIHtRaZA0SEpOvbeduG5q5LE0Sh2jvZ3tSqADFjFHlGSYJkmhz10zF1FseXvIo3VklcrfX9jOaq1lyAedGOoz1GpyQwnsvQ3fdTqDnTwPhQz9eQf52ob+zO1xh9NWDBbIHRgXOZqcD19PL9GXZ4H0h03whUnyHfwCrReI+97L6RBdo+0gW3j+H9uaw+7HLnQNrDUt6oV3ZBzyhmsjiz+p/dSTwJfUx2+IpD1ic+xz5enwQGXEDJJaw8Gl2I1upMzlc/hEvdOBR6SNKAjqP1J6P/o6XdL11L5h4=)\r\n\r\n### Under the Hood\r\n\r\n`defineModel` is a convenience macro. The compiler expands it to the following:\r\n\r\n- A prop named `modelValue`, which the local ref's value is synced with;\r\n- An event named `update:modelValue`, which is emitted when the local ref's value is mutated.\r\n\r\nThis is how you would implement the same child component shown above prior to 3.4:\r\n\r\n```vue\r\n<!-- Child.vue -->\r\n<script setup>\r\nconst props = defineProps([\"modelValue\"]);\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    :value=\"props.modelValue\"\r\n    @input=\"emit('update:modelValue', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\nThen, `v-model=\"foo\"` in the parent component will be compiled to:\r\n\r\n```vue-html\r\n<!-- Parent.vue -->\r\n<Child\r\n  :modelValue=\"foo\"\r\n  @update:modelValue=\"$event => (foo = $event)\"\r\n/>\r\n```\r\n\r\nAs you can see, it is quite a bit more verbose. However, it is helpful to understand what is happening under the hood.\r\n\r\nBecause `defineModel` declares a prop, you can therefore declare the underlying prop's options by passing it to `defineModel`:\r\n\r\n```js\r\n// making the v-model required\r\nconst model = defineModel({ required: true });\r\n\r\n// providing a default value\r\nconst model = defineModel({ default: 0 });\r\n```\r\n\r\n:::warning\r\nIf you have a `default` value for `defineModel` prop and you don't provide any value for this prop from the parent component, it can cause a de-synchronization between parent and child components. In the example below, the parent's `myRef` is undefined, but the child's `model` is 1:\r\n\r\n**Child component:**\r\n\r\n```js\r\nconst model = defineModel({ default: 1 });\r\n```\r\n\r\n**Parent component:**\r\n\r\n```js\r\nconst myRef = ref();\r\n```\r\n\r\n```html\r\n<Child v-model=\"myRef\"></Child>\r\n```\r\n\r\n:::\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\nFirst let's revisit how `v-model` is used on a native element:\r\n\r\n```vue-html\r\n<input v-model=\"searchText\" />\r\n```\r\n\r\nUnder the hood, the template compiler expands `v-model` to the more verbose equivalent for us. So the above code does the same as the following:\r\n\r\n```vue-html\r\n<input\r\n  :value=\"searchText\"\r\n  @input=\"searchText = $event.target.value\"\r\n/>\r\n```\r\n\r\nWhen used on a component, `v-model` instead expands to this:\r\n\r\n```vue-html\r\n<CustomInput\r\n  :model-value=\"searchText\"\r\n  @update:model-value=\"newValue => searchText = newValue\"\r\n/>\r\n```\r\n\r\nFor this to actually work though, the `<CustomInput>` component must do two things:\r\n\r\n1. Bind the `value` attribute of a native `<input>` element to the `modelValue` prop\r\n2. When a native `input` event is triggered, emit an `update:modelValue` custom event with the new value\r\n\r\nHere's that in action:\r\n\r\n```vue\r\n<!-- CustomInput.vue -->\r\n<script>\r\nexport default {\r\n  props: [\"modelValue\"],\r\n  emits: [\"update:modelValue\"],\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    :value=\"modelValue\"\r\n    @input=\"$emit('update:modelValue', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\nNow `v-model` should work perfectly with this component:\r\n\r\n```vue-html\r\n<CustomInput v-model=\"searchText\" />\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFkctqwzAQRX9lEAEn4Np744aWrvoD3URdiHiSGvRCHpmC8b93JDfGKYGCkJjXvTrSJF69r8aIohHtcA69p6O0vfEuELzFgZx5tz4SXIIzUFT1JpfGCmmlxe/c3uFFRU0wSQtwdqxh0dLQwHSnNJep3ilS+8PSCxCQYrC3CMDgMKgrNlB8odaOXVJ2TgdvvNp6vSwHhMZrRcgRQLs1G5+M61A/S/ErKQXUR5immwXMWW1VEKX4g3j3Mo9QfXCeKU9FtvpQmp/lM0Oi6RP/qYieebHZNvyL0acLLODNmGYSxCogxVJ6yW1c2iWz/QOnEnY48kdUpMIVGSllD8t8zVZb+PkHqPG4iw==)\r\n\r\nAnother way of implementing `v-model` within this component is to use a writable `computed` property with both a getter and a setter. The `get` method should return the `modelValue` property and the `set` method should emit the corresponding event:\r\n\r\n```vue\r\n<!-- CustomInput.vue -->\r\n<script>\r\nexport default {\r\n  props: [\"modelValue\"],\r\n  emits: [\"update:modelValue\"],\r\n  computed: {\r\n    value: {\r\n      get() {\r\n        return this.modelValue;\r\n      },\r\n      set(value) {\r\n        this.$emit(\"update:modelValue\", value);\r\n      },\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input v-model=\"value\" />\r\n</template>\r\n```\r\n\r\n</div>\r\n\r\n## `v-model` Arguments\r\n\r\n`v-model` on a component can also accept an argument:\r\n\r\n```vue-html\r\n<MyComponent v-model:title=\"bookTitle\" />\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\nIn the child component, we can support the corresponding argument by passing a string to `defineModel()` as its first argument:\r\n\r\n```vue\r\n<!-- MyComponent.vue -->\r\n<script setup>\r\nconst title = defineModel(\"title\");\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model=\"title\" />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFklFPwjAUhf9K05dhgiyGNzJI1PCgCWqUx77McQeFrW3aOxxZ9t+9LTAXA/q2nnN6+t12Db83ZrSvgE944jIrDTIHWJmZULI02iJrmIWctSy3umQRRaPOWhweNX0pUHiyR3FP870UZkyoTCuH7FPr3VJiAWzqSwfR/rbUKyhYatdV6VugTktTQHQjVBIfeYiEFgikpwi0YizZ3M2aplfXtklMWvD6UKf+CfrUVPBuh+AspngSd718yH+hX7iS4xihjUZYQS4VLPwJgyiI/3FLZSrafzAeBqFG4jgxeuEqGTo6OZfr0dZpRVxNuFWeEa4swL4alEQm+IQFx3tpUeiv56ChrWB41rMNZLsL+tbVXhP8zYIDuyeQzkN6HyBWb88/XgJ3ZxJ95bH/MN/B6aLyjMfYQ6VWhN3LBdqn8FdJtV66eY2g3HkoD+qTbcgLTo/jX+ra6D+449E47BOq5e039mr+gA==)\r\n\r\nIf prop options are also needed, they should be passed after the model name:\r\n\r\n```js\r\nconst title = defineModel(\"title\", { required: true });\r\n```\r\n\r\n<details>\r\n<summary>Pre 3.4 Usage</summary>\r\n\r\n```vue\r\n<!-- MyComponent.vue -->\r\n<script setup>\r\ndefineProps({\r\n  title: {\r\n    required: true,\r\n  },\r\n});\r\ndefineEmits([\"update:title\"]);\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"text\"\r\n    :value=\"title\"\r\n    @input=\"$emit('update:title', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp9kE1rwzAMhv+KMIW00DXsGtKyMXYc7D7vEBplM8QfOHJoCfnvk+1QsjJ2svVKevRKk3h27jAGFJWoh7NXjmBACu4kjdLOeoIJPHYwQ+ethoJLi1vq7fpi+WfQ0JI+lCstcrkYQJqzNQMBKeoRjhG4LcYHbVvsofFfQUcCXhrteix20tRl9sIuOCBkvSHkCKD+fjxN04Ka57rkOOlrMwu7SlVHKdIrBZRcWpc3ntiLO7t/nKHFThl899YN248ikYpP9pj1V60o6sG1TMwDU/q/FZRxgeIPgK4uGcQLSZGlamz6sHKd1afUxOoGeeT298A9bHCMKxBfE3mTSNjl1vud5x8qNa76)\r\n\r\n</details>\r\n</div>\r\n<div class=\"options-api\">\r\n\r\nIn this case, instead of the default `modelValue` prop and `update:modelValue` event, the child component should expect a `title` prop and emit an `update:title` event to update the parent value:\r\n\r\n```vue\r\n<!-- MyComponent.vue -->\r\n<script>\r\nexport default {\r\n  props: [\"title\"],\r\n  emits: [\"update:title\"],\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"text\"\r\n    :value=\"title\"\r\n    @input=\"$emit('update:title', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFUNFqwzAM/BVhCm6ha9hryMrGnvcFdR9Mo26B2DGuHFJC/n2yvZakDAohtuTTne5G8eHcrg8oSlFdTr5xtFe2Ma7zBF/Xz45vFi3B2XcG5K6Y9eKYVFZZHBK8xrMOLcGoLMDphrqUMC6Ypm18rzXp9SZjATxS8PZWAVBDLZYg+xfT1diC9t/BxGEctHFtlI2wKR78468q7ttzQcgoTcgVQPXzuh/HzAnTVBVcp/58qz+lMqHelEinElAwtCrufGIrHhJYBPdfEs53jkM4yEQpj8k+miYmc5DBcRKYZeXxqZXGukDZPF1dWhQHUiK3yl63YbZ97r6nIe6uoup6KbmFFfbRCnHGyI4iwyaPPnqffgGMlsEM)\r\n\r\n</div>\r\n\r\n## Multiple `v-model` Bindings\r\n\r\nBy leveraging the ability to target a particular prop and event as we learned before with [`v-model` arguments](#v-model-arguments), we can now create multiple `v-model` bindings on a single component instance.\r\n\r\nEach `v-model` will sync to a different prop, without the need for extra options in the component:\r\n\r\n```vue-html\r\n<UserName\r\n  v-model:first-name=\"first\"\r\n  v-model:last-name=\"last\"\r\n/>\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nconst firstName = defineModel(\"firstName\");\r\nconst lastName = defineModel(\"lastName\");\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model=\"firstName\" />\r\n  <input type=\"text\" v-model=\"lastName\" />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFkstuwjAQRX/F8iZUAqKKHQpIfbAoUmnVx86bKEzANLEt26FUkf+9Y4MDSAg2UWbu9fjckVv6oNRw2wAd08wUmitLDNhGTZngtZLakpZoKIkjpZY1SdCadNK3Ab3IazhowzQ2/ES0MVFIYSwpucbvxA/qJXO5FsldlKr8qDxL8EKW7kEQAQsLtapyC1gRkq3vp217mOccwf8wwLksRSlYIoMvCNkOarmEahyODAT2J4yGgtFzhx8UDf5/r6c4NEs7CNqnpxkvbO0kcVjNhCyh5AJe/SW9pBPOV3DJGvu3dsKFaiyxf8qTW9gheQwVs4Z90BDm5oF47cF/Ht4aZC75argxUmD61g9ktJC14hXoN2U5ZmJ0TILitbyq5O889KxuoB/7xRqKnwv9jdn5HqPvGnDVWwTpNJvrFSCul2efi4DeiRigqdB9RfwAI6vGM+5tj41YIvaJL9C+hOfNxerLzHYWhImhPKh3uuBnFJ/A05XoR9zRcBTOMeGo+wcs+yse)\r\n\r\n<details>\r\n<summary>Pre 3.4 Usage</summary>\r\n\r\n```vue\r\n<script setup>\r\ndefineProps({\r\n  firstName: String,\r\n  lastName: String,\r\n});\r\n\r\ndefineEmits([\"update:firstName\", \"update:lastName\"]);\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"text\"\r\n    :value=\"firstName\"\r\n    @input=\"$emit('update:firstName', $event.target.value)\"\r\n  />\r\n  <input\r\n    type=\"text\"\r\n    :value=\"lastName\"\r\n    @input=\"$emit('update:lastName', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNUc1qwzAMfhVjCk6hTdg1pGWD7bLDGIydlh1Cq7SGxDaOEjaC332yU6cdFNpLsPRJ348y8idj0qEHnvOi21lpkHWAvdmWSrZGW2Qjs1Azx2qrWyZoVMzQZwf2rWrhhKVZbHhGGivVTqsOWS0tfTeeKBGv+qjEMkJNdUaeNXigyCYjZIEKhNY0FQJVjBXHh+04nvicY/QOBM4VGUFhJHrwBWPDutV7aPKwslbU35Q8FCX/P+GJ4oB/T3hGpEU2m+ArfpnxytX2UEsF71abLhk9QxDzCzn7QCvVYeW7XuGyWSpH0eP6SyuxS75Eb/akOpn302LFYi8SiO8bJ5PK9DhFxV/j0yH8zOnzoWr6+SbhbifkMSwSsgByk1zzsoABFKZY2QNgGpiW57Pdrx2z3JCeI99Svvxh7g8muf2x)\r\n\r\n</details>\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  props: {\r\n    firstName: String,\r\n    lastName: String,\r\n  },\r\n  emits: [\"update:firstName\", \"update:lastName\"],\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"text\"\r\n    :value=\"firstName\"\r\n    @input=\"$emit('update:firstName', $event.target.value)\"\r\n  />\r\n  <input\r\n    type=\"text\"\r\n    :value=\"lastName\"\r\n    @input=\"$emit('update:lastName', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqNkk1rg0AQhv/KIAETSJRexYYWeuqhl9JTt4clmSSC7i7rKCnif+/ObtYkELAiujPzztejQ/JqTNZ3mBRJ2e5sZWgrVNUYbQm+WrQfskE4WN1AmuXRwQmpUELh2Qv3eJBdTTAIBbDTLluhoraA4VpjXHNwL0kuV0EIYJE6q6IFcKhsSwWk7/qkUq/nq5be+aa5JztGfrmHu8t8GtoZhI2pJaGzAMrT03YYQk0YR3BnruSOZe5CXhKnC3X7TaP3WBc+ZaOc/1kk3hDJvYILRQGfQzx3Rct8GiJZJ7fA7gg/AmesNszMrUIXFpxbwCfZSh09D0Hc7tbN6sAWm4qZf6edcZgxrMHSdA3RF7PTn1l8lTIdhbXp1/CmhOeJRNHLupv4eIaXyItPdJEFD7R8NM0Ce/d/ZCTtESnzlVZXhP/vHbeZaT0tPdf59uONfx7mDVM=)\r\n\r\n</div>\r\n\r\n## Handling `v-model` Modifiers\r\n\r\nWhen we were learning about form input bindings, we saw that `v-model` has [built-in modifiers](/guide/essentials/forms#modifiers) - `.trim`, `.number` and `.lazy`. In some cases, you might also want the `v-model` on your custom input component to support custom modifiers.\r\n\r\nLet's create an example custom modifier, `capitalize`, that capitalizes the first letter of the string provided by the `v-model` binding:\r\n\r\n```vue-html\r\n<MyComponent v-model.capitalize=\"myText\" />\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\nModifiers added to a component `v-model` can be accessed in the child component by destructuring the `defineModel()` return value like this:\r\n\r\n```vue\r\n<script setup>\r\nconst [model, modifiers] = defineModel();\r\n\r\nconsole.log(modifiers); // { capitalize: true }\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model=\"model\" />\r\n</template>\r\n```\r\n\r\nTo conditionally adjust how the value should be read / written based on modifiers, we can pass `get` and `set` options to `defineModel()`. These two options receive the value on get / set of the model ref and should return a transformed value. This is how we can use the `set` option to implement the `capitalize` modifier:\r\n\r\n```vue\r\n<script setup>\r\nconst [model, modifiers] = defineModel({\r\n  set(value) {\r\n    if (modifiers.capitalize) {\r\n      return value.charAt(0).toUpperCase() + value.slice(1);\r\n    }\r\n    return value;\r\n  },\r\n});\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" v-model=\"model\" />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp9UsFu2zAM/RVClzhY5mzoLUgHdEUPG9Bt2LLTtIPh0Ik6WRIkKksa5N9LybFrFG1OkvgeyccnHsWNc+UuoliIZai9cgQBKbpP0qjWWU9wBI8NnKDxtoUJUycDdH+4tXwzaOgMl/NRLNVlMoA0tTWBoD2scE9wnSoWk8lUmuW8a8rt+EHYOl0R8gtgtVUBlHGRoK6cokqrRwxAW4RGea6mkQg9HGwEboZ+kbKWY027961doy6f86+l6ERIAXNus5wPPcVMvNB+yZOaiZFw/cKYftI/ufEM+FCNQh/+8tRrbJTB+4QUxySWqxa7SkecQn4DqAaKIWekeyAAe0fRG8h5Zb2t/A0VH6Yl2d/Oob+tAhZTeHfGg1Y1Fh/Z6ZR66o5xhRTh8OnyXyy7f6CDSw5S59/Z3WRpOl91lAL70ahN+RCsYT/zFFIk95RG/92RYr+kWPTzSVFpbf9/zTHyEWd9vN5i/e+V+EPYp5gUPzwG9DuUYsCo8htkrQm++/Ut6x5AVh01sy+APzFYHZPGjvY5mjXLHvGy2i95K5TZrMLdntCEfqgkNDuc+VLwkqQNe2v0Z7lX5VX/M+L0BFEuPdc=)\r\n\r\n<details>\r\n<summary>Pre 3.4 Usage</summary>\r\n\r\n```vue\r\n<script setup>\r\nconst props = defineProps({\r\n  modelValue: String,\r\n  modelModifiers: { default: () => ({}) },\r\n});\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\n\r\nfunction emitValue(e) {\r\n  let value = e.target.value;\r\n  if (props.modelModifiers.capitalize) {\r\n    value = value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  emit(\"update:modelValue\", value);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" :value=\"props.modelValue\" @input=\"emitValue\" />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp9Us1Og0AQfpUJF5ZYqV4JNTaNxyYmVi/igdCh3QR2N7tDIza8u7NLpdU0nmB+v5/ZY7Q0Jj10GGVR7iorDYFD6sxDoWRrtCU4gsUaBqitbiHm1ngqrfuV5j+Fik7ldH6R83u5GaBQlVaOoO03+Emw8BtFHCeFyucjKMNxQNiapiTkCGCzlw6kMh1BVRpJZSO/0AEe0Pa0l2oHve6AYdBmvj+/ZHO4bfUWm/Q8uSiiEb6IYM4A+XxCi2bRH9ZX3BgVGKuNYwFbrKXCZx+Jo0cPcG9l02EGL2SZ3mxKr/VW1hKty9hMniy7hjIQCSweQByHBIZCDWzGDwi20ps0Yjxx4MR73Jktc83OOPFHGKk7VZHUKkyFgsAEAqcG2Qif4WWYUml3yOp8wldlDSLISX+TvPDstAemLeGbVvvSLkncJSnpV2PQrkqHLOfmVHeNrFDcMz3w0iBQE1cUzMYBbuS2f55CPj4D6o0/I41HzMKsP+u0kLOPoZWzkx1X7j18A8s0DEY=)\r\n\r\n</details>\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\nModifiers added to a component `v-model` will be provided to the component via the `modelModifiers` prop. In the below example, we have created a component that contains a `modelModifiers` prop that defaults to an empty object:\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  props: {\r\n    modelValue: String,\r\n    modelModifiers: {\r\n      default: () => ({}),\r\n    },\r\n  },\r\n  emits: [\"update:modelValue\"],\r\n  created() {\r\n    console.log(this.modelModifiers); // { capitalize: true }\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input\r\n    type=\"text\"\r\n    :value=\"modelValue\"\r\n    @input=\"$emit('update:modelValue', $event.target.value)\"\r\n  />\r\n</template>\r\n```\r\n\r\nNotice the component's `modelModifiers` prop contains `capitalize` and its value is `true` - due to it being set on the `v-model` binding `v-model.capitalize=\"myText\"`.\r\n\r\nNow that we have our prop set up, we can check the `modelModifiers` object keys and write a handler to change the emitted value. In the code below we will capitalize the string whenever the `<input />` element fires an `input` event.\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  props: {\r\n    modelValue: String,\r\n    modelModifiers: {\r\n      default: () => ({}),\r\n    },\r\n  },\r\n  emits: [\"update:modelValue\"],\r\n  methods: {\r\n    emitValue(e) {\r\n      let value = e.target.value;\r\n      if (this.modelModifiers.capitalize) {\r\n        value = value.charAt(0).toUpperCase() + value.slice(1);\r\n      }\r\n      this.$emit(\"update:modelValue\", value);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFks1qg0AQgF9lkIKGpqa9iikNOefUtJfaw6KTZEHdZR1DbPDdO7saf0qgIq47//PNXL2N1uG5Ri/y4io1UtNrUspCK0Owa7aK/0osCQ5GFeCHq4nMuvlJCZCUeHEOGR5EnRNcrTS92VURXGex2qXVZ4JEsOhsAQxSbcrbDaBo9nihCHyXAaC1B3/4jVdDoXwhLHQuCPkGsD/JCmSpa4JUaEkilz9YAZ7RNHSS5REaVQPXgCay9vG0rPNToTLMw9FznXhdHYkHK04Qr4Zs3tL7g2JG8B4QbZS2LLqGXK5PkdcYwTsZrs1R6RU7lcmDRDPaM7AuWARMbf0KwbVdTNk4dyyk5f3l15r5YjRm8b+dQYF0UtkY1jo4fYDDLAByZBxWCmvAkIQ5IvdoBTcLeYCAiVbhvNwJvEk4GIK5M0xPwmwoeF6EpD60RrMVFXJXj72+ymWKwUvfXt+gfVzGB1tzcKfDZec+o/LfxsTdtlCj7bSpm3Xk4tjpD8FZ+uZMWTowu7MW7S+CWR77)\r\n\r\n</div>\r\n\r\n### Modifiers for `v-model` with Arguments\r\n\r\n<div class=\"options-api\">\r\n\r\nFor `v-model` bindings with both argument and modifiers, the generated prop name will be `arg + \"Modifiers\"`. For example:\r\n\r\n```vue-html\r\n<MyComponent v-model:title.capitalize=\"myText\">\r\n```\r\n\r\nThe corresponding declarations should be:\r\n\r\n```js\r\nexport default {\r\n  props: [\"title\", \"titleModifiers\"],\r\n  emits: [\"update:title\"],\r\n  created() {\r\n    console.log(this.titleModifiers); // { capitalize: true }\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nHere's another example of using modifiers with multiple `v-model` with different arguments:\r\n\r\n```vue-html\r\n<UserName\r\n  v-model:first-name.capitalize=\"first\"\r\n  v-model:last-name.uppercase=\"last\"\r\n/>\r\n```\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nconst [firstName, firstNameModifiers] = defineModel(\"firstName\");\r\nconst [lastName, lastNameModifiers] = defineModel(\"lastName\");\r\n\r\nconsole.log(firstNameModifiers); // { capitalize: true }\r\nconsole.log(lastNameModifiers); // { uppercase: true }\r\n</script>\r\n```\r\n\r\n<details>\r\n<summary>Pre 3.4 Usage</summary>\r\n\r\n```vue\r\n<script setup>\r\nconst props = defineProps({\r\n  firstName: String,\r\n  lastName: String,\r\n  firstNameModifiers: { default: () => ({}) },\r\n  lastNameModifiers: { default: () => ({}) },\r\n});\r\ndefineEmits([\"update:firstName\", \"update:lastName\"]);\r\n\r\nconsole.log(props.firstNameModifiers); // { capitalize: true }\r\nconsole.log(props.lastNameModifiers); // { uppercase: true }\r\n</script>\r\n```\r\n\r\n</details>\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  props: {\r\n    firstName: String,\r\n    lastName: String,\r\n    firstNameModifiers: {\r\n      default: () => ({}),\r\n    },\r\n    lastNameModifiers: {\r\n      default: () => ({}),\r\n    },\r\n  },\r\n  emits: [\"update:firstName\", \"update:lastName\"],\r\n  created() {\r\n    console.log(this.firstNameModifiers); // { capitalize: true }\r\n    console.log(this.lastNameModifiers); // { uppercase: true }\r\n  },\r\n};\r\n</script>\r\n```\r\n\r\n</div>","src/content/docs/components-in-depth/component-v-model.mdx","f6bfd56e08f3b661","components-in-depth/events",{id:145,data:147,body:153,filePath:154,digest:155,deferredRender:16},{title:148,description:149,editUrl:16,head:150,template:18,sidebar:151,pagefind:16,draft:20},"Events","A guide to component events in Vue.js.",[],{hidden:20,attrs:152},{},"import VueSchoolLinkMDX from \"../../../components/VueSchoolLinkMDX\";\r\n\r\n{/* @client */}\r\n{(() => {\r\nif (typeof window !== 'undefined') {\r\nconst hash = window.location.hash;\r\nconst vModelHashes = [\r\n'#usage-with-v-model',\r\n'#v-model-arguments',\r\n'#multiple-v-model-bindings',\r\n'#handling-v-model-modifiers'\r\n];\r\n\r\n    if (vModelHashes.includes(hash)) {\r\n      window.location = './v-model.html' + hash;\r\n    }\r\n\r\n}\r\nreturn null;\r\n})()}\r\n\r\n# Component Events\r\n\r\n> This page assumes you've already read the [Components Basics](/guide/essentials/component-basics). Read that first if you are new to components.\r\n\r\n<div class=\"options-api\">\r\n  <VueSchoolLinkMDX\r\n    href=\"https://vueschool.io/lessons/defining-custom-events-emits\"\r\n    title=\"Free Vue.js Lesson on Defining Custom Events\"\r\n  />\r\n</div>\r\n\r\n## Emitting and Listening to Events\r\n\r\nA component can emit custom events directly in template expressions (e.g. in a `v-on` handler) using the built-in `$emit` method:\r\n\r\n```vue-html\r\n<!-- MyComponent -->\r\n<button @click=\"$emit('someEvent')\">Click Me</button>\r\n```\r\n\r\n<div class=\"options-api\">\r\n\r\nThe `$emit()` method is also available on the component instance as `this.$emit()`:\r\n\r\n```js\r\nexport default {\r\n  methods: {\r\n    submit() {\r\n      this.$emit(\"someEvent\");\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThe parent can then listen to it using `v-on`:\r\n\r\n```vue-html\r\n<MyComponent @some-event=\"callback\" />\r\n```\r\n\r\nThe `.once` modifier is also supported on component event listeners:\r\n\r\n```vue-html\r\n<MyComponent @some-event.once=\"callback\" />\r\n```\r\n\r\nLike components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As with [props casing](/guide/components/props#prop-name-casing), we recommend using kebab-cased event listeners in templates.\r\n\r\n:::tip\r\nUnlike native DOM events, component emitted events do **not** bubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or a [global state management solution](/guide/scaling-up/state-management).\r\n:::\r\n\r\n## Event Arguments\r\n\r\nIt's sometimes useful to emit a specific value with an event. For example, we may want the `<BlogPost>` component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to `$emit` to provide this value:\r\n\r\n```vue-html\r\n<button @click=\"$emit('increaseBy', 1)\">\r\n  Increase by 1\r\n</button>\r\n```\r\n\r\nThen, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:\r\n\r\n```vue-html\r\n<MyButton @increase-by=\"(n) => count += n\" />\r\n```\r\n\r\nOr, if the event handler is a method:\r\n\r\n```vue-html\r\n<MyButton @increase-by=\"increaseCount\" />\r\n```\r\n\r\nThen the value will be passed as the first parameter of that method:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nmethods: {\r\n  increaseCount(n) {\r\n    this.count += n\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nfunction increaseCount(n) {\r\n  count.value += n;\r\n}\r\n```\r\n\r\n</div>\r\n\r\n:::tip\r\nAll extra arguments passed to `$emit()` after the event name will be forwarded to the listener. For example, with `$emit('foo', 1, 2, 3)` the listener function will receive three arguments.\r\n:::\r\n\r\n## Declaring Emitted Events\r\n\r\nA component can explicitly declare the events it will emit using the <span class=\"composition-api\">[`defineEmits()`](/api/sfc-script-setup#defineprops-defineemits) macro</span><span class=\"options-api\">[`emits`](/api/options-state#emits) option</span>:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\ndefineEmits([\"inFocus\", \"submit\"]);\r\n</script>\r\n```\r\n\r\nThe `$emit` method that we used in the `<template>` isn't accessible within the `<script setup>` section of a component, but `defineEmits()` returns an equivalent function that we can use instead:\r\n\r\n```vue\r\n<script setup>\r\nconst emit = defineEmits([\"inFocus\", \"submit\"]);\r\n\r\nfunction buttonClick() {\r\n  emit(\"submit\");\r\n}\r\n</script>\r\n```\r\n\r\nThe `defineEmits()` macro **cannot** be used inside a function, it must be placed directly within `<script setup>`, as in the example above.\r\n\r\nIf you're using an explicit `setup` function instead of `<script setup>`, events should be declared using the [`emits`](/api/options-state#emits) option, and the `emit` function is exposed on the `setup()` context:\r\n\r\n```js\r\nexport default {\r\n  emits: [\"inFocus\", \"submit\"],\r\n  setup(props, ctx) {\r\n    ctx.emit(\"submit\");\r\n  },\r\n};\r\n```\r\n\r\nAs with other properties of the `setup()` context, `emit` can safely be destructured:\r\n\r\n```js\r\nexport default {\r\n  emits: [\"inFocus\", \"submit\"],\r\n  setup(props, { emit }) {\r\n    emit(\"submit\");\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  emits: [\"inFocus\", \"submit\"],\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThe `emits` option and `defineEmits()` macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\nconst emit = defineEmits({\r\n  submit(payload: { email: string; password: string }) {\r\n    // return `true` or `false` to indicate\r\n    // validation pass / fail\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\nIf you are using TypeScript with `<script setup>`, it's also possible to declare emitted events using pure type annotations:\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\nconst emit = defineEmits<{\r\n  (e: \"change\", id: number): void;\r\n  (e: \"update\", value: string): void;\r\n}>();\r\n</script>\r\n```\r\n\r\nMore details: [Typing Component Emits](/guide/typescript/composition-api#typing-component-emits) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  emits: {\r\n    submit(payload: { email: string, password: string }) {\r\n      // return `true` or `false` to indicate\r\n      // validation pass / fail\r\n    },\r\n  },\r\n};\r\n```\r\n\r\nSee also: [Typing Component Emits](/guide/typescript/options-api#typing-component-emits) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n\r\nAlthough optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners from [fallthrough attributes](/guide/components/attrs#v-on-listener-inheritance), avoiding edge cases caused by DOM events manually dispatched by 3rd party code.\r\n\r\n:::tip\r\nIf a native event (e.g., `click`) is defined in the `emits` option, the listener will now only listen to component-emitted `click` events and no longer respond to native `click` events.\r\n:::\r\n\r\n## Events Validation\r\n\r\nSimilar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax.\r\n\r\nTo add validation, the event is assigned a function that receives the arguments passed to the <span class=\"options-api\">`this.$emit`</span><span class=\"composition-api\">`emit`</span> call and returns a boolean to indicate whether the event is valid or not.\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nconst emit = defineEmits({\r\n  // No validation\r\n  click: null,\r\n\r\n  // Validate submit event\r\n  submit: ({ email, password }) => {\r\n    if (email && password) {\r\n      return true;\r\n    } else {\r\n      console.warn(\"Invalid submit event payload!\");\r\n      return false;\r\n    }\r\n  },\r\n});\r\n\r\nfunction submitForm(email, password) {\r\n  emit(\"submit\", { email, password });\r\n}\r\n</script>\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  emits: {\r\n    // No validation\r\n    click: null,\r\n\r\n    // Validate submit event\r\n    submit: ({ email, password }) => {\r\n      if (email && password) {\r\n        return true;\r\n      } else {\r\n        console.warn(\"Invalid submit event payload!\");\r\n        return false;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    submitForm(email, password) {\r\n      this.$emit(\"submit\", { email, password });\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>","src/content/docs/components-in-depth/events.mdx","dc2652090182f09e","components-in-depth/fallthrough-attributes",{id:156,data:158,body:164,filePath:165,digest:166,deferredRender:16},{title:159,description:160,editUrl:16,head:161,template:18,sidebar:162,pagefind:16,draft:20},"Fallthrough Attributes","A guide to fallthrough attributes in Vue.js.",[],{hidden:20,attrs:163},{},"# Fallthrough Attributes\r\n\r\n> This page assumes you've already read the [Components Basics](/guide/essentials/component-basics). Read that first if you are new to components.\r\n\r\n## Attribute Inheritance\r\n\r\nA \"fallthrough attribute\" is an attribute or `v-on` event listener that is passed to a component, but is not explicitly declared in the receiving component's [props](./props) or [emits](./events#declaring-emitted-events). Common examples of this include `class`, `style`, and `id` attributes.\r\n\r\nWhen a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a `<MyButton>` component with the following template:\r\n\r\n```vue-html\r\n<!-- template of <MyButton> -->\r\n<button>Click Me</button>\r\n```\r\n\r\nAnd a parent using this component with:\r\n\r\n```vue-html\r\n<MyButton class=\"large\" />\r\n```\r\n\r\nThe final rendered DOM would be:\r\n\r\n```html\r\n<button class=\"large\">Click Me</button>\r\n```\r\n\r\nHere, `<MyButton>` did not declare `class` as an accepted prop. Therefore, `class` is treated as a fallthrough attribute and automatically added to `<MyButton>`'s root element.\r\n\r\n### `class` and `style` Merging\r\n\r\nIf the child component's root element already has existing `class` or `style` attributes, it will be merged with the `class` and `style` values that are inherited from the parent. Suppose we change the template of `<MyButton>` in the previous example to:\r\n\r\n```vue-html\r\n<!-- template of <MyButton> -->\r\n<button class=\"btn\">Click Me</button>\r\n```\r\n\r\nThen the final rendered DOM would now become:\r\n\r\n```html\r\n<button class=\"btn large\">Click Me</button>\r\n```\r\n\r\n### `v-on` Listener Inheritance\r\n\r\nThe same rule applies to `v-on` event listeners:\r\n\r\n```vue-html\r\n<MyButton @click=\"onClick\" />\r\n```\r\n\r\nThe `click` listener will be added to the root element of `<MyButton>`, i.e. the native `<button>` element. When the native `<button>` is clicked, it will trigger the `onClick` method of the parent component. If the native `<button>` already has a `click` listener bound with `v-on`, then both listeners will trigger.\r\n\r\n### Nested Component Inheritance\r\n\r\nIf a component renders another component as its root node, for example, we refactored `<MyButton>` to render a `<BaseButton>` as its root:\r\n\r\n```vue-html\r\n<!-- template of <MyButton/> that simply renders another component -->\r\n<BaseButton />\r\n```\r\n\r\nThen the fallthrough attributes received by `<MyButton>` will be automatically forwarded to `<BaseButton>`.\r\n\r\nNote that:\r\n\r\n1. Forwarded attributes do not include any attributes that are declared as props, or `v-on` listeners of declared events by `<MyButton>` - in other words, the declared props and listeners have been \"consumed\" by `<MyButton>`.\r\n\r\n2. Forwarded attributes may be accepted as props by `<BaseButton>`, if declared by it.\r\n\r\n## Disabling Attribute Inheritance\r\n\r\nIf you do **not** want a component to automatically inherit attributes, you can set `inheritAttrs: false` in the component's options.\r\n\r\n<div class=\"composition-api\">\r\n\r\nSince 3.3 you can also use [`defineOptions`](/api/sfc-script-setup#defineoptions) directly in `<script setup>`:\r\n\r\n```vue\r\n<script setup>\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n});\r\n// ...setup logic\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\nThe common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting the `inheritAttrs` option to `false`, you can take full control over where the fallthrough attributes should be applied.\r\n\r\nThese fallthrough attributes can be accessed directly in template expressions as `$attrs`:\r\n\r\n```vue-html\r\n<span>Fallthrough attributes: {{ $attrs }}</span>\r\n```\r\n\r\nThe `$attrs` object includes all attributes that are not declared by the component's `props` or `emits` options (e.g., `class`, `style`, `v-on` listeners, etc.).\r\n\r\nSome notes:\r\n\r\n- Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like `foo-bar` needs to be accessed as `$attrs['foo-bar']`.\r\n\r\n- A `v-on` event listener like `@click` will be exposed on the object as a function under `$attrs.onClick`.\r\n\r\nUsing our `<MyButton>` component example from the [previous section](#attribute-inheritance) - sometimes we may need to wrap the actual `<button>` element with an extra `<div>` for styling purposes:\r\n\r\n```vue-html\r\n<div class=\"btn-wrapper\">\r\n  <button class=\"btn\">Click Me</button>\r\n</div>\r\n```\r\n\r\nWe want all fallthrough attributes like `class` and `v-on` listeners to be applied to the inner `<button>`, not the outer `<div>`. We can achieve this with `inheritAttrs: false` and `v-bind=\"$attrs\"`:\r\n\r\n```vue-html\r\n<div class=\"btn-wrapper\">\r\n  <button class=\"btn\" v-bind=\"$attrs\">Click Me</button>\r\n</div>\r\n```\r\n\r\nRemember that [`v-bind` without an argument](/guide/essentials/template-syntax#dynamically-binding-multiple-attributes) binds all the properties of an object as attributes of the target element.\r\n\r\n## Attribute Inheritance on Multiple Root Nodes\r\n\r\nUnlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If `$attrs` are not bound explicitly, a runtime warning will be issued.\r\n\r\n```vue-html\r\n<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />\r\n```\r\n\r\nIf `<CustomLayout>` has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:\r\n\r\n```vue-html\r\n<header>...</header>\r\n<main>...</main>\r\n<footer>...</footer>\r\n```\r\n\r\nThe warning will be suppressed if `$attrs` is explicitly bound:\r\n\r\n```vue-html\r\n<header>...</header>\r\n<main v-bind=\"$attrs\">...</main>\r\n<footer>...</footer>\r\n```\r\n\r\n## Accessing Fallthrough Attributes in JavaScript\r\n\r\n<div class=\"composition-api\">\r\n\r\nIf needed, you can access a component's fallthrough attributes in `<script setup>` using the `useAttrs()` API:\r\n\r\n```vue\r\n<script setup>\r\nimport { useAttrs } from \"vue\";\r\n\r\nconst attrs = useAttrs();\r\n</script>\r\n```\r\n\r\nIf not using `<script setup>`, `attrs` will be exposed as a property of the `setup()` context:\r\n\r\n```js\r\nexport default {\r\n  setup(props, ctx) {\r\n    // fallthrough attributes are exposed as ctx.attrs\r\n    console.log(ctx.attrs);\r\n  },\r\n};\r\n```\r\n\r\nNote that although the `attrs` object here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can use `onUpdated()` to perform side effects with the latest `attrs` on each update.\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\nIf needed, you can access a component's fallthrough attributes via the `$attrs` instance property:\r\n\r\n```js\r\nexport default {\r\n  created() {\r\n    console.log(this.$attrs);\r\n  },\r\n};\r\n```\r\n\r\n</div>","src/content/docs/components-in-depth/fallthrough-attributes.mdx","fd7012cb4b8fbfad","components-in-depth/props",{id:167,data:169,body:175,filePath:176,digest:177,deferredRender:16},{title:170,description:171,editUrl:16,head:172,template:18,sidebar:173,pagefind:16,draft:20},"Props","A guide to component props in Vue.js.",[],{hidden:20,attrs:174},{},"import VueSchoolLinkMDX from \"../../../components/VueSchoolLinkMDX\";\r\n\r\n# Props\r\n\r\n> This page assumes you've already read the [Components Basics](/guide/essentials/component-basics). Read that first if you are new to components.\r\n\r\n<div class=\"options-api\">\r\n  <VueSchoolLinkMDX\r\n    href=\"https://vueschool.io/lessons/vue-3-reusable-components-with-props\"\r\n    title=\"Free Vue.js Props Lesson\"\r\n  />\r\n</div>\r\n\r\n## Props Declaration\r\n\r\nVue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed in [its dedicated section](/guide/components/attrs)).\r\n\r\n<div class=\"composition-api\">\r\n\r\nIn SFCs using `<script setup>`, props can be declared using the `defineProps()` macro:\r\n\r\n```vue\r\n<script setup>\r\nconst props = defineProps([\"foo\"]);\r\n\r\nconsole.log(props.foo);\r\n</script>\r\n```\r\n\r\nIn non-`<script setup>` components, props are declared using the [`props`](/api/options-state#props) option:\r\n\r\n```js\r\nexport default {\r\n  props: [\"foo\"],\r\n  setup(props) {\r\n    // setup() receives props as the first argument.\r\n    console.log(props.foo);\r\n  },\r\n};\r\n```\r\n\r\nNotice the argument passed to `defineProps()` is the same as the value provided to the `props` options: the same props options API is shared between the two declaration styles.\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\nProps are declared using the [`props`](/api/options-state#props) option:\r\n\r\n```js\r\nexport default {\r\n  props: [\"foo\"],\r\n  created() {\r\n    // props are exposed on `this`\r\n    console.log(this.foo);\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nIn addition to declaring props using an array of strings, we can also use the object syntax:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    title: String,\r\n    likes: Number,\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```js\r\n// in <script setup>\r\ndefineProps({\r\n  title: String,\r\n  likes: Number,\r\n});\r\n```\r\n\r\n```js\r\n// in non-<script setup>\r\nexport default {\r\n  props: {\r\n    title: String,\r\n    likes: Number,\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nFor each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type.\r\n\r\nThis not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details about [prop validation](#prop-validation) further down this page.\r\n\r\n<div class=\"options-api\">\r\n\r\nSee also: [Typing Component Props](/guide/typescript/options-api#typing-component-props) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\nIf you are using TypeScript with `<script setup>`, it's also possible to declare props using pure type annotations:\r\n\r\n```vue\r\n<script setup lang=\"ts\">\r\ndefineProps<{\r\n  title?: string;\r\n  likes?: number;\r\n}>();\r\n</script>\r\n```\r\n\r\nMore details: [Typing Component Props](/guide/typescript/composition-api#typing-component-props) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n## Reactive Props Destructure <sup class=\"vt-badge\" data-text=\"3.5+\" />\r\n\r\nVue's reactivity system tracks state usage based on property access. E.g. when you access `props.foo` in a computed getter or a watcher, the `foo` prop gets tracked as a dependency.\r\n\r\nSo, given the following code:\r\n\r\n```js\r\nconst { foo } = defineProps([\"foo\"]);\r\n\r\nwatchEffect(() => {\r\n  // runs only once before 3.5\r\n  // re-runs when the \"foo\" prop changes in 3.5+\r\n  console.log(foo);\r\n});\r\n```\r\n\r\nIn version 3.4 and below, `foo` is an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prepends `props.` when code in the same `<script setup>` block accesses variables destructured from `defineProps`. Therefore the code above becomes equivalent to the following:\r\n\r\n```js {5}\r\nconst props = defineProps([\"foo\"]);\r\n\r\nwatchEffect(() => {\r\n  // `foo` transformed to `props.foo` by the compiler\r\n  console.log(props.foo);\r\n});\r\n```\r\n\r\nIn addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:\r\n\r\n```ts\r\nconst { foo = \"hello\" } = defineProps<{ foo?: string }>();\r\n```\r\n\r\nIf you prefer to have more visual distinction between destructured props and normal variables in your IDE, Vue's VSCode extension provides a setting to enable inlay-hints for destructured props.\r\n\r\n### Passing Destructured Props into Functions\r\n\r\nWhen we pass a destructured prop into a function, e.g.:\r\n\r\n```js\r\nconst { foo } = defineProps([\"foo\"]);\r\n\r\nwatch(foo /* ... */);\r\n```\r\n\r\nThis will not work as expected because it is equivalent to `watch(props.foo, ...)` - we are passing a value instead of a reactive data source to `watch`. In fact, Vue's compiler will catch such cases and throw a warning.\r\n\r\nSimilar to how we can watch a normal prop with `watch(() => props.foo, ...)`, we can watch a destructured prop also by wrapping it in a getter:\r\n\r\n```js\r\nwatch(() => foo /* ... */);\r\n```\r\n\r\nIn addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:\r\n\r\n```js\r\nuseComposable(() => foo);\r\n```\r\n\r\nThe external function can call the getter (or normalize it with [toValue](/api/reactivity-utilities.html#tovalue)) when it needs to track changes of the provided prop, e.g. in a computed or watcher getter.\r\n\r\n</div>\r\n\r\n## Prop Passing Details\r\n\r\n### Prop Name Casing\r\n\r\nWe declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\ndefineProps({\r\n  greetingMessage: String,\r\n});\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    greetingMessage: String,\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<span>{{ greetingMessage }}</span>\r\n```\r\n\r\nTechnically, you can also use camelCase when passing props to a child component (except in [in-DOM templates](/guide/essentials/component-basics#in-dom-template-parsing-caveats)). However, the convention is using kebab-case in all cases to align with HTML attributes:\r\n\r\n```vue-html\r\n<MyComponent greeting-message=\"hello\" />\r\n```\r\n\r\nWe use [PascalCase for component tags](/guide/components/registration#component-name-casing) when possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions.\r\n\r\n### Static vs. Dynamic Props\r\n\r\nSo far, you've seen props passed as static values, like in:\r\n\r\n```vue-html\r\n<BlogPost title=\"My journey with Vue\" />\r\n```\r\n\r\nYou've also seen props assigned dynamically with `v-bind` or its `:` shortcut, such as in:\r\n\r\n```vue-html\r\n<!-- Dynamically assign the value of a variable -->\r\n<BlogPost :title=\"post.title\" />\r\n\r\n<!-- Dynamically assign the value of a complex expression -->\r\n<BlogPost :title=\"post.title + ' by ' + post.author.name\" />\r\n```\r\n\r\n### Passing Different Value Types\r\n\r\nIn the two examples above, we happen to pass string values, but _any_ type of value can be passed to a prop.\r\n\r\n#### Number\r\n\r\n```vue-html\r\n<!-- Even though `42` is static, we need v-bind to tell Vue that -->\r\n<!-- this is a JavaScript expression rather than a string.       -->\r\n<BlogPost :likes=\"42\" />\r\n\r\n<!-- Dynamically assign to the value of a variable. -->\r\n<BlogPost :likes=\"post.likes\" />\r\n```\r\n\r\n#### Boolean\r\n\r\n```vue-html\r\n<!-- Including the prop with no value will imply `true`. -->\r\n<BlogPost is-published />\r\n\r\n<!-- Even though `false` is static, we need v-bind to tell Vue that -->\r\n<!-- this is a JavaScript expression rather than a string.          -->\r\n<BlogPost :is-published=\"false\" />\r\n\r\n<!-- Dynamically assign to the value of a variable. -->\r\n<BlogPost :is-published=\"post.isPublished\" />\r\n```\r\n\r\n#### Array\r\n\r\n```vue-html\r\n<!-- Even though the array is static, we need v-bind to tell Vue that -->\r\n<!-- this is a JavaScript expression rather than a string.            -->\r\n<BlogPost :comment-ids=\"[234, 266, 273]\" />\r\n\r\n<!-- Dynamically assign to the value of a variable. -->\r\n<BlogPost :comment-ids=\"post.commentIds\" />\r\n```\r\n\r\n#### Object\r\n\r\n```vue-html\r\n<!-- Even though the object is static, we need v-bind to tell Vue that -->\r\n<!-- this is a JavaScript expression rather than a string.             -->\r\n<BlogPost\r\n  :author=\"{\r\n    name: 'Veronica',\r\n    company: 'Veridian Dynamics'\r\n  }\"\r\n />\r\n\r\n<!-- Dynamically assign to the value of a variable. -->\r\n<BlogPost :author=\"post.author\" />\r\n```\r\n\r\n### Binding Multiple Properties Using an Object\r\n\r\nIf you want to pass all the properties of an object as props, you can use [`v-bind` without an argument](/guide/essentials/template-syntax#dynamically-binding-multiple-attributes) (`v-bind` instead of `:prop-name`). For example, given a `post` object:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      post: {\r\n        id: 1,\r\n        title: \"My Journey with Vue\",\r\n      },\r\n    };\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst post = {\r\n  id: 1,\r\n  title: \"My Journey with Vue\",\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThe following template:\r\n\r\n```vue-html\r\n<BlogPost v-bind=\"post\" />\r\n```\r\n\r\nWill be equivalent to:\r\n\r\n```vue-html\r\n<BlogPost :id=\"post.id\" :title=\"post.title\" />\r\n```\r\n\r\n## One-Way Data Flow\r\n\r\nAll props form a **one-way-down binding** between the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand.\r\n\r\nIn addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you should **not** attempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst props = defineProps([\"foo\"]);\r\n\r\n// ❌ warning, props are readonly!\r\nprops.foo = \"bar\";\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: [\"foo\"],\r\n  created() {\r\n    // ❌ warning, props are readonly!\r\n    this.foo = \"bar\";\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThere are usually two cases where it's tempting to mutate a prop:\r\n\r\n1.  **The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.** In this case, it's best to define a local data property that uses the prop as its initial value:\r\n\r\n          <div class=\"composition-api\">\r\n\r\n    ```js\r\n    const props = defineProps([\"initialCounter\"]);\r\n\r\n    // counter only uses props.initialCounter as the initial value;\r\n    // it is disconnected from future prop updates.\r\n    const counter = ref(props.initialCounter);\r\n    ```\r\n\r\n          </div>\r\n\r\n    <div class=\"options-api\">\r\n\r\n    ```js\r\n    export default {\r\n      props: [\"initialCounter\"],\r\n      data() {\r\n        return {\r\n          // counter only uses this.initialCounter as the initial value;\r\n          // it is disconnected from future prop updates.\r\n          counter: this.initialCounter,\r\n        };\r\n      },\r\n    };\r\n    ```\r\n\r\n          </div>\r\n\r\n2.  **The prop is passed in as a raw value that needs to be transformed.** In this case, it's best to define a computed property using the prop's value:\r\n\r\n          <div class=\"composition-api\">\r\n\r\n    ```js\r\n    const props = defineProps([\"size\"]);\r\n\r\n    // computed property that auto-updates when the prop changes\r\n    const normalizedSize = computed(() => props.size.trim().toLowerCase());\r\n    ```\r\n\r\n          </div>\r\n\r\n    <div class=\"options-api\">\r\n\r\n    ```js\r\n    export default {\r\n      props: [\"size\"],\r\n      computed: {\r\n        // computed property that auto-updates when the prop changes\r\n        normalizedSize() {\r\n          return this.size.trim().toLowerCase();\r\n        },\r\n      },\r\n    };\r\n    ```\r\n\r\n          </div>\r\n\r\n### Mutating Object / Array Props\r\n\r\nWhen objects and arrays are passed as props, while the child component cannot mutate the prop binding, it **will** be able to mutate the object or array's nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations.\r\n\r\nThe main drawback of such mutations is that it allows the child component to affect parent state in a way that isn't obvious to the parent component, potentially making it more difficult to reason about the data flow in the future. As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design. In most cases, the child should [emit an event](/guide/components/events) to let the parent perform the mutation.\r\n\r\n## Prop Validation\r\n\r\nComponents can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others.\r\n\r\nTo specify prop validations, you can provide an object with validation requirements to the <span class=\"composition-api\">`defineProps()` macro</span><span class=\"options-api\">`props` option</span>, instead of an array of strings. For example:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\ndefineProps({\r\n  // Basic type check\r\n  //  (`null` and `undefined` values will allow any type)\r\n  propA: Number,\r\n  // Multiple possible types\r\n  propB: [String, Number],\r\n  // Required string\r\n  propC: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  // Required but nullable string\r\n  propD: {\r\n    type: [String, null],\r\n    required: true,\r\n  },\r\n  // Number with a default value\r\n  propE: {\r\n    type: Number,\r\n    default: 100,\r\n  },\r\n  // Object with a default value\r\n  propF: {\r\n    type: Object,\r\n    // Object or array defaults must be returned from\r\n    // a factory function. The function receives the raw\r\n    // props received by the component as the argument.\r\n    default(rawProps) {\r\n      return { message: \"hello\" };\r\n    },\r\n  },\r\n  // Custom validator function\r\n  // full props passed as 2nd argument in 3.4+\r\n  propG: {\r\n    validator(value, props) {\r\n      // The value must match one of these strings\r\n      return [\"success\", \"warning\", \"danger\"].includes(value);\r\n    },\r\n  },\r\n  // Function with a default value\r\n  propH: {\r\n    type: Function,\r\n    // Unlike object or array default, this is not a factory\r\n    // function - this is a function to serve as a default value\r\n    default() {\r\n      return \"Default function\";\r\n    },\r\n  },\r\n});\r\n```\r\n\r\n:::tip\r\nCode inside the `defineProps()` argument **cannot access other variables declared in `<script setup>`**, because the entire expression is moved to an outer function scope when compiled.\r\n:::\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    // Basic type check\r\n    //  (`null` and `undefined` values will allow any type)\r\n    propA: Number,\r\n    // Multiple possible types\r\n    propB: [String, Number],\r\n    // Required string\r\n    propC: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    // Required but nullable string\r\n    propD: {\r\n      type: [String, null],\r\n      required: true,\r\n    },\r\n    // Number with a default value\r\n    propE: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n    // Object with a default value\r\n    propF: {\r\n      type: Object,\r\n      // Object or array defaults must be returned from\r\n      // a factory function. The function receives the raw\r\n      // props received by the component as the argument.\r\n      default(rawProps) {\r\n        return { message: \"hello\" };\r\n      },\r\n    },\r\n    // Custom validator function\r\n    // full props passed as 2nd argument in 3.4+\r\n    propG: {\r\n      validator(value, props) {\r\n        // The value must match one of these strings\r\n        return [\"success\", \"warning\", \"danger\"].includes(value);\r\n      },\r\n    },\r\n    // Function with a default value\r\n    propH: {\r\n      type: Function,\r\n      // Unlike object or array default, this is not a factory\r\n      // function - this is a function to serve as a default value\r\n      default() {\r\n        return \"Default function\";\r\n      },\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nAdditional details:\r\n\r\n- All props are optional by default, unless `required: true` is specified.\r\n\r\n- An absent optional prop other than `Boolean` will have `undefined` value.\r\n\r\n- The `Boolean` absent props will be cast to `false`. You can change this by setting a `default` for it — i.e.: `default: undefined` to behave as a non-Boolean prop.\r\n\r\n- If a `default` value is specified, it will be used if the resolved prop value is `undefined` - this includes both when the prop is absent, or an explicit `undefined` value is passed.\r\n\r\nWhen prop validation fails, Vue will produce a console warning (if using the development build).\r\n\r\n<div class=\"composition-api\">\r\n\r\nIf using [Type-based props declarations](/api/sfc-script-setup#type-only-props-emit-declarations) <sup class=\"vt-badge ts\" />, Vue will try its best to compile the type annotations into equivalent runtime prop declarations. For example, `defineProps<{ msg: string }>` will be compiled into `{ msg: { type: String, required: true }}`.\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n::: tip Note\r\nNote that props are validated **before** a component instance is created, so instance properties (e.g. `data`, `computed`, etc.) will not be available inside `default` or `validator` functions.\r\n:::\r\n\r\n</div>\r\n\r\n### Runtime Type Checks\r\n\r\nThe `type` can be one of the following native constructors:\r\n\r\n- `String`\r\n- `Number`\r\n- `Boolean`\r\n- `Array`\r\n- `Object`\r\n- `Date`\r\n- `Function`\r\n- `Symbol`\r\n- `Error`\r\n\r\nIn addition, `type` can also be a custom class or constructor function and the assertion will be made with an `instanceof` check. For example, given the following class:\r\n\r\n```js\r\nclass Person {\r\n  constructor(firstName, lastName) {\r\n    this.firstName = firstName;\r\n    this.lastName = lastName;\r\n  }\r\n}\r\n```\r\n\r\nYou could use it as a prop's type:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\ndefineProps({\r\n  author: Person,\r\n});\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    author: Person,\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nVue will use `instanceof Person` to validate whether the value of the `author` prop is indeed an instance of the `Person` class.\r\n\r\n### Nullable Type\r\n\r\nIf the type is required but nullable, you can use the array syntax that includes `null`:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\ndefineProps({\r\n  id: {\r\n    type: [String, null],\r\n    required: true,\r\n  },\r\n});\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    id: {\r\n      type: [String, null],\r\n      required: true,\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nNote that if `type` is just `null` without using the array syntax, it will allow any type.\r\n\r\n## Boolean Casting\r\n\r\nProps with `Boolean` type have special casting rules to mimic the behavior of native boolean attributes. Given a `<MyComponent>` with the following declaration:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\ndefineProps({\r\n  disabled: Boolean,\r\n});\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  props: {\r\n    disabled: Boolean,\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\nThe component can be used like this:\r\n\r\n```vue-html\r\n<!-- equivalent of passing :disabled=\"true\" -->\r\n<MyComponent disabled />\r\n\r\n<!-- equivalent of passing :disabled=\"false\" -->\r\n<MyComponent />\r\n```\r\n\r\nWhen a prop is declared to allow multiple types, the casting rules for `Boolean` will also be applied. However, there is an edge when both `String` and `Boolean` are allowed - the Boolean casting rule only applies if Boolean appears before String:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\n// disabled will be casted to true\r\ndefineProps({\r\n  disabled: [Boolean, Number],\r\n});\r\n\r\n// disabled will be casted to true\r\ndefineProps({\r\n  disabled: [Boolean, String],\r\n});\r\n\r\n// disabled will be casted to true\r\ndefineProps({\r\n  disabled: [Number, Boolean],\r\n});\r\n\r\n// disabled will be parsed as an empty string (disabled=\"\")\r\ndefineProps({\r\n  disabled: [String, Boolean],\r\n});\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\n// disabled will be casted to true\r\nexport default {\r\n  props: {\r\n    disabled: [Boolean, Number]\r\n  }\r\n}\r\n\r\n// disabled will be casted to true\r\nexport default {\r\n  props: {\r\n    disabled: [Boolean, String]\r\n  }\r\n}\r\n\r\n// disabled will be casted to true\r\nexport default {\r\n  props: {\r\n    disabled: [Number, Boolean]\r\n  }\r\n}\r\n\r\n// disabled will be parsed as an empty string (disabled=\"\")\r\nexport default {\r\n  props: {\r\n    disabled: [String, Boolean]\r\n  }\r\n}\r\n```\r\n\r\n</div>","src/content/docs/components-in-depth/props.mdx","83898717ea4f1ffd","components-in-depth/registration",{id:178,data:180,body:186,filePath:187,digest:188,deferredRender:16},{title:181,description:182,editUrl:16,head:183,template:18,sidebar:184,pagefind:16,draft:20},"Component Registration","A guide to component registration in Vue.js.",[],{hidden:20,attrs:185},{},"> This page assumes you've already read the [Components Basics](/guide/essentials/component-basics). Read that first if you are new to components.\r\n\r\n[Free Vue.js Component Registration Lesson](https://vueschool.io/lessons/vue-3-global-vs-local-vue-components)\r\n\r\nA Vue component needs to be \"registered\" so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local.\r\n\r\n## Global Registration\r\n\r\nWe can make components available globally in the current [Vue application](/guide/essentials/application) using the `.component()` method:\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n\r\nconst app = createApp({});\r\n\r\napp.component(\r\n  // the registered name\r\n  \"MyComponent\",\r\n  // the implementation\r\n  {\r\n    /* ... */\r\n  }\r\n);\r\n```\r\n\r\nIf using SFCs, you will be registering the imported `.vue` files:\r\n\r\n```js\r\nimport MyComponent from \"./App.vue\";\r\n\r\napp.component(\"MyComponent\", MyComponent);\r\n```\r\n\r\nThe `.component()` method can be chained:\r\n\r\n```js\r\napp\r\n  .component(\"ComponentA\", ComponentA)\r\n  .component(\"ComponentB\", ComponentB)\r\n  .component(\"ComponentC\", ComponentC);\r\n```\r\n\r\nGlobally registered components can be used in the template of any component within this application:\r\n\r\n```vue-html\r\n<!-- this will work in any component inside the app -->\r\n<ComponentA/>\r\n<ComponentB/>\r\n<ComponentC/>\r\n```\r\n\r\nThis even applies to all subcomponents, meaning all three of these components will also be available _inside each other_.\r\n\r\n## Local Registration\r\n\r\nWhile convenient, global registration has a few drawbacks:\r\n\r\n1. Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.\r\n\r\n2. Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables.\r\n\r\nLocal registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly.\r\n\r\n<div class=\"composition-api\">\r\n\r\nWhen using SFC with `<script setup>`, imported components can be locally used without registration:\r\n\r\n```vue\r\n<script setup>\r\nimport ComponentA from \"./ComponentA.vue\";\r\n</script>\r\n\r\n<template>\r\n  <ComponentA />\r\n</template>\r\n```\r\n\r\nIn non-`<script setup>`, you will need to use the `components` option:\r\n\r\n```js\r\nimport ComponentA from \"./ComponentA.js\";\r\n\r\nexport default {\r\n  components: {\r\n    ComponentA,\r\n  },\r\n  setup() {\r\n    // ...\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\nLocal registration is done using the `components` option:\r\n\r\n```vue\r\n<script>\r\nimport ComponentA from \"./ComponentA.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    ComponentA,\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <ComponentA />\r\n</template>\r\n```\r\n\r\n</div>\r\n\r\nFor each property in the `components` object, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:\r\n\r\n```js\r\nexport default {\r\n  components: {\r\n    ComponentA: ComponentA,\r\n  },\r\n  // ...\r\n};\r\n```\r\n\r\nNote that **locally registered components are _not_ also available in descendant components**. In this case, `ComponentA` will be made available to the current component only, not any of its child or descendant components.\r\n\r\n## Component Name Casing\r\n\r\nThroughout the guide, we are using PascalCase names when registering components. This is because:\r\n\r\n1. PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.\r\n\r\n2. `<PascalCase />` makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components).\r\n\r\nThis is the recommended style when working with SFC or string templates. However, as discussed in [in-DOM Template Parsing Caveats](/guide/essentials/component-basics#in-dom-template-parsing-caveats), PascalCase tags are not usable in in-DOM templates.\r\n\r\nLuckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered as `MyComponent` can be referenced inside a Vue template (or inside an HTML element rendered by Vue) via both `<MyComponent>` and `<my-component>`. This allows us to use the same JavaScript component registration code regardless of template source.","src/content/docs/components-in-depth/registration.mdx","93b966dae69100bd","essentials/class-and-style-bindings",{id:189,data:191,body:197,filePath:198,digest:199,deferredRender:16},{title:192,description:193,editUrl:16,head:194,template:18,sidebar:195,pagefind:16,draft:20},"Class and Style Bindings","A guide to Vue.js class and style bindings.",[],{hidden:20,attrs:196},{},"A common need for data binding is manipulating an element's class list and inline styles. Since `class` and `style` are both attributes, we can use `v-bind` to assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements when `v-bind` is used with `class` and `style`. In addition to strings, the expressions can also evaluate to objects or arrays.\r\n\r\n## Binding HTML Classes\r\n\r\n<div class=\"options-api\">\r\n  [Free Vue.js Dynamic CSS Classes\r\n  Lesson](https://vueschool.io/lessons/dynamic-css-classes-with-vue-3)\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n  [Free Vue.js Dynamic CSS Classes\r\n  Lesson](https://vueschool.io/lessons/vue-fundamentals-capi-dynamic-css-classes-with-vue)\r\n</div>\r\n\r\n### Binding to Objects\r\n\r\nWe can pass an object to `:class` (short for `v-bind:class`) to dynamically toggle classes:\r\n\r\n```vue-html\r\n<div :class=\"{ active: isActive }\"></div>\r\n```\r\n\r\nThe above syntax means the presence of the `active` class will be determined by the [truthiness](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) of the data property `isActive`.\r\n\r\nYou can have multiple classes toggled by having more fields in the object. In addition, the `:class` directive can also co-exist with the plain `class` attribute. So given the following state:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst isActive = ref(true);\r\nconst hasError = ref(false);\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    isActive: true,\r\n    hasError: false\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\nAnd the following template:\r\n\r\n```vue-html\r\n<div\r\n  class=\"static\"\r\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\r\n></div>\r\n```\r\n\r\nIt will render:\r\n\r\n```vue-html\r\n<div class=\"static active\"></div>\r\n```\r\n\r\nWhen `isActive` or `hasError` changes, the class list will be updated accordingly. For example, if `hasError` becomes `true`, the class list will become `\"static active text-danger\"`.\r\n\r\nThe bound object doesn't have to be inline:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst classObject = reactive({\r\n  active: true,\r\n  \"text-danger\": false,\r\n});\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    classObject: {\r\n      active: true,\r\n      'text-danger': false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div :class=\"classObject\"></div>\r\n```\r\n\r\nThis will render:\r\n\r\n```vue-html\r\n<div class=\"active\"></div>\r\n```\r\n\r\nWe can also bind to a [computed property](./computed) that returns an object. This is a common and powerful pattern:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst isActive = ref(true);\r\nconst error = ref(null);\r\n\r\nconst classObject = computed(() => ({\r\n  active: isActive.value && !error.value,\r\n  \"text-danger\": error.value && error.value.type === \"fatal\",\r\n}));\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    isActive: true,\r\n    error: null\r\n  }\r\n},\r\ncomputed: {\r\n  classObject() {\r\n    return {\r\n      active: this.isActive && !this.error,\r\n      'text-danger': this.error && this.error.type === 'fatal'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div :class=\"classObject\"></div>\r\n```\r\n\r\n### Binding to Arrays\r\n\r\nWe can bind `:class` to an array to apply a list of classes:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst activeClass = ref(\"active\");\r\nconst errorClass = ref(\"text-danger\");\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    activeClass: 'active',\r\n    errorClass: 'text-danger'\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div :class=\"[activeClass, errorClass]\"></div>\r\n```\r\n\r\nWhich will render:\r\n\r\n```vue-html\r\n<div class=\"active text-danger\"></div>\r\n```\r\n\r\nIf you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:\r\n\r\n```vue-html\r\n<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>\r\n```\r\n\r\nThis will always apply `errorClass`, but `activeClass` will only be applied when `isActive` is truthy.\r\n\r\nHowever, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:\r\n\r\n```vue-html\r\n<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>\r\n```\r\n\r\n### With Components\r\n\r\n> This section assumes knowledge of [Components](/guide/essentials/component-basics). Feel free to skip it and come back later.\r\n\r\nWhen you use the `class` attribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it.\r\n\r\nFor example, if we have a component named `MyComponent` with the following template:\r\n\r\n```vue-html\r\n<!-- child component template -->\r\n<p class=\"foo bar\">Hi!</p>\r\n```\r\n\r\nThen add some classes when using it:\r\n\r\n```vue-html\r\n<!-- when using the component -->\r\n<MyComponent class=\"baz boo\" />\r\n```\r\n\r\nThe rendered HTML will be:\r\n\r\n```vue-html\r\n<p class=\"foo bar baz boo\">Hi!</p>\r\n```\r\n\r\nThe same is true for class bindings:\r\n\r\n```vue-html\r\n<MyComponent :class=\"{ active: isActive }\" />\r\n```\r\n\r\nWhen `isActive` is truthy, the rendered HTML will be:\r\n\r\n```vue-html\r\n<p class=\"foo bar active\">Hi!</p>\r\n```\r\n\r\nIf your component has multiple root elements, you would need to define which element will receive this class. You can do this using the `$attrs` component property:\r\n\r\n```vue-html\r\n<!-- MyComponent template using $attrs -->\r\n<p :class=\"$attrs.class\">Hi!</p>\r\n<span>This is a child component</span>\r\n```\r\n\r\n```vue-html\r\n<MyComponent class=\"baz\" />\r\n```\r\n\r\nWill render:\r\n\r\n```html\r\n<p class=\"baz\">Hi!</p>\r\n<span>This is a child component</span>\r\n```\r\n\r\nYou can learn more about component attribute inheritance in [Fallthrough Attributes](/guide/components/attrs) section.\r\n\r\n## Binding Inline Styles\r\n\r\n### Binding to Objects\r\n\r\n`:style` supports binding to JavaScript object values - it corresponds to an [HTML element's `style` property](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style):\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst activeColor = ref(\"red\");\r\nconst fontSize = ref(30);\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    activeColor: 'red',\r\n    fontSize: 30\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div :style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\r\n```\r\n\r\nAlthough camelCase keys are recommended, `:style` also supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:\r\n\r\n```vue-html\r\n<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>\r\n```\r\n\r\nIt is often a good idea to bind to a style object directly so that the template is cleaner:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst styleObject = reactive({\r\n  color: \"red\",\r\n  fontSize: \"30px\",\r\n});\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    styleObject: {\r\n      color: 'red',\r\n      fontSize: '13px'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div :style=\"styleObject\"></div>\r\n```\r\n\r\nAgain, object style binding is often used in conjunction with computed properties that return objects.\r\n\r\n`:style` directives can also coexist with regular style attributes, just like `:class`.\r\n\r\nTemplate:\r\n\r\n```vue-html\r\n<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>\r\n```\r\n\r\nIt will render:\r\n\r\n```vue-html\r\n<h1 style=\"color: red; font-size: 1em;\">hello</h1>\r\n```\r\n\r\n### Binding to Arrays\r\n\r\nWe can bind `:style` to an array of multiple style objects. These objects will be merged and applied to the same element:\r\n\r\n```vue-html\r\n<div :style=\"[baseStyles, overridingStyles]\"></div>\r\n```\r\n\r\n### Auto-prefixing\r\n\r\nWhen you use a CSS property that requires a [vendor prefix](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix) in `:style`, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported.\r\n\r\n### Multiple Values\r\n\r\nYou can provide an array of multiple (prefixed) values to a style property, for example:\r\n\r\n```vue-html\r\n<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>\r\n```\r\n\r\nThis will only render the last value in the array which the browser supports. In this example, it will render `display: flex` for browsers that support the unprefixed version of flexbox.","src/content/docs/essentials/class-and-style-bindings.mdx","080b1103d2388e0c","essentials/computed-properties",{id:200,data:202,body:208,filePath:209,digest:210,deferredRender:16},{title:203,description:204,editUrl:16,head:205,template:18,sidebar:206,pagefind:16,draft:20},"Computed Properties","A guide to Vue.js computed properties.",[],{hidden:20,attrs:207},{},"Complex calculations in template expressions can make them harder to read and maintain. This is where computed properties help us create reusable data calculations.\r\n\r\n<div class=\"options-api\">\r\n  <a href=\"https://vueschool.io/lessons/computed-properties-in-vue-3\">\r\n    Free Vue.js Computed Properties Lesson\r\n  </a>\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n  <a href=\"https://vueschool.io/lessons/vue-fundamentals-capi-computed-properties-in-vue-with-the-composition-api\">\r\n    Free Vue.js Computed Properties Lesson\r\n  </a>\r\n</div>\r\n\r\n## Basic Example\r\n\r\nIn-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      author: {\r\n        name: \"John Doe\",\r\n        books: [\r\n          \"Vue 2 - Advanced Guide\",\r\n          \"Vue 3 - Basic Guide\",\r\n          \"Vue 4 - The Mystery\",\r\n        ],\r\n      },\r\n    };\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst author = reactive({\r\n  name: \"John Doe\",\r\n  books: [\r\n    \"Vue 2 - Advanced Guide\",\r\n    \"Vue 3 - Basic Guide\",\r\n    \"Vue 4 - The Mystery\",\r\n  ],\r\n});\r\n```\r\n\r\n</div>\r\n\r\nAnd we want to display different messages depending on if `author` already has some books or not:\r\n\r\n```vue-html\r\n<p>Has published books:</p>\r\n<span>{{ author.books.length > 0 ? 'Yes' : 'No' }}</span>\r\n```\r\n\r\nAt this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending on `author.books`. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once.\r\n\r\nThat's why for complex logic that includes reactive data, it is recommended to use a **computed property**. Here's the same example, refactored:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      author: {\r\n        name: \"John Doe\",\r\n        books: [\r\n          \"Vue 2 - Advanced Guide\",\r\n          \"Vue 3 - Basic Guide\",\r\n          \"Vue 4 - The Mystery\",\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    // a computed getter\r\n    publishedBooksMessage() {\r\n      // `this` points to the component instance\r\n      return this.author.books.length > 0 ? \"Yes\" : \"No\";\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n```vue-html\r\n<p>Has published books:</p>\r\n<span>{{ publishedBooksMessage }}</span>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNqFkN1KxDAQhV/l0JsqaFfUq1IquwiKsF6JINaLbDNui20S8rO4lL676c82eCFCIDOZMzkzXxetlUoOjqI0ykypa2XzQtC3ktqC0ydzjUVXCIAzy87OpxjQZJ0WpwxgzlZSp+EBEKylFPGTrATuJcUXobST8sukeA8vQPzqCNe4xJofmCiJ48HV/FfbLLrxog0zdfmn4tYrXirC9mgs6WMcBB+nsJ+C8erHH0rZKmeJL0sot2tqUxHfDONuyRi2p4BggWCr2iQTgGTcLGlI7G2FHFe4Q/xGJoYn8SznQSbTQviTrRboPrHUqoZZ8hmQqfyRmTDFTC1bqalsFBN5183o/3NG33uvoWUwXYyi/gdTEpwK)\r\n\r\nHere we have declared a computed property `publishedBooksMessage`.\r\n\r\nTry to change the value of the `books` array in the application `data` and you will see how `publishedBooksMessage` is changing accordingly.\r\n\r\nYou can data-bind to computed properties in templates just like a normal property. Vue is aware that `this.publishedBooksMessage` depends on `this.author.books`, so it will update any bindings that depend on `this.publishedBooksMessage` when `this.author.books` changes.\r\n\r\nSee also: [Typing Computed Properties](/guide/typescript/options-api#typing-computed-properties) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { reactive, computed } from \"vue\";\r\n\r\nconst author = reactive({\r\n  name: \"John Doe\",\r\n  books: [\r\n    \"Vue 2 - Advanced Guide\",\r\n    \"Vue 3 - Basic Guide\",\r\n    \"Vue 4 - The Mystery\",\r\n  ],\r\n});\r\n\r\n// a computed ref\r\nconst publishedBooksMessage = computed(() => {\r\n  return author.books.length > 0 ? \"Yes\" : \"No\";\r\n});\r\n</script>\r\n\r\n<template>\r\n  <p>Has published books:</p>\r\n  <span>{{ publishedBooksMessage }}</span>\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNp1kE9Lw0AQxb/KI5dtoTainkoaaREUoZ5EEONhm0ybYLO77J9CCfnuzta0vdjbzr6Zeb95XbIwZroPlMySzJW2MR6OfDB5oZrWaOvRwZIsfbOnCUrdmuCpQo+N1S0ET4pCFarUynnI4GttMT9PjLpCAUq2NIN41bXCkyYxiZ9rrX/cDF/xDYiPQLjDDRbVXqqSHZ5DUw2tg3zP8lK6pvxHe2DtvSasDs6TPTAT8F2ofhzh0hTygm5pc+I1Yb1rXE3VMsKsyDm5JcY/9Y5GY8xzHI+wnIpVw4nTI/10R2rra+S4xSPEJzkBvvNNs310ztK/RDlLLjy1Zic9cQVkJn+R7gIwxJGlMXiWnZEq77orhH3Pq2NH9DjvTfpfSBSbmA==)\r\n\r\nHere we have declared a computed property `publishedBooksMessage`. The `computed()` function expects to be passed a [getter function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#description), and the returned value is a **computed ref**. Similar to normal refs, you can access the computed result as `publishedBooksMessage.value`. Computed refs are also auto-unwrapped in templates so you can reference them without `.value` in template expressions.\r\n\r\nA computed property automatically tracks its reactive dependencies. Vue is aware that the computation of `publishedBooksMessage` depends on `author.books`, so it will update any bindings that depend on `publishedBooksMessage` when `author.books` changes.\r\n\r\nSee also: [Typing Computed](/guide/typescript/composition-api#typing-computed) <sup class=\"vt-badge ts\" />\r\n\r\n</div>\r\n\r\n## Computed Caching vs. Methods\r\n\r\nYou may have noticed we can achieve the same result by invoking a method in the expression:\r\n\r\n```vue-html\r\n<p>{{ calculateBooksMessage() }}</p>\r\n```\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\n// in component\r\nmethods: {\r\n  calculateBooksMessage() {\r\n    return this.author.books.length > 0 ? 'Yes' : 'No'\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\n// in component\r\nfunction calculateBooksMessage() {\r\n  return author.books.length > 0 ? \"Yes\" : \"No\";\r\n}\r\n```\r\n\r\n</div>\r\n\r\nInstead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is that **computed properties are cached based on their reactive dependencies.** A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long as `author.books` has not changed, multiple access to `publishedBooksMessage` will immediately return the previously computed result without having to run the getter function again.\r\n\r\nThis also means the following computed property will never update, because `Date.now()` is not a reactive dependency:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ncomputed: {\r\n  now() {\r\n    return Date.now()\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst now = computed(() => Date.now());\r\n```\r\n\r\n</div>\r\n\r\nIn comparison, a method invocation will **always** run the function whenever a re-render happens.\r\n\r\nWhy do we need caching? Imagine we have an expensive computed property `list`, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend on `list`. Without caching, we would be executing `list`’s getter many more times than necessary! In cases where you do not want caching, use a method call instead.\r\n\r\n## Writable Computed\r\n\r\nComputed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      firstName: \"John\",\r\n      lastName: \"Doe\",\r\n    };\r\n  },\r\n  computed: {\r\n    fullName: {\r\n      // getter\r\n      get() {\r\n        return this.firstName + \" \" + this.lastName;\r\n      },\r\n      // setter\r\n      set(newValue) {\r\n        // Note: we are using destructuring assignment syntax here.\r\n        [this.firstName, this.lastName] = newValue.split(\" \");\r\n      },\r\n    },\r\n  },\r\n};\r\n```\r\n\r\nNow when you run `this.fullName = 'John Doe'`, the setter will be invoked and `this.firstName` and `this.lastName` will be updated accordingly.\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\n\r\nconst firstName = ref(\"John\");\r\nconst lastName = ref(\"Doe\");\r\n\r\nconst fullName = computed({\r\n  // getter\r\n  get() {\r\n    return firstName.value + \" \" + lastName.value;\r\n  },\r\n  // setter\r\n  set(newValue) {\r\n    // Note: we are using destructuring assignment syntax here.\r\n    [firstName.value, lastName.value] = newValue.split(\" \");\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\nNow when you run `fullName.value = 'John Doe'`, the setter will be invoked and `firstName` and `lastName` will be updated accordingly.\r\n\r\n</div>\r\n\r\n## Getting the Previous Value\r\n\r\n- Only supported in 3.4+\r\n\r\nIn case you need it, you can get the previous value returned by the computed property accessing\r\nthe first argument of the getter:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 2,\r\n    };\r\n  },\r\n  computed: {\r\n    // This computed will return the value of count when it's less or equal to 3.\r\n    // When count is >=4, the last value that fulfilled our condition will be returned\r\n    // instead until count is less or equal to 3\r\n    alwaysSmall(_, previous) {\r\n      if (this.count <= 3) {\r\n        return this.count;\r\n      }\r\n\r\n      return previous;\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\n\r\nconst count = ref(2);\r\n\r\n// This computed will return the value of count when it's less or equal to 3.\r\n// When count is >=4, the last value that fulfilled our condition will be returned\r\n// instead until count is less or equal to 3\r\nconst alwaysSmall = computed((previous) => {\r\n  if (count.value <= 3) {\r\n    return count.value;\r\n  }\r\n\r\n  return previous;\r\n});\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\nIn case you're using a writable computed:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 2,\r\n    };\r\n  },\r\n  computed: {\r\n    alwaysSmall: {\r\n      get(previous) {\r\n        if (this.count <= 3) {\r\n          return this.count;\r\n        }\r\n\r\n        return previous;\r\n      },\r\n      set(newValue) {\r\n        this.count = newValue * 2;\r\n      },\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref, computed } from \"vue\";\r\n\r\nconst count = ref(2);\r\n\r\nconst alwaysSmall = computed({\r\n  get(previous) {\r\n    if (count.value <= 3) {\r\n      return count.value;\r\n    }\r\n\r\n    return previous;\r\n  },\r\n  set(newValue) {\r\n    count.value = newValue * 2;\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\n## Best Practices\r\n\r\n### Getters should be side-effect free\r\n\r\nIt is important to remember that computed getter functions should only perform pure computation and be free of side effects. For example, **don't mutate other state, make async requests, or mutate the DOM inside a computed getter!** Think of a computed property as declaratively describing how to derive a value based on other values - its only responsibility should be computing and returning that value. Later in the guide we will discuss how we can perform side effects in reaction to state changes with [watchers](./watchers).\r\n\r\n### Avoid mutating computed value\r\n\r\nThe returned value from a computed property is derived state. Think of it as a temporary snapshot - every time the source state changes, a new snapshot is created. It does not make sense to mutate a snapshot, so a computed return value should be treated as read-only and never be mutated - instead, update the source state it depends on to trigger new computations.","src/content/docs/essentials/computed-properties.mdx","0ab5e1c0b0dd2a0e","essentials/creating-an-application",{id:211,data:213,body:219,filePath:220,digest:221,deferredRender:16},{title:214,description:215,editUrl:16,head:216,template:18,sidebar:217,pagefind:16,draft:20},"Creating an Application","A guide to creating a new Vue.js application.",[],{hidden:20,attrs:218},{},"## The application instance\r\n\r\nEvery Vue application starts by creating a new **application instance** with the [`createApp`](/api/application#createapp) function:\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n\r\nconst app = createApp({\r\n  /* root component options */\r\n});\r\n```\r\n\r\n## The Root Component\r\n\r\nThe object we are passing into `createApp` is in fact a component. Every app requires a \"root component\" that can contain other components as its children.\r\n\r\nIf you are using Single-File Components, we typically import the root component from another file:\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n// import the root component App from a single-file component.\r\nimport App from \"./App.vue\";\r\n\r\nconst app = createApp(App);\r\n```\r\n\r\nWhile many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:\r\n\r\n```\r\nApp (root component)\r\n├─ TodoList\r\n│  └─ TodoItem\r\n│     ├─ TodoDeleteButton\r\n│     └─ TodoEditButton\r\n└─ TodoFooter\r\n   ├─ TodoClearButton\r\n   └─ TodoStatistics\r\n```\r\n\r\nIn later sections of the guide, we will discuss how to define and compose multiple components together. Before that, we will focus on what happens inside a single component.\r\n\r\n## Mounting the App\r\n\r\nAn application instance won't render anything until its `.mount()` method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:\r\n\r\n```html\r\n<div id=\"app\"></div>\r\n```\r\n\r\n```js\r\napp.mount(\"#app\");\r\n```\r\n\r\nThe content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app.\r\n\r\nThe `.mount()` method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance.\r\n\r\n### In-DOM Root Component Template\r\n\r\nThe template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:\r\n\r\n```html\r\n<div id=\"app\">\r\n  <button @click=\"count++\">{{ count }}</button>\r\n</div>\r\n```\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n\r\nconst app = createApp({\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    };\r\n  },\r\n});\r\n\r\napp.mount(\"#app\");\r\n```\r\n\r\nVue will automatically use the container's `innerHTML` as the template if the root component does not already have a `template` option.\r\n\r\nIn-DOM templates are often used in applications that are [using Vue without a build step](/guide/quick-start.html#using-vue-from-cdn). They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server.\r\n\r\n## App Configurations\r\n\r\nThe application instance exposes a `.config` object that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:\r\n\r\n```js\r\napp.config.errorHandler = (err) => {\r\n  /* handle error */\r\n};\r\n```\r\n\r\nThe application instance also provides a few methods for registering app-scoped assets. For example, registering a component:\r\n\r\n```js\r\napp.component(\"TodoDeleteButton\", TodoDeleteButton);\r\n```\r\n\r\nThis makes the `TodoDeleteButton` available for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in its [API reference](/api/application).\r\n\r\nMake sure to apply all app configurations before mounting the app!\r\n\r\n## Multiple application instances\r\n\r\nYou are not limited to a single application instance on the same page. The `createApp` API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:\r\n\r\n```js\r\nconst app1 = createApp({\r\n  /* ... */\r\n});\r\napp1.mount(\"#container-1\");\r\n\r\nconst app2 = createApp({\r\n  /* ... */\r\n});\r\napp2.mount(\"#container-2\");\r\n```\r\n\r\nIf you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.","src/content/docs/essentials/creating-an-application.mdx","de19fd24d5b3ad03","essentials/reactivity-fundamentals",{id:222,data:224,body:230,filePath:231,digest:232,deferredRender:16},{title:225,description:226,editUrl:16,head:227,template:18,sidebar:228,pagefind:16,draft:20},"Reactivity Fundamentals","A guide to Vue.js reactivity fundamentals.",[],{hidden:20,attrs:229},{},"---\r\n\r\n## outline: deep\r\n\r\n# Reactivity Fundamentals\r\n\r\n:::tip API Preference\r\nThis page and many other chapters later in the guide contain different content for the Options API and the Composition API. Your current preference is <span class=\"options-api\">Options API</span><span class=\"composition-api\">Composition API</span>. You can toggle between the API styles using the \"API Preference\" switches at the top of the left sidebar.\r\n:::\r\n\r\n<div class=\"options-api\">\r\n\r\n## Declaring Reactive State\r\n\r\nWith the Options API, we use the `data` option to declare reactive state of a component. The option value should be a function that returns an object. Vue will call the function when creating a new component instance, and wrap the returned object in its reactivity system. Any top-level properties of this object are proxied on the component instance (`this` in methods and lifecycle hooks):\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 1,\r\n    };\r\n  },\r\n\r\n  // `mounted` is a lifecycle hook which we will explain later\r\n  mounted() {\r\n    // `this` refers to the component instance.\r\n    console.log(this.count); // => 1\r\n\r\n    // data can be mutated as well\r\n    this.count = 2;\r\n  },\r\n};\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNpFUNFqhDAQ/JXBpzsoHu2j3B2U/oYPpnGtoetGkrW2iP/eRFsPApthd2Zndilex7H8mqioimu0wY16r4W+Rx8ULXVmYsVSC9AaNafz/gcC6RTkHwHWT6IVnne85rI+1ZLr5YJmyG1qG7gIA3Yd2R/LhN77T8y9sz1mwuyYkXazcQI2SiHz/7iP3VlQexeb5KKjEKEe2lPyMIxeSBROohqxVO4E6yV6ppL9xykTy83tOQvd7tnzoZtDwhrBO2GYNFloYWLyxrzPPOi44WWLWUt618txvASUhhRCKSHgbZt2scKy7HfCujGOqWL9BVfOgyI=)\r\n\r\nThese instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the `data` function. Where necessary, use `null`, `undefined` or some other placeholder value for properties where the desired value isn't yet available.\r\n\r\nIt is possible to add a new property directly to `this` without including it in `data`. However, properties added this way will not be able to trigger reactive updates.\r\n\r\nVue uses a `$` prefix when exposing its own built-in APIs via the component instance. It also reserves the prefix `_` for internal properties. You should avoid using names for top-level `data` properties that start with either of these characters.\r\n\r\n### Reactive Proxy vs. Original\r\n\r\nIn Vue 3, data is made reactive by leveraging [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy). Users coming from Vue 2 should be aware of the following edge case:\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      someObject: {},\r\n    };\r\n  },\r\n  mounted() {\r\n    const newObject = {};\r\n    this.someObject = newObject;\r\n\r\n    console.log(newObject === this.someObject); // false\r\n  },\r\n};\r\n```\r\n\r\nWhen you access `this.someObject` after assigning it, the value is a reactive proxy of the original `newObject`. **Unlike in Vue 2, the original `newObject` is left intact and will not be made reactive: make sure to always access reactive state as a property of `this`.**\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n## Declaring Reactive State\r\n\r\n### `ref()`\r\n\r\nIn Composition API, the recommended way to declare reactive state is using the [`ref()`](/api/reactivity-core#ref) function:\r\n\r\n```js\r\nimport { ref } from \"vue\";\r\n\r\nconst count = ref(0);\r\n```\r\n\r\n`ref()` takes the argument and returns it wrapped within a ref object with a `.value` property:\r\n\r\n```js\r\nconst count = ref(0);\r\n\r\nconsole.log(count); // { value: 0 }\r\nconsole.log(count.value); // 0\r\n\r\ncount.value++;\r\nconsole.log(count.value); // 1\r\n```\r\n\r\n> See also: [Typing Refs](/guide/typescript/composition-api#typing-ref) <sup class=\"vt-badge ts\" />\r\n\r\nTo access refs in a component's template, declare and return them from a component's `setup()` function:\r\n\r\n```js\r\nimport { ref } from \"vue\";\r\n\r\nexport default {\r\n  // `setup` is a special hook dedicated for the Composition API.\r\n  setup() {\r\n    const count = ref(0);\r\n\r\n    // expose the ref to the template\r\n    return {\r\n      count,\r\n    };\r\n  },\r\n};\r\n```\r\n\r\n```vue-html\r\n<div>{{ count }}</div>\r\n```\r\n\r\nNotice that we did **not** need to append `.value` when using the ref in the template. For convenience, refs are automatically unwrapped when used inside templates (with a few [caveats](#caveat-when-unwrapping-in-templates)).\r\n\r\nYou can also mutate a ref directly in event handlers:\r\n\r\n```vue-html\r\n<button @click=\"count++\">\r\n  {{ count }}\r\n</button>\r\n```\r\n\r\nFor more complex logic, we can declare functions that mutate refs in the same scope and expose them as methods alongside the state:\r\n\r\n```js\r\nimport { ref } from \"vue\";\r\n\r\nexport default {\r\n  setup() {\r\n    const count = ref(0);\r\n\r\n    function increment() {\r\n      // .value is needed in JavaScript\r\n      count.value++;\r\n    }\r\n\r\n    // don't forget to expose the function as well.\r\n    return {\r\n      count,\r\n      increment,\r\n    };\r\n  },\r\n};\r\n```\r\n\r\nExposed methods can then be used as event handlers:\r\n\r\n```vue-html\r\n<button @click=\"increment\">\r\n  {{ count }}\r\n</button>\r\n```\r\n\r\nHere's the example live on [Codepen](https://codepen.io/vuejs-examples/pen/WNYbaqo), without using any build tools.\r\n\r\n### `<script setup>`\r\n\r\nManually exposing state and methods via `setup()` can be verbose. Luckily, it can be avoided when using [Single-File Components (SFCs)](/guide/scaling-up/sfc). We can simplify the usage with `<script setup>`:\r\n\r\n```vue\r\n<script setup>\r\nimport { ref } from \"vue\";\r\n\r\nconst count = ref(0);\r\n\r\nfunction increment() {\r\n  count.value++;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <button @click=\"increment\">\r\n    {{ count }}\r\n  </button>\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNo9jUEKgzAQRa8yZKMiaNcllvYe2dgwQqiZhDhxE3L3jrW4/DPvv1/UK8Zhz6juSm82uciwIef4MOR8DImhQMIFKiwpeGgEbQwZsoE2BhsyMUwH0d66475ksuwCgSOb0CNx20ExBCc77POase8NVUN6PBdlSwKjj+vMKAlAvzOzWJ52dfYzGXXpjPoBAKX856uopDGeFfnq8XKp+gWq4FAi)\r\n\r\nTop-level imports, variables and functions declared in `<script setup>` are automatically usable in the template of the same component. Think of the template as a JavaScript function declared in the same scope - it naturally has access to everything declared alongside it.\r\n\r\n:::tip\r\nFor the rest of the guide, we will be primarily using SFC + `<script setup>` syntax for the Composition API code examples, as that is the most common usage for Vue developers.\r\n\r\nIf you are not using SFC, you can still use Composition API with the [`setup()`](/api/composition-api-setup) option.\r\n:::\r\n\r\n### Why Refs?\r\n\r\nYou might be wondering why we need refs with the `.value` instead of plain variables. To explain that, we will need to briefly discuss how Vue's reactivity system works.\r\n\r\nWhen you use a ref in a template, and change the ref's value later, Vue automatically detects the change and updates the DOM accordingly. This is made possible with a dependency-tracking based reactivity system. When a component is rendered for the first time, Vue **tracks** every ref that was used during the render. Later on, when a ref is mutated, it will **trigger** a re-render for components that are tracking it.\r\n\r\nIn standard JavaScript, there is no way to detect the access or mutation of plain variables. However, we can intercept the get and set operations of an object's properties using getter and setter methods.\r\n\r\nThe `.value` property gives Vue the opportunity to detect when a ref has been accessed or mutated. Under the hood, Vue performs the tracking in its getter, and performs triggering in its setter. Conceptually, you can think of a ref as an object that looks like this:\r\n\r\n```js\r\n// pseudo code, not actual implementation\r\nconst myRef = {\r\n  _value: 0,\r\n  get value() {\r\n    track();\r\n    return this._value;\r\n  },\r\n  set value(newValue) {\r\n    this._value = newValue;\r\n    trigger();\r\n  },\r\n};\r\n```\r\n\r\nAnother nice trait of refs is that unlike plain variables, you can pass refs into functions while retaining access to the latest value and the reactivity connection. This is particularly useful when refactoring complex logic into reusable code.\r\n\r\nThe reactivity system is discussed in more details in the [Reactivity in Depth](/guide/extras/reactivity-in-depth) section.\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n## Declaring Methods\r\n\r\n[Free Vue.js Methods Lesson](https://vueschool.io/lessons/methods-in-vue-3)\r\n\r\nTo add methods to a component instance we use the `methods` option. This should be an object containing the desired methods:\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    };\r\n  },\r\n  methods: {\r\n    increment() {\r\n      this.count++;\r\n    },\r\n  },\r\n  mounted() {\r\n    // methods can be called in lifecycle hooks, or other methods!\r\n    this.increment();\r\n  },\r\n};\r\n```\r\n\r\nVue automatically binds the `this` value for `methods` so that it always refers to the component instance. This ensures that a method retains the correct `this` value if it's used as an event listener or callback. You should avoid using arrow functions when defining `methods`, as that prevents Vue from binding the appropriate `this` value:\r\n\r\n```js\r\nexport default {\r\n  methods: {\r\n    increment: () => {\r\n      // BAD: no `this` access here!\r\n    },\r\n  },\r\n};\r\n```\r\n\r\nJust like all other properties of the component instance, the `methods` are accessible from within the component's template. Inside a template they are most commonly used as event listeners:\r\n\r\n```vue-html\r\n<button @click=\"increment\">{{ count }}</button>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNplj9EKwyAMRX8l+LSx0e65uLL9hy+dZlTWqtg4BuK/z1baDgZicsPJgUR2d656B2QN45P02lErDH6c9QQKn10YCKIwAKqj7nAsPYBHCt6sCUDaYKiBS8lpLuk8/yNSb9XUrKg20uOIhnYXAPV6qhbF6fRvmOeodn6hfzwLKkx+vN5OyIFwdENHmBMAfwQia+AmBy1fV8E2gWBtjOUASInXBcxLvN4MLH0BCe1i4Q==)\r\n\r\nIn the example above, the method `increment` will be called when the `<button>` is clicked.\r\n\r\n</div>\r\n\r\n### Deep Reactivity\r\n\r\n<div class=\"options-api\">\r\n\r\nIn Vue, state is deeply reactive by default. This means you can expect changes to be detected even when you mutate nested objects or arrays:\r\n\r\n```js\r\nexport default {\r\n  data() {\r\n    return {\r\n      obj: {\r\n        nested: { count: 0 },\r\n        arr: [\"foo\", \"bar\"],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    mutateDeeply() {\r\n      // these will work as expected.\r\n      this.obj.nested.count++;\r\n      this.obj.arr.push(\"baz\");\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\nRefs can hold any value type, including deeply nested objects, arrays, or JavaScript built-in data structures like `Map`.\r\n\r\nA ref will make its value deeply reactive. This means you can expect changes to be detected even when you mutate nested objects or arrays:\r\n\r\n```js\r\nimport { ref } from \"vue\";\r\n\r\nconst obj = ref({\r\n  nested: { count: 0 },\r\n  arr: [\"foo\", \"bar\"],\r\n});\r\n\r\nfunction mutateDeeply() {\r\n  // these will work as expected.\r\n  obj.value.nested.count++;\r\n  obj.value.arr.push(\"baz\");\r\n}\r\n```\r\n\r\nNon-primitive values are turned into reactive proxies via [`reactive()`](#reactive), which is discussed below.\r\n\r\nIt is also possible to opt-out of deep reactivity with [shallow refs](/api/reactivity-advanced#shallowref). For shallow refs, only `.value` access is tracked for reactivity. Shallow refs can be used for optimizing performance by avoiding the observation cost of large objects, or in cases where the inner state is managed by an external library.\r\n\r\nFurther reading:\r\n\r\n- [Reduce Reactivity Overhead for Large Immutable Structures](/guide/best-practices/performance#reduce-reactivity-overhead-for-large-immutable-structures)\r\n- [Integration with External State Systems](/guide/extras/reactivity-in-depth#integration-with-external-state-systems)\r\n\r\n</div>\r\n\r\n### DOM Update Timing\r\n\r\nWhen you mutate reactive state, the DOM is updated automatically. However, it should be noted that the DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" in the update cycle to ensure that each component updates only once no matter how many state changes you have made.\r\n\r\nTo wait for the DOM update to complete after a state change, you can use the [nextTick()](/api/general#nexttick) global API:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nimport { nextTick } from \"vue\";\r\n\r\nasync function increment() {\r\n  count.value++;\r\n  await nextTick();\r\n  // Now the DOM is updated\r\n}\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nimport { nextTick } from \"vue\";\r\n\r\nexport default {\r\n  methods: {\r\n    async increment() {\r\n      this.count++;\r\n      await nextTick();\r\n      // Now the DOM is updated\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n## `reactive()`\r\n\r\nThere is another way to declare reactive state, with the `reactive()` API. Unlike a ref which wraps the inner value in a special object, `reactive()` makes an object itself reactive:\r\n\r\n```js\r\nimport { reactive } from \"vue\";\r\n\r\nconst state = reactive({ count: 0 });\r\n```\r\n\r\n> See also: [Typing Reactive](/guide/typescript/composition-api#typing-reactive) <sup class=\"vt-badge ts\" />\r\n\r\nUsage in template:\r\n\r\n```vue-html\r\n<button @click=\"state.count++\">\r\n  {{ state.count }}\r\n</button>\r\n```\r\n\r\nReactive objects are [JavaScript Proxies](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) and behave just like normal objects. The difference is that Vue is able to intercept the access and mutation of all properties of a reactive object for reactivity tracking and triggering.\r\n\r\n`reactive()` converts the object deeply: nested objects are also wrapped with `reactive()` when accessed. It is also called by `ref()` internally when the ref value is an object. Similar to shallow refs, there is also the [`shallowReactive()`](/api/reactivity-advanced#shallowreactive) API for opting-out of deep reactivity.\r\n\r\n### Reactive Proxy vs. Original\r\n\r\nIt is important to note that the returned value from `reactive()` is a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) of the original object, which is not equal to the original object:\r\n\r\n```js\r\nconst raw = {};\r\nconst proxy = reactive(raw);\r\n\r\n// proxy is NOT equal to the original.\r\nconsole.log(proxy === raw); // false\r\n```\r\n\r\nOnly the proxy is reactive - mutating the original object will not trigger updates. Therefore, the best practice when working with Vue's reactivity system is to **exclusively use the proxied versions of your state**.\r\n\r\nTo ensure consistent access to the proxy, calling `reactive()` on the same object always returns the same proxy, and calling `reactive()` on an existing proxy also returns that same proxy:\r\n\r\n```js\r\n// calling reactive() on the same object returns the same proxy\r\nconsole.log(reactive(raw) === proxy); // true\r\n\r\n// calling reactive() on a proxy returns itself\r\nconsole.log(reactive(proxy) === proxy); // true\r\n```\r\n\r\nThis rule applies to nested objects as well. Due to deep reactivity, nested objects inside a reactive object are also proxies:\r\n\r\n```js\r\nconst proxy = reactive({});\r\n\r\nconst raw = {};\r\nproxy.nested = raw;\r\n\r\nconsole.log(proxy.nested === raw); // false\r\n```\r\n\r\n### Limitations of `reactive()`\r\n\r\nThe `reactive()` API has a few limitations:\r\n\r\n1. **Limited value types:** it only works for object types (objects, arrays, and [collection types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections) such as `Map` and `Set`). It cannot hold [primitive types](https://developer.mozilla.org/en-US/docs/Glossary/Primitive) such as `string`, `number` or `boolean`.\r\n\r\n2. **Cannot replace entire object:** since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily \"replace\" a reactive object because the reactivity connection to the first reference is lost:\r\n\r\n   ```js\r\n   let state = reactive({ count: 0 });\r\n\r\n   // the above reference ({ count: 0 }) is no longer being tracked\r\n   // (reactivity connection is lost!)\r\n   state = reactive({ count: 1 });\r\n   ```\r\n\r\n3. **Not destructure-friendly:** when we destructure a reactive object's primitive type property into local variables, or when we pass that property into a function, we will lose the reactivity connection:\r\n\r\n   ```js\r\n   const state = reactive({ count: 0 });\r\n\r\n   // count is disconnected from state.count when destructured.\r\n   let { count } = state;\r\n   // does not affect original state\r\n   count++;\r\n\r\n   // the function receives a plain number and\r\n   // won't be able to track changes to state.count\r\n   // we have to pass the entire object in to retain reactivity\r\n   callSomeFunction(state.count);\r\n   ```\r\n\r\nDue to these limitations, we recommend using `ref()` as the primary API for declaring reactive state.\r\n\r\n## Additional Ref Unwrapping Details\r\n\r\n### As Reactive Object Property\r\n\r\nA ref is automatically unwrapped when accessed or mutated as a property of a reactive object. In other words, it behaves like a normal property:\r\n\r\n```js\r\nconst count = ref(0);\r\nconst state = reactive({\r\n  count,\r\n});\r\n\r\nconsole.log(state.count); // 0\r\n\r\nstate.count = 1;\r\nconsole.log(count.value); // 1\r\n```\r\n\r\nIf a new ref is assigned to a property linked to an existing ref, it will replace the old ref:\r\n\r\n```js\r\nconst otherCount = ref(2);\r\n\r\nstate.count = otherCount;\r\nconsole.log(state.count); // 2\r\n// original ref is now disconnected from state.count\r\nconsole.log(count.value); // 1\r\n```\r\n\r\nRef unwrapping only happens when nested inside a deep reactive object. It does not apply when it is accessed as a property of a [shallow reactive object](/api/reactivity-advanced#shallowreactive).\r\n\r\n### Caveat in Arrays and Collections\r\n\r\nUnlike reactive objects, there is **no** unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type like `Map`:\r\n\r\n```js\r\nconst books = reactive([ref(\"Vue 3 Guide\")]);\r\n// need .value here\r\nconsole.log(books[0].value);\r\n\r\nconst map = reactive(new Map([[\"count\", ref(0)]]));\r\n// need .value here\r\nconsole.log(map.get(\"count\").value);\r\n```\r\n\r\n### Caveat when Unwrapping in Templates\r\n\r\nRef unwrapping in templates only applies if the ref is a top-level property in the template render context.\r\n\r\nIn the example below, `count` and `object` are top-level properties, but `object.id` is not:\r\n\r\n```js\r\nconst count = ref(0);\r\nconst object = { id: ref(1) };\r\n```\r\n\r\nTherefore, this expression works as expected:\r\n\r\n```vue-html\r\n{{ count + 1 }}\r\n```\r\n\r\n...while this one does **NOT**:\r\n\r\n```vue-html\r\n{{ object.id + 1 }}\r\n```\r\n\r\nThe rendered result will be `[object Object]1` because `object.id` is not unwrapped when evaluating the expression and remains a ref object. To fix this, we can destructure `id` into a top-level property:\r\n\r\n```js\r\nconst { id } = object;\r\n```\r\n\r\n```vue-html\r\n{{ id + 1 }}\r\n```\r\n\r\nNow the render result will be `2`.\r\n\r\nAnother thing to note is that a ref does get unwrapped if it is the final evaluated value of a text interpolation (i.e. a <code v-pre>{{ }}</code> tag), so the following will render `1`:\r\n\r\n```vue-html\r\n{{ object.id }}\r\n```\r\n\r\nThis is just a convenience feature of text interpolation and is equivalent to <code v-pre>`{% raw %}{{ object.id.value }}{% endraw %}`</code>.\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n### Stateful Methods\r\n\r\nIn some cases, we may need to dynamically create a method function, for example creating a debounced event handler:\r\n\r\n```js\r\nimport { debounce } from \"lodash-es\";\r\n\r\nexport default {\r\n  methods: {\r\n    // Debouncing with Lodash\r\n    click: debounce(function () {\r\n      // ... respond to click ...\r\n    }, 500),\r\n  },\r\n};\r\n```\r\n\r\nHowever, this approach is problematic for components that are reused because a debounced function is **stateful**: it maintains some internal state on the elapsed time. If multiple component instances share the same debounced function, they will interfere with one another.\r\n\r\nTo keep each component instance's debounced function independent of the others, we can create the debounced version in the `created` lifecycle hook:\r\n\r\n```js\r\nexport default {\r\n  created() {\r\n    // each instance now has its own copy of debounced handler\r\n    this.debouncedClick = _.debounce(this.click, 500);\r\n  },\r\n  unmounted() {\r\n    // also a good idea to cancel the timer\r\n    // when the component is removed\r\n    this.debouncedClick.cancel();\r\n  },\r\n  methods: {\r\n    click() {\r\n      // ... respond to click ...\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>","src/content/docs/essentials/reactivity-fundamentals.mdx","2385c9b082a2e671","essentials/template-syntax",{id:233,data:235,body:241,filePath:242,digest:243,deferredRender:16},{title:236,description:237,editUrl:16,head:238,template:18,sidebar:239,pagefind:16,draft:20},"Template Syntax","A guide to Vue.js template syntax.",[],{hidden:20,attrs:240},{},"Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data. All Vue templates are syntactically valid HTML that can be parsed by spec-compliant browsers and HTML parsers.\r\n\r\nUnder the hood, Vue compiles the templates into highly-optimized JavaScript code. Combined with the reactivity system, Vue can intelligently figure out the minimal number of components to re-render and apply the minimal amount of DOM manipulations when the app state changes.\r\n\r\nIf you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can also [directly write render functions](/guide/extras/render-function) instead of templates, with optional JSX support. However, do note that they do not enjoy the same level of compile-time optimizations as templates.\r\n\r\n## Text Interpolation\r\n\r\nThe most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):\r\n\r\n```vue-html\r\n<span>Message: {{ msg }}</span>\r\n```\r\n\r\nThe mustache tag will be replaced with the value of the `msg` property [from the corresponding component instance](/guide/essentials/reactivity-fundamentals#declaring-reactive-state). It will also be updated whenever the `msg` property changes.\r\n\r\n## Raw HTML\r\n\r\nThe double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use the [`v-html` directive](/api/built-in-directives#v-html):\r\n\r\n```vue-html\r\n<p>Using text interpolation: {{ rawHtml }}</p>\r\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\r\n```\r\n\r\n<script setup>\r\n  const rawHtml = '<span style=\"color: red\">This should be red.</span>'\r\n</script>\r\n\r\n<div class=\"demo\">\r\n  <p>Using text interpolation: `{{ rawHtml }}`</p>\r\n  <p>\r\n    Using v-html directive: <span v-html=\"rawHtml\"></span>\r\n  </p>\r\n</div>\r\n\r\nHere we're encountering something new. The `v-html` attribute you're seeing is called a **directive**. Directives are prefixed with `v-` to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with the `rawHtml` property on the current active instance.\"\r\n\r\nThe contents of the `span` will be replaced with the value of the `rawHtml` property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use `v-html` to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.\r\n\r\n:::warning Security Warning\r\nDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to [XSS vulnerabilities](https://en.wikipedia.org/wiki/Cross-site_scripting). Only use `v-html` on trusted content and **never** on user-provided content.\r\n:::\r\n\r\n## Attribute Bindings\r\n\r\nMustaches cannot be used inside HTML attributes. Instead, use a [`v-bind` directive](/api/built-in-directives#v-bind):\r\n\r\n```vue-html\r\n<div v-bind:id=\"dynamicId\"></div>\r\n```\r\n\r\nThe `v-bind` directive instructs Vue to keep the element's `id` attribute in sync with the component's `dynamicId` property. If the bound value is `null` or `undefined`, then the attribute will be removed from the rendered element.\r\n\r\n### Shorthand\r\n\r\nBecause `v-bind` is so commonly used, it has a dedicated shorthand syntax:\r\n\r\n```vue-html\r\n<div :id=\"dynamicId\"></div>\r\n```\r\n\r\nAttributes that start with `:` may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later.\r\n\r\n> For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers.\r\n\r\n### Same-name Shorthand\r\n\r\n- Only supported in 3.4+\r\n\r\nIf the attribute has the same name as the variable name of the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:\r\n\r\n```vue-html\r\n<!-- same as :id=\"id\" -->\r\n<div :id></div>\r\n\r\n<!-- this also works -->\r\n<div v-bind:id></div>\r\n```\r\n\r\nThis is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above.\r\n\r\n### Boolean Attributes\r\n\r\n[Boolean attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) are attributes that can indicate true / false values by their presence on an element. For example, [`disabled`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) is one of the most commonly used boolean attributes.\r\n\r\n`v-bind` works a bit differently in this case:\r\n\r\n```vue-html\r\n<button :disabled=\"isButtonDisabled\">Button</button>\r\n```\r\n\r\nThe `disabled` attribute will be included if `isButtonDisabled` has a [truthy value](https://developer.mozilla.org/en-US/docs/Glossary/Truthy). It will also be included if the value is an empty string, maintaining consistency with `<button disabled=\"\">`. For other [falsy values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) the attribute will be omitted.\r\n\r\n### Dynamically Binding Multiple Attributes\r\n\r\nIf you have a JavaScript object representing multiple attributes that looks like this:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js\r\nconst objectOfAttrs = {\r\n  id: \"container\",\r\n  class: \"wrapper\",\r\n  style: \"background-color:green\",\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\ndata() {\r\n  return {\r\n    objectOfAttrs: {\r\n      id: 'container',\r\n      class: 'wrapper'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n</div>\r\n\r\nYou can bind them to a single element by using `v-bind` without an argument:\r\n\r\n```vue-html\r\n<div v-bind=\"objectOfAttrs\"></div>\r\n```\r\n\r\n## Using JavaScript Expressions\r\n\r\nSo far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:\r\n\r\n```vue-html\r\n{{ number + 1 }}\r\n\r\n{{ ok ? 'YES' : 'NO' }}\r\n\r\n{{ message.split('').reverse().join('') }}\r\n\r\n<div :id=\"`list-${id}`\"></div>\r\n```\r\n\r\nThese expressions will be evaluated as JavaScript in the data scope of the current component instance.\r\n\r\nIn Vue templates, JavaScript expressions can be used in the following positions:\r\n\r\n- Inside text interpolations (mustaches)\r\n- In the attribute value of any Vue directives (special attributes that start with `v-`)\r\n\r\n### Expressions Only\r\n\r\nEach binding can only contain **one single expression**. An expression is a piece of code that can be evaluated to a value. A simple check is whether it can be used after `return`.\r\n\r\nTherefore, the following will **NOT** work:\r\n\r\n```vue-html\r\n<!-- this is a statement, not an expression: -->\r\n{{ var a = 1 }}\r\n\r\n<!-- flow control won't work either, use ternary expressions -->\r\n{{ if (ok) { return message } }}\r\n```\r\n\r\n### Calling Functions\r\n\r\nIt is possible to call a component-exposed method inside a binding expression:\r\n\r\n```vue-html\r\n<time :title=\"toTitleDate(date)\" :datetime=\"date\">\r\n  {{ formatDate(date) }}\r\n</time>\r\n```\r\n\r\n:::tip\r\nFunctions called inside binding expressions will be called every time the component updates, so they should **not** have any side effects, such as changing data or triggering asynchronous operations.\r\n:::\r\n\r\n### Restricted Globals Access\r\n\r\nTemplate expressions are sandboxed and only have access to a [restricted list of globals](https://github.com/vuejs/core/blob/main/packages/shared/src/globalsAllowList.ts#L3). The list exposes commonly used built-in globals such as `Math` and `Date`.\r\n\r\nGlobals not explicitly included in the list, for example user-attached properties on `window`, will not be accessible in template expressions. You can, however, explicitly define additional globals for all Vue expressions by adding them to [`app.config.globalProperties`](/api/application#app-config-globalproperties).\r\n\r\n## Directives\r\n\r\nDirectives are special attributes with the `v-` prefix. Vue provides a number of [built-in directives](/api/built-in-directives), including `v-html` and `v-bind` which we have introduced above.\r\n\r\nDirective attribute values are expected to be single JavaScript expressions (with the exception of `v-for`, `v-on` and `v-slot`, which will be discussed in their respective sections later). A directive's job is to reactively apply updates to the DOM when the value of its expression changes. Take [`v-if`](/api/built-in-directives#v-if) as an example:\r\n\r\n```vue-html\r\n<p v-if=\"seen\">Now you see me</p>\r\n```\r\n\r\nHere, the `v-if` directive would remove or insert the `<p>` element based on the truthiness of the value of the expression `seen`.\r\n\r\n### Arguments\r\n\r\nSome directives can take an \"argument\", denoted by a colon after the directive name. For example, the `v-bind` directive is used to reactively update an HTML attribute:\r\n\r\n```vue-html\r\n<a v-bind:href=\"url\"> ... </a>\r\n\r\n<!-- shorthand -->\r\n<a :href=\"url\"> ... </a>\r\n```\r\n\r\nHere, `href` is the argument, which tells the `v-bind` directive to bind the element's `href` attribute to the value of the expression `url`. In the shorthand, everything before the argument (i.e., `v-bind:`) is condensed into a single character, `:`.\r\n\r\nAnother example is the `v-on` directive, which listens to DOM events:\r\n\r\n```vue-html\r\n<a v-on:click=\"doSomething\"> ... </a>\r\n\r\n<!-- shorthand -->\r\n<a @click=\"doSomething\"> ... </a>\r\n```\r\n\r\nHere, the argument is the event name to listen to: `click`. `v-on` has a corresponding shorthand, namely the `@` character. We will talk about event handling in more detail too.\r\n\r\n### Dynamic Arguments\r\n\r\nIt is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:\r\n\r\n```vue-html\r\n<!--\r\nNote that there are some constraints to the argument expression,\r\nas explained in the \"Dynamic Argument Value Constraints\" and \"Dynamic Argument Syntax Constraints\" sections below.\r\n-->\r\n<a v-bind:[attributeName]=\"url\"> ... </a>\r\n\r\n<!-- shorthand -->\r\n<a :[attributeName]=\"url\"> ... </a>\r\n```\r\n\r\nHere, `attributeName` will be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your component instance has a data property, `attributeName`, whose value is `\"href\"`, then this binding will be equivalent to `v-bind:href`.\r\n\r\nSimilarly, you can use dynamic arguments to bind a handler to a dynamic event name:\r\n\r\n```vue-html\r\n<a v-on:[eventName]=\"doSomething\"> ... </a>\r\n\r\n<!-- shorthand -->\r\n<a @[eventName]=\"doSomething\"> ... </a>\r\n```\r\n\r\nIn this example, when `eventName`'s value is `\"focus\"`, `v-on:[eventName]` will be equivalent to `v-on:focus`.\r\n\r\n#### Dynamic Argument Value Constraints\r\n\r\nDynamic arguments are expected to evaluate to a string, with the exception of `null`. The special value `null` can be used to explicitly remove the binding. Any other non-string value will trigger a warning.\r\n\r\n#### Dynamic Argument Syntax Constraints\r\n\r\nDynamic argument expressions have some syntax constraints because certain characters, such as spaces and quotes, are invalid inside HTML attribute names. For example, the following is invalid:\r\n\r\n```vue-html\r\n<!-- This will trigger a compiler warning. -->\r\n<a :['foo' + bar]=\"value\"> ... </a>\r\n```\r\n\r\nIf you need to pass a complex dynamic argument, it's probably better to use a [computed property](./computed), which we will cover shortly.\r\n\r\nWhen using in-DOM templates (templates directly written in an HTML file), you should also avoid naming keys with uppercase characters, as browsers will coerce attribute names into lowercase:\r\n\r\n```vue-html\r\n<a :[someAttr]=\"value\"> ... </a>\r\n```\r\n\r\nThe above will be converted to `:[someattr]` in in-DOM templates. If your component has a `someAttr` property instead of `someattr`, your code won't work. Templates inside Single-File Components are **not** subject to this constraint.\r\n\r\n### Modifiers\r\n\r\nModifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the `.prevent` modifier tells the `v-on` directive to call `event.preventDefault()` on the triggered event:\r\n\r\n```vue-html\r\n<form @submit.prevent=\"onSubmit\">...</form>\r\n```\r\n\r\nYou'll see other examples of modifiers later, [for `v-on`](./event-handling#event-modifiers) and [for `v-model`](./forms#modifiers), when we explore those features.\r\n\r\nAnd finally, here's the full directive syntax visualized:\r\n\r\n![directive syntax graph](./images/directive.png)\r\n\r\n{/* https://www.figma.com/file/BGWUknIrtY9HOmbmad0vFr/Directive */}","src/content/docs/essentials/template-syntax.mdx","d3f84ad5a0ac94ef","extra-topics/reactivity-in-depth",{id:244,data:246,body:252,filePath:253,digest:254,deferredRender:16},{title:247,description:248,editUrl:16,head:249,template:18,sidebar:250,pagefind:16,draft:20},"reactivity-in-depth","A deep dive into Vue's reactivity system.",[],{hidden:20,attrs:251},{},"# Reactivity in Depth\r\n\r\nVue's reactivity system is a powerful feature that allows developers to create dynamic and responsive applications. In this section, we will explore the inner workings of Vue's reactivity system, including how it tracks changes to data and updates the DOM efficiently.","src/content/docs/extra-topics/reactivity-in-depth.mdx","1015712e830b6148","extra-topics/composition-api-faq",{id:255,data:257,body:263,filePath:264,digest:265,deferredRender:16},{title:258,description:259,editUrl:16,head:260,template:18,sidebar:261,pagefind:16,draft:20},"Composition API FAQ","Frequently asked questions about the Composition API in Vue.js.",[],{hidden:20,attrs:262},{},"# Composition API FAQ\r\n\r\nThe Composition API is a powerful feature in Vue.js that allows developers to organize and reuse code more effectively. Here are some frequently asked questions about the Composition API:","src/content/docs/extra-topics/composition-api-faq.mdx","5afeae130c5b0aa8","extra-topics/render-functions-jsx",{id:266,data:268,body:274,filePath:275,digest:276,deferredRender:16},{title:269,description:270,editUrl:16,head:271,template:18,sidebar:272,pagefind:16,draft:20},"Render Functions & JSX","A guide to using render functions & JSX in Vue.js.",[],{hidden:20,attrs:273},{},"Render functions are a powerful feature in Vue.js that allow you to create components programmatically. They provide a way to define the structure of your component using JavaScript instead of templates. This can be particularly useful for dynamic components or when you need more control over the rendering process.","src/content/docs/extra-topics/render-functions-jsx.mdx","96cecb584d0c9e79","extra-topics/ways-of-using-vue",{id:277,data:279,filePath:285,digest:286,deferredRender:16},{title:280,description:281,editUrl:16,head:282,template:18,sidebar:283,pagefind:16,draft:20},"Ways of using Vue","This is the ways of vue",[],{hidden:20,attrs:284},{},"src/content/docs/extra-topics/ways-of-using-vue.mdx","713d7f49a405ec5f","extra-topics/rendering-mechanism",{id:287,data:289,body:295,filePath:296,digest:297,deferredRender:16},{title:290,description:291,editUrl:16,head:292,template:18,sidebar:293,pagefind:16,draft:20},"Rendering Mechanism","An overview of Vue's rendering mechanism.",[],{hidden:20,attrs:294},{},"# Rendering Mechanism\r\n\r\nVue's rendering mechanism is a core part of its architecture, enabling efficient updates to the DOM. This section provides an overview of how Vue's rendering process works, including the virtual DOM, reactivity system, and the diffing algorithm.\r\nIt will also cover how Vue optimizes rendering performance and how developers can leverage these features to build high-performance applications.","src/content/docs/extra-topics/rendering-mechanism.mdx","0d2833b77374046c","reference/example",{id:298,data:300,body:306,filePath:307,digest:308,rendered:309},{title:301,description:302,editUrl:16,head:303,template:18,sidebar:304,pagefind:16,draft:20},"Example Reference","A reference page in my new Starlight docs site.",[],{hidden:20,attrs:305},{},"Reference pages are ideal for outlining how things work in terse and clear terms.\nLess concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what you're documenting.\n\n## Further reading\n\n- Read [about reference](https://diataxis.fr/reference/) in the Diátaxis framework","src/content/docs/reference/example.md","8addf1dc1ec3c10f",{html:310,metadata:311},"<p>Reference pages are ideal for outlining how things work in terse and clear terms.\nLess concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what you’re documenting.</p>\n<div class=\"sl-heading-wrapper level-h2\"><h2 id=\"further-reading\">Further reading</h2><a class=\"sl-anchor-link\" href=\"#further-reading\"><span aria-hidden=\"true\" class=\"sl-anchor-icon\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\"><path fill=\"currentcolor\" d=\"m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\"></path></svg></span><span class=\"sr-only\">Section titled “Further reading”</span></a></div>\n<ul>\n<li>Read <a href=\"https://diataxis.fr/reference/\">about reference</a> in the Diátaxis framework</li>\n</ul>",{headings:312,localImagePaths:317,remoteImagePaths:318,frontmatter:319,imagePaths:320},[313],{depth:314,slug:315,text:316},2,"further-reading","Further reading",[],[],{title:301,description:302},[],"getting-started/introduction",{id:321,data:323,body:329,filePath:330,digest:331,deferredRender:16},{title:324,description:325,editUrl:16,head:326,template:18,sidebar:327,pagefind:16,draft:20},"Introduction","An Introduction to the Vue.js documentation.",[],{hidden:20,attrs:328},{},"import Counter from \"/src/components/counter.vue\";\r\nimport { ref } from \"vue\";\r\n\r\n:::note[You are reading the documentation for Vue 3!]\r\n\r\n- Vue 2 support has ended on **Dec 31, 2023**. Learn more about [Vue 2 EOL](https://v2.vuejs.org/eol/).\r\n- Upgrading from Vue 2? Check out the [Migration Guide](https://v3-migration.vuejs.org/).\r\n  :::\r\n\r\n<style is:global>@import '@theme/styles/vue-mastery.css';</style>\r\n\r\n<div class=\"vue-mastery-link\">\r\n  <a href=\"https://www.vuemastery.com/courses/\" target=\"_blank\">\r\n    <div class=\"banner-wrapper\">\r\n      <img\r\n        class=\"banner\"\r\n        alt=\"Vue Mastery banner\"\r\n        width=\"96px\"\r\n        height=\"56px\"\r\n        src=\"https://storage.googleapis.com/vue-mastery.appspot.com/flamelink/media/vuemastery-graphical-link-96x56.png\"\r\n      />\r\n    </div>\r\n    <p class=\"description\">\r\n      Learn Vue with video tutorials on <span>VueMastery.com</span>\r\n    </p>\r\n    <div class=\"logo-wrapper\">\r\n      <img\r\n        alt=\"Vue Mastery Logo\"\r\n        width=\"25px\"\r\n        src=\"https://storage.googleapis.com/vue-mastery.appspot.com/flamelink/media/vue-mastery-logo.png\"\r\n      />\r\n    </div>\r\n  </a>\r\n</div>\r\n\r\n## What is Vue?\r\n\r\nVue (pronounced /vjuː/, like **view**) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\r\n\r\nHere is a minimal example:\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\ncreateApp({\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    };\r\n  },\r\n}).mount(\"#app\");\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```js [Composition API]\r\nimport { createApp, ref } from \"vue\";\r\n\r\ncreateApp({\r\n  setup() {\r\n    return {\r\n      count: ref(0),\r\n    };\r\n  },\r\n}).mount(\"#app\");\r\n```\r\n\r\n</div>\r\n\r\n```vue-html\r\n<div id=\"app\">\r\n  <button @click=\"count++\">Count is: {{ count }}</button>\r\n</div>\r\n```\r\n\r\n**Result**\r\n\r\n<script setup>import {ref} from 'vue'; const count = ref(0);</script>\r\n\r\n{\" \"}\r\n\r\n<Counter client:load />\r\n\r\nThe above example demonstrates the two core features of Vue:\r\n\r\n- **Declarative Rendering**: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\r\n- **Reactivity**: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\r\n\r\n:::tip[Prerequisites]\r\nThe rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews for [JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript), [HTML](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps) if needed. Prior experience with other frameworks helps, but is not required.\r\n:::\r\n\r\n## The Progressive Framework\r\n\r\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\r\n\r\n- Enhancing static HTML without a build step\r\n- Embedding as Web Components on any page\r\n- Single-Page Application (SPA)\r\n- Fullstack / Server-Side Rendering (SSR)\r\n- Jamstack / Static Site Generation (SSG)\r\n- Targeting desktop, mobile, WebGL, and even the terminal\r\n\r\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\r\n\r\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in [Ways of Using Vue](/guide/extras/ways-of-using-vue).\r\n\r\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\r\n\r\n## Single-File Components\r\n\r\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called **Single-File Component** (also known as `*.vue` files, abbreviated as **SFC**). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\r\n\r\n<div class=\"options-api\">\r\n\r\n    ```vue\r\n    <script>\r\n    export default {\r\n    data() {\r\n        return {\r\n        count: 0,\r\n        };\r\n    },\r\n    };\r\n\r\n    </script>\r\n        <template>\r\n        <button @click=\"count++\">Count is: {{ count }}</button>\r\n        </template>\r\n\r\n        <style scoped>\r\n        button {\r\n        font-weight: bold;\r\n        }\r\n    </style>\r\n\r\n    ```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { ref } from \"vue\";\r\nconst count = ref(0);\r\n</script>\r\n\r\n<template>\r\n  <button @click=\"count++\">Count is: {{ count }}</button>\r\n</template>\r\n\r\n<style scoped>\r\nbutton {\r\n  font-weight: bold;\r\n}\r\n</style>\r\n```\r\n\r\n</div>\r\n\r\nSFC is a defining feature of Vue and is the recommended way to author Vue components **if** your use case warrants a build setup. You can learn more about the [how and why of SFC](/guide/scaling-up/sfc) in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\r\n\r\n## API Styles\r\n\r\nVue components can be authored in two different API styles: **Options API** and **Composition API**.\r\n\r\n### Options API\r\n\r\nWith Options API, we define a component's logic using an object of options such as `data`, `methods`, and `mounted`. Properties defined by options are exposed on `this` inside functions, which points to the component instance:\r\n\r\n```vue\r\n<script>\r\nexport default {\r\n  // Properties returned from data() become reactive state\r\n  // and will be exposed on `this`.\r\n  data() {\r\n    return {\r\n      count: 0,\r\n    };\r\n  },\r\n\r\n  // Methods are functions that mutate state and trigger updates.\r\n  // They can be bound as event handlers in templates.\r\n  methods: {\r\n    increment() {\r\n      this.count++;\r\n    },\r\n  },\r\n\r\n  // Lifecycle hooks are called at different stages\r\n  // of a component's lifecycle.\r\n  // This function will be called when the component is mounted.\r\n  mounted() {\r\n    console.log(`The initial count is ${this.count}.`);\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <button @click=\"increment\">Count is: {{ count }}</button>\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNptkMFqxCAQhl9lkB522ZL0HNKlpa/Qo4e1ZpLIGhUdl5bgu9es2eSyIMio833zO7NP56pbRNawNkivHJ25wV9nPUGHvYiaYOYGoK7Bo5CkbgiBBOFy2AkSh2N5APmeojePCkDaaKiBt1KnZUuv3Ky0PppMsyYAjYJgigu0oEGYDsirYUAP0WULhqVrQhptF5qHQhnpcUJD+wyQaSpUd/Xp9NysVY/yT2qE0dprIS/vsds5Mg9mNVbaDofL94jZpUgJXUKBCvAy76ZUXY53CTd5tfX2k7kgnJzOCXIF0P5EImvgQ2olr++cbRE4O3+t6JxvXj0ptXVpye1tvbFY+ge/NJZt)\r\n\r\n### Composition API\r\n\r\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with [`<script setup>`](/api/sfc-script-setup). The `setup` attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in `<script setup>` are directly usable in the template.\r\n\r\nHere is the same component, with the exact same template, but using Composition API and `<script setup>` instead:\r\n\r\n```vue\r\n<script setup>\r\nimport { ref, onMounted } from \"vue\";\r\n\r\n// reactive state\r\nconst count = ref(0);\r\n\r\n// functions that mutate state and trigger updates\r\nfunction increment() {\r\n  count.value++;\r\n}\r\n\r\n// lifecycle hooks\r\nonMounted(() => {\r\n  console.log(`The initial count is ${count.value}.`);\r\n});\r\n</script>\r\n\r\n<template>\r\n  <button @click=\"increment\">Count is: {{ count }}</button>\r\n</template>\r\n```\r\n\r\n[Try it in the Playground](https://play.vuejs.org/#eNpNkMFqwzAQRH9lMYU4pNg9Bye09NxbjzrEVda2iLwS0spQjP69a+yYHnRYad7MaOfiw/tqSliciybqYDxDRE7+qsiM3gWGGQJ2r+DoyyVivEOGLrgRDkIdFCmqa1G0ms2EELllVKQdRQa9AHBZ+PLtuEm7RCKVd+ChZRjTQqwctHQHDqbvMUDyd7mKip4AGNIBRyQujzArgtW/mlqb8HRSlLcEazrUv9oiDM49xGGvXgp5uT5his5iZV1f3r4HFHvDprVbaxPhZf4XkKub/CDLaep1T7IhGRhHb6WoTADNT2KWpu/aGv24qGKvrIrr5+Z7hnneQnJu6hURvKl3ryL/ARrVkuI=)\r\n\r\n### Which to Choose?\r\n\r\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\r\n\r\nThe Options API is centered around the concept of a \"component instance\" (`this` as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\r\n\r\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\r\n\r\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the [Composition API FAQ](/guide/extras/composition-api-faq).\r\n\r\nIf you are new to Vue, here's our general recommendation:\r\n\r\n- For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\r\n\r\n- For production use:\r\n\r\n  - Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\r\n\r\n  - Go with Composition API + Single-File Components if you plan to build full applications with Vue.\r\n\r\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the **API Preference switches** at the top of the left sidebar.\r\n\r\n## Still Got Questions?\r\n\r\nCheck out our [FAQ](/about/faq).\r\n\r\n## Pick Your Learning Path\r\n\r\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!\r\n\r\n<div class=\"vt-box-container next-steps\">\r\n  <a class=\"vt-box\" href=\"/tutorial/\">\r\n    <p class=\"next-steps-link\">Try the Tutorial</p>\r\n    <p class=\"next-steps-caption\">\r\n      For those who prefer learning things hands-on.\r\n    </p>\r\n  </a>\r\n  <a class=\"vt-box\" href=\"/guide/quick-start.html\">\r\n    <p class=\"next-steps-link\">Read the Guide</p>\r\n    <p class=\"next-steps-caption\">\r\n      The guide walks you through every aspect of the framework in full detail.\r\n    </p>\r\n  </a>\r\n  <a class=\"vt-box\" href=\"/examples/\">\r\n    <p class=\"next-steps-link\">Check out the Examples</p>\r\n    <p class=\"next-steps-caption\">\r\n      Explore examples of core features and common UI tasks.\r\n    </p>\r\n  </a>\r\n</div>","src/content/docs/getting-started/introduction.mdx","b1dd77972b6bc748","getting-started/quick-start",{id:332,data:334,body:340,filePath:341,digest:342,deferredRender:16},{title:335,description:336,editUrl:16,head:337,template:18,sidebar:338,pagefind:16,draft:20},"Quick Start","A quick start guide to get you up and running with Vue.js.",[],{hidden:20,attrs:339},{},"# Quick Start\r\n\r\n## Try Vue Online\r\n\r\n- To quickly get a taste of Vue, you can try it directly in our [Playground](https://play.vuejs.org/#eNo9jcEKwjAMhl/lt5fpQYfXUQfefAMvvRQbddC1pUuHUPrudg4HIcmXjyRZXEM4zYlEJ+T0iEPgXjn6BB8Zhp46WUZWDjCa9f6w9kAkTtH9CRinV4fmRtZ63H20Ztesqiylphqy3R5UYBqD1UyVAPk+9zkvV1CKbCv9poMLiTEfR2/IXpSoXomqZLtti/IFwVtA9A==).\r\n\r\n- If you prefer a plain HTML setup without any build steps, you can use this [JSFiddle](https://jsfiddle.net/yyx990803/2ke1ab0z/) as your starting point.\r\n\r\n- If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser on [StackBlitz](https://vite.new/vue).\r\n\r\n## Creating a Vue Application\r\n\r\n:::tip[Prerequisites]\r\n\r\n- Familiarity with the command line\r\n- Install [Node.js](https://nodejs.org/) version 18.3 or higher\r\n  :::\r\n\r\nIn this section we will introduce how to scaffold a Vue [Single Page Application](/guide/extras/ways-of-using-vue#single-page-application-spa) on your local machine. The created project will be using a build setup based on [Vite](https://vitejs.dev) and allow us to use Vue [Single-File Components](/guide/scaling-up/sfc) (SFCs).\r\n\r\nMake sure you have an up-to-date version of [Node.js](https://nodejs.org/) installed and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the `$` sign):\r\n\r\n```sh\r\n$ npm create vue@latest\r\n```\r\n\r\n```sh\r\n$ pnpm create vue@latest\r\n```\r\n\r\n```sh\r\n# For Yarn (v1+)\r\n$ yarn create vue\r\n\r\n# For Yarn Modern (v2+)\r\n$ yarn create vue@latest\r\n\r\n# For Yarn ^v4.11\r\n$ yarn dlx create-vue@latest\r\n```\r\n\r\n```sh\r\n$ bun create vue@latest\r\n```\r\n\r\nThis command will install and execute [create-vue](https://github.com/vuejs/create-vue), the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:\r\n\r\n<div class=\"language-sh\">\r\n  <pre>\r\n    <code>\r\n      <span style=\"color:var(--vt-c-green);\">✔</span> \r\n      <span style=\"color:#A6ACCD;\">\r\n        Project name:\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;\">&lt;</span>\r\n          <span style=\"color:#888;\">your-project-name</span>\r\n          <span style=\"color:#89DDFF;\">&gt;</span>\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\"> Add TypeScript?</span>\r\n      <span style=\"color:#888;\">\r\n        … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add JSX Support?\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add Vue Router for Single Page Application development?\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\"> Add Pinia for state management?</span>\r\n      <span style=\"color:#888;\">\r\n        … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add Vitest for Unit testing?\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\"> Add an End-to-End Testing Solution?</span>\r\n      <span style=\"color:#888;\">\r\n        … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> /\r\n        Cypress / Nightwatch / Playwright\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add ESLint for code quality?\r\n        <span style=\"color:#888;\">\r\n          … No /\r\n          <span style=\"color:#89DDFF;text-decoration:underline\">Yes</span>\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add Prettier for code formatting?\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n        </span>\r\n      </span><br/>\r\n\r\n      <span style=\"color:var(--vt-c-green);\">✔</span>\r\n      <span style=\"color:#A6ACCD;\">\r\n        Add Vue DevTools 7 extension for debugging? (experimental)\r\n        <span style=\"color:#888;\">\r\n          … <span style=\"color:#89DDFF;text-decoration:underline\">No</span> / Yes\r\n        </span>\r\n      </span><br/><br/>\r\n\r\n      <span style=\"color:#A6ACCD;\">\r\n        Scaffolding project in ./\r\n        <span style=\"color:#89DDFF;\">&lt;</span>\r\n        <span style=\"color:#888;\">your-project-name</span>\r\n        <span style=\"color:#89DDFF;\">&gt;</span>...\r\n      </span><br/>\r\n\r\n      <span style=\"color:#A6ACCD;\">Done.</span>\r\n    </code>\r\n\r\n  </pre>\r\n</div>\r\n\r\nIf you are unsure about an option, simply choose `No` by hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:\r\n\r\n```sh\r\n$ cd {{'<your-project-name>'}}\r\n$ npm install\r\n$ npm run dev\r\n```\r\n\r\n```sh\r\n$ cd {{'<your-project-name>'}}\r\n$ pnpm install\r\n$ pnpm run dev\r\n```\r\n\r\n```sh\r\n$ cd {{'<your-project-name>'}}\r\n$ yarn\r\n$ yarn dev\r\n```\r\n\r\n```sh\r\n$ cd {{'<your-project-name>'}}\r\n$ bun install\r\n$ bun run dev\r\n```\r\n\r\nYou should now have your first Vue project running! Note that the example components in the generated project are written using the [Composition API](/guide/introduction#composition-api) and `<script setup>`, rather than the [Options API](/guide/introduction#options-api). Here are some additional tips:\r\n\r\n- The recommended IDE setup is [Visual Studio Code](https://code.visualstudio.com/) + [Vue - Official extension](https://marketplace.visualstudio.com/items?itemName=Vue.volar). If you use other editors, check out the [IDE support section](/guide/scaling-up/tooling#ide-support).\r\n- More tooling details, including integration with backend frameworks, are discussed in the [Tooling Guide](/guide/scaling-up/tooling).\r\n- To learn more about the underlying build tool Vite, check out the [Vite docs](https://vitejs.dev).\r\n- If you choose to use TypeScript, check out the [TypeScript Usage Guide](typescript/overview).\r\n\r\nWhen you are ready to ship your app to production, run the following:\r\n\r\n```sh\r\n$ npm run build\r\n```\r\n\r\n```sh\r\n$ pnpm run build\r\n```\r\n\r\n```sh\r\n$ yarn build\r\n```\r\n\r\n```sh\r\n$ bun run build\r\n```\r\n\r\nThis will create a production-ready build of your app in the project's `./dist` directory. Check out the [Production Deployment Guide](/guide/best-practices/production-deployment) to learn more about shipping your app to production.\r\n\r\n[Next Steps >](#next-steps)\r\n\r\n## Using Vue from CDN\r\n\r\nYou can use Vue directly from a CDN via a script tag:\r\n\r\n```html\r\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\r\n```\r\n\r\nHere we are using [unpkg](https://unpkg.com/), but you can also use any CDN that serves npm packages, for example [jsdelivr](https://www.jsdelivr.com/package/npm/vue) or [cdnjs](https://cdnjs.com/libraries/vue). Of course, you can also download this file and serve it yourself.\r\n\r\nWhen using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax.\r\n\r\n### Using the Global Build\r\n\r\nThe above link loads the _global build_ of Vue, where all top-level APIs are exposed as properties on the global `Vue` object. Here is a full example using the global build:\r\n\r\n<div class=\"options-api\">\r\n\r\n```html\r\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\r\n\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script>\r\n  const { createApp } = Vue;\r\n\r\n  createApp({\r\n    data() {\r\n      return {\r\n        message: \"Hello Vue!\",\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/QWJwJLp)\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```html\r\n<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\r\n\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script>\r\n  const { createApp, ref } = Vue;\r\n\r\n  createApp({\r\n    setup() {\r\n      const message = ref(\"Hello vue!\");\r\n      return {\r\n        message,\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/eYQpQEG)\r\n\r\n:::tip\r\nMany of the examples for Composition API throughout the guide will be using the `<script setup>` syntax, which requires build tools. If you intend to use Composition API without a build step, consult the usage of the [`setup()` option](/api/composition-api-setup).\r\n:::\r\n\r\n</div>\r\n\r\n### Using the ES Module Build\r\n\r\nThroughout the rest of the documentation, we will be primarily using [ES modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) syntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:\r\n\r\n<div class=\"options-api\">\r\n\r\n```html\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script type=\"module\">\r\n  import { createApp } from \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\";\r\n\r\n  createApp({\r\n    data() {\r\n      return {\r\n        message: \"Hello Vue!\",\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```html\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script type=\"module\">\r\n  import {\r\n    createApp,\r\n    ref,\r\n  } from \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\";\r\n\r\n  createApp({\r\n    setup() {\r\n      const message = ref(\"Hello Vue!\");\r\n      return {\r\n        message,\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n</div>\r\n\r\nNotice that we are using `<script type=\"module\">`, and the imported CDN URL is pointing to the **ES modules build** of Vue instead.\r\n\r\n<div class=\"options-api\">\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/VwVYVZO)\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/MWzazEv)\r\n\r\n</div>\r\n\r\n### Enabling Import maps\r\n\r\nIn the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n```\r\n\r\nWe can teach the browser where to locate the `vue` import by using [Import Maps](https://caniuse.com/import-maps):\r\n\r\n<div class=\"options-api\">\r\n\r\n```html\r\n<script type=\"importmap\">\r\n  {\r\n    \"imports\": {\r\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\r\n    }\r\n  }\r\n</script>\r\n\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script type=\"module\">\r\n  import { createApp } from \"vue\";\r\n\r\n  createApp({\r\n    data() {\r\n      return {\r\n        message: \"Hello Vue!\",\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/wvQKQyM)\r\n\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\n```html\r\n<script type=\"importmap\">\r\n  {\r\n    \"imports\": {\r\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\r\n    }\r\n  }\r\n</script>\r\n\r\n<div id=\"app\">{{ message }}</div>\r\n\r\n<script type=\"module\">\r\n  import { createApp, ref } from \"vue\";\r\n\r\n  createApp({\r\n    setup() {\r\n      const message = ref(\"Hello Vue!\");\r\n      return {\r\n        message,\r\n      };\r\n    },\r\n  }).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n[CodePen Demo >](https://codepen.io/vuejs-examples/pen/YzRyRYM)\r\n\r\n</div>\r\n\r\nYou can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use.\r\n\r\n:::tip Import Maps Browser Support\r\nImport Maps is a relatively new browser feature. Make sure to use a browser within its [support range](https://caniuse.com/import-maps). In particular, it is only supported in Safari 16.4+.\r\n:::\r\n\r\n:::warning Notes on Production Use\r\nThe examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out the [Production Deployment Guide](/guide/best-practices/production-deployment#without-build-tools).\r\n\r\nWhile it is possible to use Vue without a build system, an alternative approach to consider is using [`vuejs/petite-vue`](https://github.com/vuejs/petite-vue) that could better suit the context where [`jquery/jquery`](https://github.com/jquery/jquery) (in the past) or [`alpinejs/alpine`](https://github.com/alpinejs/alpine) (in the present) might be used instead.\r\n:::\r\n\r\n### Splitting Up the Modules\r\n\r\nAs we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:\r\n\r\n```html\r\n<!-- index.html -->\r\n<div id=\"app\"></div>\r\n\r\n<script type=\"module\">\r\n  import { createApp } from \"vue\";\r\n  import MyComponent from \"./my-component.js\";\r\n\r\n  createApp(MyComponent).mount(\"#app\");\r\n</script>\r\n```\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\n// my-component.js\r\nexport default {\r\n  data() {\r\n    return { count: 0 };\r\n  },\r\n  template: `<div>Count is: {{ count }}</div>`,\r\n};\r\n```\r\n\r\n</div>\r\n<div class=\"composition-api\">\r\n\r\n```js\r\n// my-component.js\r\nimport { ref } from \"vue\";\r\nexport default {\r\n  setup() {\r\n    const count = ref(0);\r\n    return { count };\r\n  },\r\n  template: `<div>Count is: {{ count }}</div>`,\r\n};\r\n```\r\n\r\n</div>\r\n\r\nIf you directly open the above `index.html` in your browser, you will find that it throws an error because ES modules cannot work over the `file://` protocol, which is the protocol the browser uses when you open a local file.\r\n\r\nDue to security reasons, ES modules can only work over the `http://` protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve the `index.html` over the `http://` protocol, with a local HTTP server.\r\n\r\nTo start a local HTTP server, first make sure you have [Node.js](https://nodejs.org/en/) installed, then run `npx serve` from the command line in the same directory where your HTML file is. You can also use any other HTTP server that can serve static files with the correct MIME types.\r\n\r\nYou may have noticed that the imported component's template is inlined as a JavaScript string. If you are using VS Code, you can install the [es6-string-html](https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html) extension and prefix the strings with a `/*html*/` comment to get syntax highlighting for them.\r\n\r\n## Next Steps\r\n\r\nIf you skipped the [Introduction](/guide/introduction), we strongly recommend reading it before moving on to the rest of the documentation.\r\n\r\n<div class=\"vt-box-container next-steps\">\r\n  <a class=\"vt-box\" href=\"/guide/essentials/application.html\">\r\n    <p class=\"next-steps-link\">Continue with the Guide</p>\r\n    <p class=\"next-steps-caption\">\r\n      The guide walks you through every aspect of the framework in full detail.\r\n    </p>\r\n  </a>\r\n  <a class=\"vt-box\" href=\"/tutorial/\">\r\n    <p class=\"next-steps-link\">Try the Tutorial</p>\r\n    <p class=\"next-steps-caption\">\r\n      For those who prefer learning things hands-on.\r\n    </p>\r\n  </a>\r\n  <a class=\"vt-box\" href=\"/examples/\">\r\n    <p class=\"next-steps-link\">Check out the Examples</p>\r\n    <p class=\"next-steps-caption\">\r\n      Explore examples of core features and common UI tasks.\r\n    </p>\r\n  </a>\r\n</div>","src/content/docs/getting-started/quick-start.mdx","9edac0f85636a805","reusability/custom-directives",{id:343,data:345,body:351,filePath:352,digest:353,deferredRender:16},{title:346,description:347,editUrl:16,head:348,template:18,sidebar:349,pagefind:16,draft:20},"Custom Directives","A guide to using custom directives in Vue.js.",[],{hidden:20,attrs:350},{},"# Custom Directives\r\n\r\nimport React from \"react\";\r\n\r\nexport const HighlightScript = () => {\r\n  return (\r\n    <div\r\n      id=\"highlightMe\"\r\n      style={{ padding: \"10px\", backgroundColor: \"#f0f0f0\" }}\r\n    >\r\n      This element will be highlighted\r\n    </div>\r\n  );\r\n};\r\n\r\n{/* @client */}\r\n\r\n<HighlightScript />\r\n\r\n## Introduction\r\n\r\nIn addition to the default set of directives shipped in core (like `v-model` or `v-show`), Vue also allows you to register your own custom directives.\r\n\r\nWe have introduced two forms of code reuse in Vue: [components](/guide/essentials/component-basics) and [composables](./composables). Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.\r\n\r\nA custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that adds a class to an element when it is inserted into the DOM by Vue:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\n// enables v-highlight in templates\r\nconst vHighlight = {\r\n  mounted: (el) => {\r\n    el.classList.add(\"is-highlight\");\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <p v-highlight>This sentence is important!</p>\r\n</template>\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nconst highlight = {\r\n  mounted: (el) => el.classList.add(\"is-highlight\"),\r\n};\r\n\r\nexport default {\r\n  directives: {\r\n    // enables v-highlight in template\r\n    highlight,\r\n  },\r\n};\r\n```\r\n\r\n```vue-html\r\n<p v-highlight>This sentence is important!</p>\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"demo\">\r\n  <p v-highlight>This sentence is important!</p>\r\n</div>\r\n\r\n<div class=\"composition-api\">\r\n\r\nIn `<script setup>`, any camelCase variable that starts with the `v` prefix can be used as a custom directive. In the example above, `vHighlight` can be used in the template as `v-highlight`.\r\n\r\nIf you are not using `<script setup>`, custom directives can be registered using the `directives` option:\r\n\r\n```js\r\nexport default {\r\n  setup() {\r\n    /*...*/\r\n  },\r\n  directives: {\r\n    // enables v-highlight in template\r\n    highlight: {\r\n      /* ... */\r\n    },\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\nSimilar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via the `directives` option.\r\n\r\n</div>\r\n\r\nIt is also common to globally register custom directives at the app level:\r\n\r\n```js\r\nconst app = createApp({});\r\n\r\n// make v-highlight usable in all components\r\napp.directive(\"highlight\", {\r\n  /* ... */\r\n});\r\n```\r\n\r\n## When to use custom directives\r\n\r\nCustom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation.\r\n\r\nA common example of this is a `v-focus` custom directive that brings an element into focus.\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\n// enables v-focus in templates\r\nconst vFocus = {\r\n  mounted: (el) => el.focus(),\r\n};\r\n</script>\r\n\r\n<template>\r\n  <input v-focus />\r\n</template>\r\n```\r\n\r\n</div>\r\n\r\n<div class=\"options-api\">\r\n\r\n```js\r\nconst focus = {\r\n  mounted: (el) => el.focus(),\r\n};\r\n\r\nexport default {\r\n  directives: {\r\n    // enables v-focus in template\r\n    focus,\r\n  },\r\n};\r\n```\r\n\r\n```vue-html\r\n<input v-focus />\r\n```\r\n\r\n</div>\r\n\r\nThis directive is more useful than the `autofocus` attribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!\r\n\r\nDeclarative templating with built-in directives such as `v-bind` is recommended when possible because they are more efficient and server-rendering friendly.\r\n\r\n## Directive Hooks\r\n\r\nA directive definition object can provide several hook functions (all optional):\r\n\r\n```js\r\nconst myDirective = {\r\n  // called before bound element's attributes\r\n  // or event listeners are applied\r\n  created(el, binding, vnode) {\r\n    // see below for details on arguments\r\n  },\r\n  // called right before the element is inserted into the DOM.\r\n  beforeMount(el, binding, vnode) {},\r\n  // called when the bound element's parent component\r\n  // and all its children are mounted.\r\n  mounted(el, binding, vnode) {},\r\n  // called before the parent component is updated\r\n  beforeUpdate(el, binding, vnode, prevVnode) {},\r\n  // called after the parent component and\r\n  // all of its children have updated\r\n  updated(el, binding, vnode, prevVnode) {},\r\n  // called before the parent component is unmounted\r\n  beforeUnmount(el, binding, vnode) {},\r\n  // called when the parent component is unmounted\r\n  unmounted(el, binding, vnode) {},\r\n};\r\n```\r\n\r\n### Hook Arguments\r\n\r\nDirective hooks are passed these arguments:\r\n\r\n- `el`: the element the directive is bound to. This can be used to directly manipulate the DOM.\r\n\r\n- `binding`: an object containing the following properties.\r\n\r\n  - `value`: The value passed to the directive. For example in `v-my-directive=\"1 + 1\"`, the value would be `2`.\r\n  - `oldValue`: The previous value, only available in `beforeUpdate` and `updated`. It is available whether or not the value has changed.\r\n  - `arg`: The argument passed to the directive, if any. For example in `v-my-directive:foo`, the arg would be `\"foo\"`.\r\n  - `modifiers`: An object containing modifiers, if any. For example in `v-my-directive.foo.bar`, the modifiers object would be `{ foo: true, bar: true }`.\r\n  - `instance`: The instance of the component where the directive is used.\r\n  - `dir`: the directive definition object.\r\n\r\n- `vnode`: the underlying VNode representing the bound element.\r\n- `prevVnode`: the VNode representing the bound element from the previous render. Only available in the `beforeUpdate` and `updated` hooks.\r\n\r\nAs an example, consider the following directive usage:\r\n\r\n```vue-html\r\n<div v-example:foo.bar=\"baz\">\r\n```\r\n\r\nThe `binding` argument would be an object in the shape of:\r\n\r\n```js\r\n{\r\n  arg: 'foo',\r\n  modifiers: { bar: true },\r\n  value: /* value of `baz` */,\r\n  oldValue: /* value of `baz` from previous update */\r\n}\r\n```\r\n\r\nSimilar to built-in directives, custom directive arguments can be dynamic. For example:\r\n\r\n```vue-html\r\n<div v-example:[arg]=\"value\"></div>\r\n```\r\n\r\nHere the directive argument will be reactively updated based on `arg` property in our component state.\r\n\r\n:::tip Note\r\nApart from `el`, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element's [dataset](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset).\r\n:::\r\n\r\n## Function Shorthand\r\n\r\nIt's common for a custom directive to have the same behavior for `mounted` and `updated`, with no need for the other hooks. In such cases we can define the directive as a function:\r\n\r\n```vue-html\r\n<div v-color=\"color\"></div>\r\n```\r\n\r\n```js\r\napp.directive(\"color\", (el, binding) => {\r\n  // this will be called for both `mounted` and `updated`\r\n  el.style.color = binding.value;\r\n});\r\n```\r\n\r\n## Object Literals\r\n\r\nIf your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression.\r\n\r\n```vue-html\r\n<div v-demo=\"{ color: 'white', text: 'hello!' }\"></div>\r\n```\r\n\r\n```js\r\napp.directive(\"demo\", (el, binding) => {\r\n  console.log(binding.value.color); // => \"white\"\r\n  console.log(binding.value.text); // => \"hello!\"\r\n});\r\n```\r\n\r\n## Usage on Components\r\n\r\n:::warning Not recommended\r\nUsing custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes.\r\n:::\r\n\r\nWhen used on components, custom directives will always apply to a component's root node, similar to [Fallthrough Attributes](/guide/components/attrs).\r\n\r\n```vue-html\r\n<MyComponent v-demo=\"test\" />\r\n```\r\n\r\n```vue-html\r\n<!-- template of MyComponent -->\r\n\r\n<div> <!-- v-demo directive will be applied here -->\r\n  <span>My component content</span>\r\n</div>\r\n```\r\n\r\nNote that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element with `v-bind=\"$attrs\"`.","src/content/docs/reusability/custom-directives.mdx","9ef5a1509740fca9","reusability/composables",{id:354,data:356,body:362,filePath:363,digest:364,deferredRender:16},{title:357,description:358,editUrl:16,head:359,template:18,sidebar:360,pagefind:16,draft:20},"Composables","A guide to using composables in Vue.js.",[],{hidden:20,attrs:361},{},"# Composables\n\nimport MousePosition from \"./components/mousePosition.jsx\";\nimport useMouse from \"./components/useMouse.js\";\n\n{/* @client */}\n\n<div style={{ position: \"relative\" }}>\n  <MousePosition />\n  <script>\n    {`\n      (function() {\n        const cleanup = initMouseTracker();\n        // Cleanup when the component is unmounted\n        document.addEventListener('astro:before-swap', cleanup);\n      })();\n    `}\n  </script>\n</div>\n\n:::tip\nThis section assumes basic knowledge of Composition API. If you have been learning Vue with Options API only, you can set the API Preference to Composition API (using the toggle at the top of the left sidebar) and re-read the [Reactivity Fundamentals](/guide/essentials/reactivity-fundamentals) and [Lifecycle Hooks](/guide/essentials/lifecycle) chapters.\n:::\n\n## What is a \"Composable\"?\n\nIn the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reuse **stateful logic**.\n\nWhen building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulates **stateless logic**: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for example [lodash](https://lodash.com/) and [date-fns](https://date-fns.org/), which you may have heard of.\n\nBy contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database.\n\n## Mouse Tracker Example\n\nIf we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:\n\n```vue\n<script setup>\nimport { ref, onMounted, onUnmounted } from \"vue\";\n\nconst x = ref(0);\nconst y = ref(0);\n\nfunction update(event) {\n  x.value = event.pageX;\n  y.value = event.pageY;\n}\n\nonMounted(() => window.addEventListener(\"mousemove\", update));\nonUnmounted(() => window.removeEventListener(\"mousemove\", update));\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\nBut what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:\n\n```js\n// mouse.js\nimport { ref, onMounted, onUnmounted } from \"vue\";\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0);\n  const y = ref(0);\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX;\n    y.value = event.pageY;\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener(\"mousemove\", update));\n  onUnmounted(() => window.removeEventListener(\"mousemove\", update));\n\n  // expose managed state as return value\n  return { x, y };\n}\n```\n\nAnd this is how it can be used in components:\n\n```vue\n<script setup>\nimport { useMouse } from \"./mouse.js\";\n\nconst { x, y } = useMouse();\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>\n```\n\n<MousePosition class=\"demo\" />\n\n[Try it in the Playground](https://play.vuejs.org/#eNqNkj1rwzAQhv/KocUOGKVzSAIdurVjoQUvJj4XlfgkJNmxMfrvPcmJkkKHLrbu69H7SlrEszFyHFDsxN6drDIeHPrBHGtSvdHWwwKDwzfNHwjQWd1DIbd9jOW3K2qq6aTJxb6pgpl7Dnmg3NS0365YBnLgsTfnxiNHACvUaKe80gTKQeN3sDAIQqjignEhIvKYqMRta1acFVrsKtDEQPLYxuU7cV8Msmg2mdTilIa6gU5p27tYWKKq1c3ENphaPrGFW25+yMXsHWFaFlfiiOSvFIBJjs15QJ5JeWmaL/xYS/Mfpc9YYrPxl52ULOpwhIuiVl9k07Yvsf9VOY+EtizSWfR6xKK6itgkvQ/+fyNs6v4XJXIsPwVL+WprCiL8AEUxw5s=)\n\nAs we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range of [Composition API functions](/api/#composition-api) in composables. The same `useMouse()` functionality can now be used in any component.\n\nThe cooler part about composables though, is that you can also nest them: one composable function can call one or more other composable functions. This enables us to compose complex logic using small, isolated units, similar to how we compose an entire application using components. In fact, this is why we decided to call the collection of APIs that make this pattern possible Composition API.\n\nFor example, we can extract the logic of adding and removing a DOM event listener into its own composable:\n\n```js\n// event.js\nimport { onMounted, onUnmounted } from \"vue\";\n\nexport function useEventListener(target, event, callback) {\n  // if you want, you can also make this\n  // support selector strings as target\n  onMounted(() => target.addEventListener(event, callback));\n  onUnmounted(() => target.removeEventListener(event, callback));\n}\n```\n\nAnd now our `useMouse()` composable can be simplified to:\n\n```js\n// mouse.js\nimport { ref } from \"vue\";\nimport { useEventListener } from \"./event\";\n\nexport function useMouse() {\n  const x = ref(0);\n  const y = ref(0);\n\n  useEventListener(window, \"mousemove\", (event) => {\n    x.value = event.pageX;\n    y.value = event.pageY;\n  });\n\n  return { x, y };\n}\n```\n\n:::tip\nEach component instance calling `useMouse()` will create its own copies of `x` and `y` state so they won't interfere with one another. If you want to manage shared state between components, read the [State Management](/guide/scaling-up/state-management) chapter.\n:::\n\n## Async State Example\n\nThe `useMouse()` composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:\n\n```vue\n<script setup>\nimport { ref } from \"vue\";\n\nconst data = ref(null);\nconst error = ref(null);\n\nfetch(\"...\")\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err));\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>\n```\n\nIt would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:\n\n```js\n// fetch.js\nimport { ref } from \"vue\";\n\nexport function useFetch(url) {\n  const data = ref(null);\n  const error = ref(null);\n\n  fetch(url)\n    .then((res) => res.json())\n    .then((json) => (data.value = json))\n    .catch((err) => (error.value = err));\n\n  return { data, error };\n}\n```\n\nNow in our component we can just do:\n\n```vue\n<script setup>\nimport { useFetch } from \"./fetch.js\";\n\nconst { data, error } = useFetch(\"...\");\n</script>\n```\n\n### Accepting Reactive State\n\n`useFetch()` takes a static URL string as input - so it performs the fetch only once and is then done. What if we want it to re-fetch whenever the URL changes? In order to achieve this, we need to pass reactive state into the composable function, and let the composable create watchers that perform actions using the passed state.\n\nFor example, `useFetch()` should be able to accept a ref:\n\n```js\nconst url = ref(\"/initial-url\");\n\nconst { data, error } = useFetch(url);\n\n// this should trigger a re-fetch\nurl.value = \"/new-url\";\n```\n\nOr, accept a [getter function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#description):\n\n```js\n// re-fetch when props.id changes\nconst { data, error } = useFetch(() => `/posts/${props.id}`);\n```\n\nWe can refactor our existing implementation with the [`watchEffect()`](/api/reactivity-core.html#watcheffect) and [`toValue()`](/api/reactivity-utilities.html#tovalue) APIs:\n\n```js\n// fetch.js\nimport { ref, watchEffect, toValue } from \"vue\";\n\nexport function useFetch(url) {\n  const data = ref(null);\n  const error = ref(null);\n\n  const fetchData = () => {\n    // reset state before fetching..\n    data.value = null;\n    error.value = null;\n\n    fetch(toValue(url))\n      .then((res) => res.json())\n      .then((json) => (data.value = json))\n      .catch((err) => (error.value = err));\n  };\n\n  watchEffect(() => {\n    fetchData();\n  });\n\n  return { data, error };\n}\n```\n\n`toValue()` is an API added in 3.3. It is designed to normalize refs or getters into values. If the argument is a ref, it returns the ref's value; if the argument is a function, it will call the function and return its return value. Otherwise, it returns the argument as-is. It works similarly to [`unref()`](/api/reactivity-utilities.html#unref), but with special treatment for functions.\n\nNotice that `toValue(url)` is called **inside** the `watchEffect` callback. This ensures that any reactive dependencies accessed during the `toValue()` normalization are tracked by the watcher.\n\nThis version of `useFetch()` now accepts static URL strings, refs, and getters, making it much more flexible. The watch effect will run immediately, and will track any dependencies accessed during `toValue(url)`. If no dependencies are tracked (e.g. url is already a string), the effect runs only once; otherwise, it will re-run whenever a tracked dependency changes.\n\nHere's [the updated version of `useFetch()`](https://play.vuejs.org/#eNp9Vdtu20YQ/ZUpUUA0qpAOjL4YktCbC7Rom8BN8sSHrMihtfZql9iLZEHgv2dml6SpxMiDIWkuZ+acmR2fs1+7rjgEzG6zlaut7Dw49KHbVFruO2M9nMFiu4Ta7LvgsYEeWmv2sKCkxSwoOPwTfb2b/EU5mopHR5GVro12HrbC4UerYA2Lnfeduy3LR2d0p0SNO6MatIU/dbI2DRZUtPSmMa4kgJQuG8qkjvLF28XVaAwRb2wxz69gvZkK/UQ5xUGogBQ/ZpyhEV4sAa01lnpeTwRyApsFWvT2RO6Eea40THBMgfq6NLwlS1/pVZnUJB3ph8c98fNIvwD+MaKBzkQut2xYbYP3RsPhTWvsusokSA0/Vxn8UitZP7GFSX/+8Sz7z1W2OZ9BQt+vypQXS1R+1cgDQciW4iMrimR0wu8270znfoC7SBaJWdAeLTa3QFgxuNijc+IBIy5PPyYOjU19RDEI954/Z/UptKTy6VvqA5XD1AwLTTl/0Aco4s5lV51F5sG+VJJ+v4qxYbmkfiiKYvSvyknPbJnNtoyW+HJpj4Icd22LtV+CN5/ikC4XuNL4HFPaoGsvie3FIqSJp1WIzabl00HxkoyetEVfufhv1kAu3EnX8z0CKEtKofcGzhMb2CItAELL1SPlFMV1pwVj+GROc/vWPoc26oDgdxhfSArlLnbWaBOcOoEzIP3CgbeifqLXLRyICaDBDnVD+3KC7emCSyQ4sifspOx61Hh4Qy/d8BsaOEdkYb1sZS2FoiJKnIC6FbqhsaTVZfk8gDgK6cHLPZowFGUzAQTNWl/BUSrFbzRYHXmSdeAp28RMsI0fyFDaUJg9Spd0SbERZcvZDBRleCPdQMCPh8ARwdRRnBCTjGz5WkT0i0GlSMqixTR6VKyHmmWEHIfV+naSOETyRx8vEYwMv7pa8dJU+hU9Kz2t86ReqjcgaTzCe3oGpEOeD4uyJOcjTXe+obScHwaAi82lo9dC/q/wuyINjrwbuC5uZrS4WAQeyTN9ftOXIVwy537iecoX92kR4q/F1UvqIMsSbq6vo5XF6ekCeEcTauVDFJpuQESvMv53IBXadx3r4KqMrt0w0kwoZY5/R5u3AZejvd5h/fSK/dE9s63K3vN7tQesssnnhX1An9x3//+Hz/R9cu5NExRFf8d5zyIF7jGF/RZ0Q23P4mK3f8XLRmfhg7t79qjdSIobjXLE+Cqju/b7d6i/tHtT3MQ8VrH/Ahstp5A=), with an artificial delay and randomized error for demo purposes.\n\n## Conventions and Best Practices\n\n### Naming\n\nIt is a convention to name composable functions with camelCase names that start with \"use\".\n\n### Input Arguments\n\nA composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. The [`toValue()`](/api/reactivity-utilities#tovalue) utility function will come in handy for this purpose:\n\n```js\nimport { toValue } from \"vue\";\n\nfunction useFeature(maybeRefOrGetter) {\n  // If maybeRefOrGetter is a ref or a getter,\n  // its normalized value will be returned.\n  // Otherwise, it is returned as-is.\n  const value = toValue(maybeRefOrGetter);\n}\n```\n\nIf your composable creates reactive effects when the input is a ref or a getter, make sure to either explicitly watch the ref / getter with `watch()`, or call `toValue()` inside a `watchEffect()` so that it is properly tracked.\n\nThe [useFetch() implementation discussed earlier](#accepting-reactive-state) provides a concrete example of a composable that accepts refs, getters and plain values as input argument.\n\n### Return Values\n\nYou have probably noticed that we have been exclusively using `ref()` instead of `reactive()` in composables. The recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:\n\n```js\n// x and y are refs\nconst { x, y } = useMouse();\n```\n\nReturning a reactive object from a composable will cause such destructures to lose the reactivity connection to the state inside the composable, while the refs will retain that connection.\n\nIf you prefer to use returned state from composables as object properties, you can wrap the returned object with `reactive()` so that the refs are unwrapped. For example:\n\n```js\nconst mouse = reactive(useMouse());\n// mouse.x is linked to original ref\nconsole.log(mouse.x);\n```\n\n```vue-html\nMouse position is at: {{ mouse.x }}, {{ mouse.y }}\n```\n\n### Side Effects\n\nIt is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:\n\n- If you are working on an application that uses [Server-Side Rendering](/guide/scaling-up/ssr) (SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g. `onMounted()`. These hooks are only called in the browser, so you can be sure that code inside them has access to the DOM.\n\n- Remember to clean up side effects in `onUnmounted()`. For example, if a composable sets up a DOM event listener, it should remove that listener in `onUnmounted()` as we have seen in the `useMouse()` example. It can be a good idea to use a composable that automatically does this for you, like the `useEventListener()` example.\n\n### Usage Restrictions\n\nComposables should only be called in `<script setup>` or the `setup()` hook. They should also be called **synchronously** in these contexts. In some cases, you can also call them in lifecycle hooks like `onMounted()`.\n\nThese restrictions are important because these are the contexts where Vue is able to determine the current active component instance. Access to an active component instance is necessary so that:\n\n1. Lifecycle hooks can be registered to it.\n\n2. Computed properties and watchers can be linked to it, so that they can be disposed when the instance is unmounted to prevent memory leaks.\n\n:::tip\n`<script setup>` is the only place where you can call composables **after** using `await`. The compiler automatically restores the active instance context for you after the async operation.\n:::\n\n## Extracting Composables for Code Organization\n\nComposables can be extracted not only for reuse, but also for code organization. As the complexity of your components grows, you may end up with components that are too large to navigate and reason about. Composition API gives you the full flexibility to organize your component code into smaller functions based on logical concerns:\n\n```vue\n<script setup>\nimport { useFeatureA } from \"./featureA.js\";\nimport { useFeatureB } from \"./featureB.js\";\nimport { useFeatureC } from \"./featureC.js\";\n\nconst { foo, bar } = useFeatureA();\nconst { baz } = useFeatureB(foo);\nconst { qux } = useFeatureC(baz);\n</script>\n```\n\nTo some extent, you can think of these extracted composables as component-scoped services that can talk to one another.\n\n## Using Composables in Options API\n\nIf you are using Options API, composables must be called inside `setup()`, and the returned bindings must be returned from `setup()` so that they are exposed to `this` and the template:\n\n```js\nimport { useMouse } from \"./mouse.js\";\nimport { useFetch } from \"./fetch.js\";\n\nexport default {\n  setup() {\n    const { x, y } = useMouse();\n    const { data, error } = useFetch(\"...\");\n    return { x, y, data, error };\n  },\n  mounted() {\n    // setup() exposed properties can be accessed on `this`\n    console.log(this.x);\n  },\n  // ...other options\n};\n```\n\n## Comparisons with Other Techniques\n\n### vs. Mixins\n\nUsers coming from Vue 2 may be familiar with the [mixins](/api/options-composition#mixins) option, which also allows us to extract component logic into reusable units. There are three primary drawbacks to mixins:\n\n1. **Unclear source of properties**: when using many mixins, it becomes unclear which instance property is injected by which mixin, making it difficult to trace the implementation and understand the component's behavior. This is also why we recommend using the refs + destructure pattern for composables: it makes the property source clear in consuming components.\n\n2. **Namespace collisions**: multiple mixins from different authors can potentially register the same property keys, causing namespace collisions. With composables, you can rename the destructured variables if there are conflicting keys from different composables.\n\n3. **Implicit cross-mixin communication**: multiple mixins that need to interact with one another have to rely on shared property keys, making them implicitly coupled. With composables, values returned from one composable can be passed into another as arguments, just like normal functions.\n\nFor the above reasons, we no longer recommend using mixins in Vue 3. The feature is kept only for migration and familiarity reasons.\n\n### vs. Renderless Components\n\nIn the component slots chapter, we discussed the [Renderless Component](/guide/components/slots#renderless-components) pattern based on scoped slots. We even implemented the same mouse tracking demo using renderless components.\n\nThe main advantage of composables over renderless components is that composables do not incur the extra component instance overhead. When used across an entire application, the amount of extra component instances created by the renderless component pattern can become a noticeable performance overhead.\n\nThe recommendation is to use composables when reusing pure logic, and use components when reusing both logic and visual layout.\n\n### vs. React Hooks\n\nIf you have experience with React, you may notice that this looks very similar to custom React hooks. Composition API was in part inspired by React hooks, and Vue composables are indeed similar to React hooks in terms of logic composition capabilities. However, Vue composables are based on Vue's fine-grained reactivity system, which is fundamentally different from React hooks' execution model. This is discussed in more detail in the [Composition API FAQ](/guide/extras/composition-api-faq#comparison-with-react-hooks).\n\n## Further Reading\n\n- [Reactivity In Depth](/guide/extras/reactivity-in-depth): for a low-level understanding of how Vue's reactivity system works.\n- [State Management](/guide/scaling-up/state-management): for patterns of managing state shared by multiple components.\n- [Testing Composables](/guide/scaling-up/testing#testing-composables): tips on unit testing composables.\n- [VueUse](https://vueuse.org/): an ever-growing collection of Vue composables. The source code is also a great learning resource.","src/content/docs/reusability/composables.mdx","2eb607448feeb59a","scaling-up/server-side-rendering",{id:365,data:367,body:373,filePath:374,digest:375,deferredRender:16},{title:368,description:369,editUrl:16,head:370,template:18,sidebar:371,pagefind:16,draft:20},"Server-Side Rendering (SSR)","A guide to server-side rendering in Vue.js.",[],{hidden:20,attrs:372},{},"In Vue.js, server-side rendering (SSR) is a technique used to render components on the server and send the fully rendered HTML to the client. This guide will cover the basics of server-side rendering in Vue.js, including how to set it up and how to use it in your applications.\r\nIt will also provide examples to help you understand how to implement server-side rendering effectively in your Vue.js applications.","src/content/docs/scaling-up/server-side-rendering.mdx","9e88bd73783444ff","scaling-up/routing",{id:376,data:378,body:384,filePath:385,digest:386,deferredRender:16},{title:379,description:380,editUrl:16,head:381,template:18,sidebar:382,pagefind:16,draft:20},"Routing","A guide to routing in Vue.js.",[],{hidden:20,attrs:383},{},"In Vue.js, routing is an essential part of building single-page applications (SPAs). This guide will cover the basics of routing in Vue.js, including how to set up a router, how to define routes, and how to use navigation guards.\r\nIt will also provide examples to help you understand how to implement routing effectively in your Vue.js applications.","src/content/docs/scaling-up/routing.mdx","cb4e83b7f5d2a4bb","scaling-up/state-management",{id:387,data:389,body:395,filePath:396,digest:397,deferredRender:16},{title:390,description:391,editUrl:16,head:392,template:18,sidebar:393,pagefind:16,draft:20},"State Management","A guide to state management in Vue.js.",[],{hidden:20,attrs:394},{},"In Vue.js, state management is a crucial aspect of building applications. This guide will cover the basics of state management in Vue.js, including how to manage state within components and how to use state management libraries effectively.\r\nIt will also provide examples to help you understand how to implement state management in your Vue.js applications.","src/content/docs/scaling-up/state-management.mdx","a37d6e1acfc1e745","scaling-up/single-file-components",{id:398,data:400,body:406,filePath:407,digest:408,deferredRender:16},{title:401,description:402,editUrl:16,head:403,template:18,sidebar:404,pagefind:16,draft:20},"Single File Components","A guide to using Single File Components (SFCs) in Vue.js.",[],{hidden:20,attrs:405},{},"In Vue.js, Single File Components (SFCs) are a way to encapsulate the structure, style, and behavior of a component in a single file. This guide will cover the basics of creating and using SFCs, including how to define them and how to use them in your applications.\r\nIt will also provide examples to help you understand how to use SFCs effectively in your Vue.js applications.","src/content/docs/scaling-up/single-file-components.mdx","4209368e7c3bb9c0","reusability/plugins",{id:409,data:411,body:417,filePath:418,digest:419,deferredRender:16},{title:412,description:413,editUrl:16,head:414,template:18,sidebar:415,pagefind:16,draft:20},"Plugins","A guide to using plugins in Vue.js.",[],{hidden:20,attrs:416},{},"# Plugins\r\n\r\n## Introduction\r\n\r\nPlugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:\r\n\r\n```js\r\nimport { createApp } from \"vue\";\r\n\r\nconst app = createApp({});\r\n\r\napp.use(myPlugin, {\r\n  /* optional options */\r\n});\r\n```\r\n\r\nA plugin is defined as either an object that exposes an `install()` method, or simply a function that acts as the install function itself. The install function receives the [app instance](/api/application) along with additional options passed to `app.use()`, if any:\r\n\r\n```js\r\nconst myPlugin = {\r\n  install(app, options) {\r\n    // configure the app\r\n  },\r\n};\r\n```\r\n\r\nThere is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:\r\n\r\n1. Register one or more global components or custom directives with [`app.component()`](/api/application#app-component) and [`app.directive()`](/api/application#app-directive).\r\n\r\n2. Make a resource [injectable](/guide/components/provide-inject) throughout the app by calling [`app.provide()`](/api/application#app-provide).\r\n\r\n3. Add some global instance properties or methods by attaching them to [`app.config.globalProperties`](/api/application#app-config-globalproperties).\r\n\r\n4. A library that needs to perform some combination of the above (e.g. [vue-router](https://github.com/vuejs/vue-router-next)).\r\n\r\n## Writing a Plugin\r\n\r\nIn order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displays `i18n` (short for [Internationalization](https://en.wikipedia.org/wiki/Internationalization_and_localization)) strings.\r\n\r\nLet's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate.\r\n\r\n```js\r\n// plugins/i18n.js\r\nexport default {\r\n  install: (app, options) => {\r\n    // Plugin code goes here\r\n  },\r\n};\r\n```\r\n\r\nWe want to create a translation function. This function will receive a dot-delimited `key` string, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:\r\n\r\n```vue-html\r\n<h1>{{ $translate('greetings.hello') }}</h1>\r\n```\r\n\r\nSince this function should be globally available in all templates, we will make it so by attaching it to `app.config.globalProperties` in our plugin:\r\n\r\n```js\r\n// plugins/i18n.js\r\nexport default {\r\n  install: (app, options) => {\r\n    // inject a globally available $translate() method\r\n    app.config.globalProperties.$translate = (key) => {\r\n      // retrieve a nested property in `options`\r\n      // using `key` as the path\r\n      return key.split(\".\").reduce((o, i) => {\r\n        if (o) return o[i];\r\n      }, options);\r\n    };\r\n  },\r\n};\r\n```\r\n\r\nOur `$translate` function will take a string such as `greetings.hello`, look inside the user provided configuration and return the translated value.\r\n\r\nThe object containing the translated keys should be passed to the plugin during installation via additional parameters to `app.use()`:\r\n\r\n```js\r\nimport i18nPlugin from \"./plugins/i18n\";\r\n\r\napp.use(i18nPlugin, {\r\n  greetings: {\r\n    hello: \"Bonjour!\",\r\n  },\r\n});\r\n```\r\n\r\nNow, our initial expression `$translate('greetings.hello')` will be replaced by `Bonjour!` at runtime.\r\n\r\nSee also: [Augmenting Global Properties](/guide/typescript/options-api#augmenting-global-properties) <sup class=\"vt-badge ts\" />\r\n\r\n:::tip\r\nUse global properties scarcely, since it can quickly become confusing if too many global properties injected by different plugins are used throughout an app.\r\n:::\r\n\r\n### Provide / Inject with Plugins\r\n\r\nPlugins also allow us to use `provide` to give plugin users access to a function or attribute. For example, we can allow the application to have access to the `options` parameter to be able to use the translations object.\r\n\r\n```js\r\n// plugins/i18n.js\r\nexport default {\r\n  install: (app, options) => {\r\n    app.provide(\"i18n\", options);\r\n  },\r\n};\r\n```\r\n\r\nPlugin users will now be able to inject the plugin options into their components using the `i18n` key:\r\n\r\n<div class=\"composition-api\">\r\n\r\n```vue\r\n<script setup>\r\nimport { inject } from \"vue\";\r\n\r\nconst i18n = inject(\"i18n\");\r\n\r\nconsole.log(i18n.greetings.hello);\r\n</script>\r\n```\r\n\r\n</div>\r\n<div class=\"options-api\">\r\n\r\n```js\r\nexport default {\r\n  inject: [\"i18n\"],\r\n  created() {\r\n    console.log(this.i18n.greetings.hello);\r\n  },\r\n};\r\n```\r\n\r\n</div>\r\n\r\n### Bundle for NPM\r\n\r\nIf you further want to build and publish your plugin for others to use, see [Vite's section on Library Mode](https://vitejs.dev/guide/build.html#library-mode).","src/content/docs/reusability/plugins.mdx","234cb62ddb1e7241","scaling-up/testing",{id:420,data:422,body:428,filePath:429,digest:430,deferredRender:16},{title:423,description:424,editUrl:16,head:425,template:18,sidebar:426,pagefind:16,draft:20},"Testing","A guide to testing Vue.js applications.",[],{hidden:20,attrs:427},{},"In Vue.js, testing is an essential part of the development process. This guide will cover the basics of testing Vue.js applications, including how to set up a testing environment, how to write tests for components, and how to use testing libraries effectively.\r\nIt will also provide examples to help you understand how to test your Vue.js applications thoroughly.","src/content/docs/scaling-up/testing.mdx","9d9dfd2b9063ea7f","scaling-up/tooling",{id:431,data:433,body:439,filePath:440,digest:441,deferredRender:16},{title:434,description:435,editUrl:16,head:436,template:18,sidebar:437,pagefind:16,draft:20},"Tooling","A guide to tooling in Vue.js.",[],{hidden:20,attrs:438},{},"In Vue.js, tooling is an important aspect of the development process. This guide will cover the basics of tooling in Vue.js, including how to set up a development environment, how to use build tools, and how to optimize your workflow.\r\nIt will also provide examples to help you understand how to use tooling effectively in your Vue.js applications.","src/content/docs/scaling-up/tooling.mdx","6dc9caaa7854862b","typescript/overview",{id:442,data:444,body:450,filePath:451,digest:452,deferredRender:16},{title:445,description:446,editUrl:16,head:447,template:18,sidebar:448,pagefind:16,draft:20},"Overview","A guide to using TypeScript in Vue.js.",[],{hidden:20,attrs:449},{},"In Vue.js, TypeScript is a powerful tool for building robust applications. This guide will cover the basics of using TypeScript in Vue.js, including how to set up your project for TypeScript, how to use TypeScript with the Composition API, and how to take advantage of TypeScript's type system in your Vue.js components.\r\nIt will also provide examples to help you understand how to use TypeScript effectively in your Vue.js applications.","src/content/docs/typescript/overview.mdx","d3e9683ee1444845","typescript/ts-with-composition-api",{id:453,data:455,body:461,filePath:462,digest:463,deferredRender:16},{title:456,description:457,editUrl:16,head:458,template:18,sidebar:459,pagefind:16,draft:20},"TS with Composition API","A guide to using TypeScript with the Composition API in Vue.js.",[],{hidden:20,attrs:460},{},"In Vue.js, the Composition API is a powerful way to organize and reuse logic in your components. This guide will cover the basics of using TypeScript with the Composition API, including how to define props and emits, how to use reactive and ref, and how to create composables.\r\nIt will also provide examples to help you understand how to use TypeScript effectively with the Composition API in your Vue.js applications.","src/content/docs/typescript/ts-with-composition-api.mdx","683ee31c8c389098","typescript/ts-with-options-api",{id:464,data:466,body:472,filePath:473,digest:474,deferredRender:16},{title:467,description:468,editUrl:16,head:469,template:18,sidebar:470,pagefind:16,draft:20},"TS with Options API","A guide to using TypeScript with the Options API in Vue.js.",[],{hidden:20,attrs:471},{},"In Vue.js, the Options API is a traditional way to organize component code. This guide will cover the basics of using TypeScript with the Options API, including how to define props and emits, how to use data and computed properties, and how to create mixins.\r\nIt will also provide examples to help you understand how to use TypeScript effectively with the Options API in your Vue.js applications.\r\n\r\n## Defining Props and Emits\r\n\r\nWhen using TypeScript with the Options API, you can define props and emits using the `defineProps` and `defineEmits` functions. This allows you to specify the types of props and events that your component accepts.\r\n\r\n```typescript\r\n\r\n```","src/content/docs/typescript/ts-with-options-api.mdx","1b8e157c46033cea"];

export { _astro_dataLayerContent as default };
